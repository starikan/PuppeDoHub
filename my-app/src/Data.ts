/* eslint-disable no-template-curly-in-string */
export default {
  argsRedefine: { PPD_LOG_NAMES_ONLY: ['кейсыАвторизация'] },
  description: 'Авторизация, открытие и закрытие смены.',
  logOptions: { backgroundColor: 'white', textColor: 'black' },
  name: 'кейсыАвторизация',
  runTest: [
    {
      data: { безАвторизации: true },
      description: 'Накатка фикстур и включение среды перед тесткейсами',
      name: 'beforeMainTests',
      needData: ['безАвторизации?', 'фикстуры?', 'base?', 'неНакатыватьОсновные?'],
      runTest: [
        { logOptions: { logThis: false }, name: 'initData', type: 'atom' },
        {
          bindData: {
            base: 'base',
            additional1: 'фикстуры',
            additional2: 'fiskalFixtures',
            неНакатыватьОсновные: 'неНакатыватьОсновные',
          },
          description: 'Накатка фикстур',
          logOptions: { logThis: false },
          name: 'накатимФикстуры',
          needData: ['base?', 'additional1?', 'additional2?', 'неНакатыватьОсновные?'],
          type: 'atom',
        },
        {
          bindData: { envName: 'mainEnvName' },
          bindDescription: "`Switch on environment: '${envName}'`",
          description: 'Включаем среду Electron',
          inlineJS:
            "const envName = this.data.envName; const env = this.data.env; await this.log({ text: `Environment switch on '${env ? env : envName}'` }); await this.envs.setEnv({ name: envName, env });\n",
          logOptions: { logThis: false },
          name: 'envSwitch',
          needData: ['envName?', 'env?'],
          type: 'atom',
        },
        {
          bindData: { css: 'cssNoAnimations' },
          description: 'Добавим специальный CSS, который отключает всю анимацию в кассе',
          logOptions: { logThis: false },
          name: 'addCSS',
          needData: ['css'],
          type: 'atom',
        },
        {
          bindDescription:
            "'Авторизуемся админом. Логин: ' + authData.loginElectron + ' Пароль: ' + authData.passwordElectron",
          description: 'Авторизуемся с логином администратора',
          if: '!безАвторизации',
          logOptions: { logChildren: false },
          name: 'авторизацияСоВводомЛогина',
          needData: ['needSavePass?'],
          runTest: [
            {
              allowOptions: [
                'count',
                'timeDelayBeforeClick',
                'button',
                'logAfter',
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'timeDelayAfterClick',
                'waitingTime',
              ],
              bindSelectors: { selector: 'auth.selectPasswordEnter' },
              description: 'Открываем вкладку "По паролю"',
              logOptions: { logChildren: false },
              name: 'clickSelector',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              runTest: [
                {
                  allowOptions: [
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'waitingTime',
                    'noThrow',
                  ],
                  bindDescription: "`Wait for: '${selector}'`",
                  description: 'Wait selector',
                  name: 'waitForSelector',
                  needSelectors: ['selector'],
                  type: 'atom',
                },
                { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                {
                  allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
                  bindData: { selectorNumber: 'selectorNumber' },
                  description: 'Click',
                  name: 'clickSelectorRaw',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
              ],
            },
            {
              allowOptions: [
                'count',
                'timeDelayBeforeClick',
                'button',
                'logAfter',
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'timeDelayAfterClick',
                'waitingTime',
              ],
              bindSelectors: { selector: 'auth.showLoginInput' },
              description: "Нажимем на ссылку 'Кассир', чтобы увидеть поля ввода логина и пароля",
              logOptions: { logChildren: false },
              name: 'clickSelector',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              runTest: [
                {
                  allowOptions: [
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'waitingTime',
                    'noThrow',
                  ],
                  bindDescription: "`Wait for: '${selector}'`",
                  description: 'Wait selector',
                  name: 'waitForSelector',
                  needSelectors: ['selector'],
                  type: 'atom',
                },
                { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                {
                  allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
                  bindData: { selectorNumber: 'selectorNumber' },
                  description: 'Click',
                  name: 'clickSelectorRaw',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
              ],
            },
            {
              allowOptions: [
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'noClearInput',
                'waitingTime',
              ],
              bindData: { text: 'authData.loginElectron' },
              bindDescription: "'Вводим логин: ' + authData.loginElectron",
              bindSelectors: { selector: 'auth.inputLogin' },
              logOptions: { logChildren: false },
              name: 'typeInput',
              needData: ['text'],
              needSelectors: ['selector'],
              runTest: [
                {
                  allowOptions: [
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'waitingTime',
                    'noThrow',
                  ],
                  bindDescription: "`Wait for: '${selector}'`",
                  description: 'Wait selector',
                  name: 'waitForSelector',
                  needSelectors: ['selector'],
                  type: 'atom',
                },
                {
                  allowOptions: ['noClearInput'],
                  bindData: { text: 'text' },
                  bindDescription: "`Type text: '${text}' in input: '${selector}'`",
                  description: 'Type in selector',
                  name: 'typeInputRaw',
                  needData: ['text'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
              ],
            },
            {
              allowOptions: [
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'noClearInput',
                'waitingTime',
              ],
              bindData: { text: 'authData.passwordElectron' },
              bindDescription: "'Вводим пароль: ' + authData.passwordElectron",
              bindSelectors: { selector: 'auth.inputPassword' },
              logOptions: { logChildren: false },
              name: 'typeInput',
              needData: ['text'],
              needSelectors: ['selector'],
              runTest: [
                {
                  allowOptions: [
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'waitingTime',
                    'noThrow',
                  ],
                  bindDescription: "`Wait for: '${selector}'`",
                  description: 'Wait selector',
                  name: 'waitForSelector',
                  needSelectors: ['selector'],
                  type: 'atom',
                },
                {
                  allowOptions: ['noClearInput'],
                  bindData: { text: 'text' },
                  bindDescription: "`Type text: '${text}' in input: '${selector}'`",
                  description: 'Type in selector',
                  name: 'typeInputRaw',
                  needData: ['text'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
              ],
            },
            {
              allowOptions: [
                'count',
                'timeDelayBeforeClick',
                'button',
                'logAfter',
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'timeDelayAfterClick',
                'waitingTime',
              ],
              bindSelectors: { selector: 'auth.savePassCheckbox' },
              description: 'Ставим чекбокс "Сохранить пароль"',
              if: 'needSavePass !== null',
              logOptions: { logChildren: false },
              name: 'clickSelector',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              runTest: [
                {
                  allowOptions: [
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'waitingTime',
                    'noThrow',
                  ],
                  bindDescription: "`Wait for: '${selector}'`",
                  description: 'Wait selector',
                  name: 'waitForSelector',
                  needSelectors: ['selector'],
                  type: 'atom',
                },
                { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                {
                  allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
                  bindData: { selectorNumber: 'selectorNumber' },
                  description: 'Click',
                  name: 'clickSelectorRaw',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
              ],
            },
            {
              allowOptions: [
                'count',
                'timeDelayBeforeClick',
                'button',
                'logAfter',
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'timeDelayAfterClick',
                'waitingTime',
              ],
              bindSelectors: { selector: 'auth.inputSubmit' },
              description: 'Нажимаем кнопку логина',
              logOptions: { logChildren: false },
              name: 'clickSelector',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              runTest: [
                {
                  allowOptions: [
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'waitingTime',
                    'noThrow',
                  ],
                  bindDescription: "`Wait for: '${selector}'`",
                  description: 'Wait selector',
                  name: 'waitForSelector',
                  needSelectors: ['selector'],
                  type: 'atom',
                },
                { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                {
                  allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
                  bindData: { selectorNumber: 'selectorNumber' },
                  description: 'Click',
                  name: 'clickSelectorRaw',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
              ],
            },
          ],
        },
        {
          description: 'Открываем смену',
          if: '!безАвторизации',
          logOptions: { logChildren: false },
          name: 'открытиеСмены',
          runTest: [
            {
              allowOptions: [
                'count',
                'timeDelayBeforeClick',
                'button',
                'logAfter',
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'timeDelayAfterClick',
                'waitingTime',
              ],
              bindSelectors: { selector: 'session.openButton' },
              description: 'Нажимаем "Открыть смену"',
              logOptions: { logChildren: false },
              name: 'clickSelector',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              runTest: [
                {
                  allowOptions: [
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'waitingTime',
                    'noThrow',
                  ],
                  bindDescription: "`Wait for: '${selector}'`",
                  description: 'Wait selector',
                  name: 'waitForSelector',
                  needSelectors: ['selector'],
                  type: 'atom',
                },
                { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                {
                  allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
                  bindData: { selectorNumber: 'selectorNumber' },
                  description: 'Click',
                  name: 'clickSelectorRaw',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
              ],
            },
            {
              allowOptions: [
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'waitingTime',
                'noThrow',
              ],
              bindDescription: "`Wait for: '${selector}'`",
              bindSelectors: { selector: 'mainView.menuButton' },
              description: 'Ждем закрытия окна и появления кнопки открытия бокового меню',
              name: 'waitForSelector',
              needSelectors: ['selector'],
              type: 'atom',
            },
          ],
        },
      ],
    },
    {
      description: 'Авторизация по ПинКоду. Проверка на ввод невалидного пинкода',
      logOptions: { textColor: 'black', backgroundColor: 'white' },
      name: 'case',
      runTest: [
        {
          allowOptions: [
            'count',
            'timeDelayBeforeClick',
            'button',
            'logAfter',
            'hidden',
            'visible',
            'timeDelayBeforeWait',
            'timeDelayAfterWait',
            'timeDelayAfterClick',
            'waitingTime',
          ],
          bindSelectors: { selector: 'auth.selectPinCodeEnter' },
          description: 'На основном экране авторизации переходим во вкладку "По ПИН-коду"',
          logOptions: { logChildren: false },
          name: 'clickSelector',
          needData: ['selectorNumber?'],
          needSelectors: ['selector'],
          runTest: [
            {
              allowOptions: [
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'waitingTime',
                'noThrow',
              ],
              bindDescription: "`Wait for: '${selector}'`",
              description: 'Wait selector',
              name: 'waitForSelector',
              needSelectors: ['selector'],
              type: 'atom',
            },
            { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
            {
              allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
              bindData: { selectorNumber: 'selectorNumber' },
              description: 'Click',
              name: 'clickSelectorRaw',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              type: 'atom',
            },
          ],
        },
        {
          bindData: { пинКод: 'authData.pinCodeElectronInvalid' },
          description: 'Набираем пинкод, которого заведомо нет в системе',
          logOptions: { logChildren: false },
          name: 'набратьПинкод',
          needData: ['пинКод'],
          runTest: [
            { description: 'Сброс итератора $i', name: 'blank', type: 'atom' },
            {
              allowOptions: [
                'count',
                'timeDelayBeforeClick',
                'button',
                'logAfter',
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'timeDelayAfterClick',
                'waitingTime',
              ],
              bindDescription: "'Нажимаем кнопку пинкода: ' + пинКод[$i]",
              bindSelectors: { selector: 'auth.pinCodeButton.replace("__number__", пинКод[$i])' },
              logOptions: { logChildren: false },
              name: 'clickSelector',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              repeat: '$lengthPin',
              runTest: [
                {
                  allowOptions: [
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'waitingTime',
                    'noThrow',
                  ],
                  bindDescription: "`Wait for: '${selector}'`",
                  description: 'Wait selector',
                  name: 'waitForSelector',
                  needSelectors: ['selector'],
                  type: 'atom',
                },
                { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                {
                  allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
                  bindData: { selectorNumber: 'selectorNumber' },
                  description: 'Click',
                  name: 'clickSelectorRaw',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
              ],
            },
          ],
        },
        {
          allowOptions: [
            'count',
            'timeDelayBeforeClick',
            'button',
            'logAfter',
            'hidden',
            'visible',
            'timeDelayBeforeWait',
            'timeDelayAfterWait',
            'timeDelayAfterClick',
            'waitingTime',
          ],
          bindSelectors: { selector: 'alerts.closeButton' },
          description: 'Закрываем появившуюся ошибку',
          logOptions: { logChildren: false },
          name: 'clickSelector',
          needData: ['selectorNumber?'],
          needSelectors: ['selector'],
          runTest: [
            {
              allowOptions: [
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'waitingTime',
                'noThrow',
              ],
              bindDescription: "`Wait for: '${selector}'`",
              description: 'Wait selector',
              name: 'waitForSelector',
              needSelectors: ['selector'],
              type: 'atom',
            },
            { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
            {
              allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
              bindData: { selectorNumber: 'selectorNumber' },
              description: 'Click',
              name: 'clickSelectorRaw',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              type: 'atom',
            },
          ],
        },
        {
          allowOptions: ['timeDelay'],
          allowResults: ['count'],
          bindSelectors: { selector: 'auth.pinCodePointsActive' },
          description:
            'Проверяем точки, которые появляются сверху при вводе цифр. Не должно быть отмечено ни одной точки',
          errorIfResult: 'count !== 0',
          name: 'countSelectors',
          needSelectors: ['selector'],
          type: 'atom',
        },
      ],
      tags: ['авторизация'],
      type: 'atom',
    },
    {
      description: 'Авторизация по ПинКоду. Проверка ввода не полного пинкода и стирание',
      logOptions: { textColor: 'black', backgroundColor: 'white' },
      name: 'case',
      runTest: [
        {
          data: { пинКод: '11' },
          description: 'Набираем 2 любые цифры, например "11"',
          logOptions: { logChildren: false },
          name: 'набратьПинкод',
          needData: ['пинКод'],
          runTest: [
            { description: 'Сброс итератора $i', name: 'blank', type: 'atom' },
            {
              allowOptions: [
                'count',
                'timeDelayBeforeClick',
                'button',
                'logAfter',
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'timeDelayAfterClick',
                'waitingTime',
              ],
              bindDescription: "'Нажимаем кнопку пинкода: ' + пинКод[$i]",
              bindSelectors: { selector: 'auth.pinCodeButton.replace("__number__", пинКод[$i])' },
              logOptions: { logChildren: false },
              name: 'clickSelector',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              repeat: '$lengthPin',
              runTest: [
                {
                  allowOptions: [
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'waitingTime',
                    'noThrow',
                  ],
                  bindDescription: "`Wait for: '${selector}'`",
                  description: 'Wait selector',
                  name: 'waitForSelector',
                  needSelectors: ['selector'],
                  type: 'atom',
                },
                { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                {
                  allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
                  bindData: { selectorNumber: 'selectorNumber' },
                  description: 'Click',
                  name: 'clickSelectorRaw',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
              ],
            },
          ],
        },
        {
          allowOptions: ['timeDelay'],
          allowResults: ['count'],
          bindSelectors: { selector: 'auth.pinCodePointsActive' },
          description: 'Проверяем точки, должно быть 2 точки',
          errorIfResult: 'count !== 2',
          name: 'countSelectors',
          needSelectors: ['selector'],
          type: 'atom',
        },
        {
          allowOptions: [
            'count',
            'timeDelayBeforeClick',
            'button',
            'logAfter',
            'hidden',
            'visible',
            'timeDelayBeforeWait',
            'timeDelayAfterWait',
            'timeDelayAfterClick',
            'waitingTime',
          ],
          bindSelectors: { selector: 'auth.pinCodeDeleteButton' },
          description: 'Нажимаем стереть',
          logOptions: { logChildren: false },
          name: 'clickSelector',
          needData: ['selectorNumber?'],
          needSelectors: ['selector'],
          repeat: 2,
          runTest: [
            {
              allowOptions: [
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'waitingTime',
                'noThrow',
              ],
              bindDescription: "`Wait for: '${selector}'`",
              description: 'Wait selector',
              name: 'waitForSelector',
              needSelectors: ['selector'],
              type: 'atom',
            },
            { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
            {
              allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
              bindData: { selectorNumber: 'selectorNumber' },
              description: 'Click',
              name: 'clickSelectorRaw',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              type: 'atom',
            },
          ],
        },
        {
          allowOptions: ['timeDelay'],
          allowResults: ['count'],
          bindSelectors: { selector: 'auth.pinCodePointsActive' },
          description: 'Проверяем точки, не должно быть отмечено ни одной точки',
          errorIfResult: 'count !== 0',
          name: 'countSelectors',
          needSelectors: ['selector'],
          type: 'atom',
        },
      ],
      tags: ['авторизация'],
      type: 'atom',
    },
    {
      description: 'Авторизация по ПинКоду. Проверка ввода валидного пинкода',
      logOptions: { textColor: 'black', backgroundColor: 'white' },
      name: 'case',
      runTest: [
        {
          bindData: { пинКод: 'authData.pinCodeElectron' },
          bindDescription: "'Вводим валидный пинкод: ' + authData.pinCodeElectron",
          description: 'Набираем пинкод',
          logOptions: { logChildren: false },
          name: 'набратьПинкод',
          needData: ['пинКод'],
          runTest: [
            { description: 'Сброс итератора $i', name: 'blank', type: 'atom' },
            {
              allowOptions: [
                'count',
                'timeDelayBeforeClick',
                'button',
                'logAfter',
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'timeDelayAfterClick',
                'waitingTime',
              ],
              bindDescription: "'Нажимаем кнопку пинкода: ' + пинКод[$i]",
              bindSelectors: { selector: 'auth.pinCodeButton.replace("__number__", пинКод[$i])' },
              logOptions: { logChildren: false },
              name: 'clickSelector',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              repeat: '$lengthPin',
              runTest: [
                {
                  allowOptions: [
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'waitingTime',
                    'noThrow',
                  ],
                  bindDescription: "`Wait for: '${selector}'`",
                  description: 'Wait selector',
                  name: 'waitForSelector',
                  needSelectors: ['selector'],
                  type: 'atom',
                },
                { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                {
                  allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
                  bindData: { selectorNumber: 'selectorNumber' },
                  description: 'Click',
                  name: 'clickSelectorRaw',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
              ],
            },
          ],
        },
        {
          allowOptions: [
            'count',
            'timeDelayBeforeClick',
            'button',
            'logAfter',
            'hidden',
            'visible',
            'timeDelayBeforeWait',
            'timeDelayAfterWait',
            'timeDelayAfterClick',
            'waitingTime',
          ],
          bindSelectors: { selector: 'session.cancelButton' },
          description: 'Появляется окно открытия смены. Отказываемся открывать смену',
          logOptions: { logChildren: false },
          name: 'clickSelector',
          needData: ['selectorNumber?'],
          needSelectors: ['selector'],
          runTest: [
            {
              allowOptions: [
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'waitingTime',
                'noThrow',
              ],
              bindDescription: "`Wait for: '${selector}'`",
              description: 'Wait selector',
              name: 'waitForSelector',
              needSelectors: ['selector'],
              type: 'atom',
            },
            { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
            {
              allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
              bindData: { selectorNumber: 'selectorNumber' },
              description: 'Click',
              name: 'clickSelectorRaw',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              type: 'atom',
            },
          ],
        },
      ],
      tags: ['авторизация'],
      type: 'atom',
    },
    {
      description: 'Авторизация c пустыми полями по e-mail. Проверка невозможности залогинивания с пустыми полями.',
      logOptions: { textColor: 'black', backgroundColor: 'white' },
      name: 'case',
      runTest: [
        {
          allowOptions: [
            'count',
            'timeDelayBeforeClick',
            'button',
            'logAfter',
            'hidden',
            'visible',
            'timeDelayBeforeWait',
            'timeDelayAfterWait',
            'timeDelayAfterClick',
            'waitingTime',
          ],
          bindSelectors: { selector: 'auth.selectPasswordEnter' },
          description: 'Открываем вкладку "По паролю"',
          logOptions: { logChildren: false },
          name: 'clickSelector',
          needData: ['selectorNumber?'],
          needSelectors: ['selector'],
          runTest: [
            {
              allowOptions: [
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'waitingTime',
                'noThrow',
              ],
              bindDescription: "`Wait for: '${selector}'`",
              description: 'Wait selector',
              name: 'waitForSelector',
              needSelectors: ['selector'],
              type: 'atom',
            },
            { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
            {
              allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
              bindData: { selectorNumber: 'selectorNumber' },
              description: 'Click',
              name: 'clickSelectorRaw',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              type: 'atom',
            },
          ],
        },
        {
          allowOptions: [
            'count',
            'timeDelayBeforeClick',
            'button',
            'logAfter',
            'hidden',
            'visible',
            'timeDelayBeforeWait',
            'timeDelayAfterWait',
            'timeDelayAfterClick',
            'waitingTime',
          ],
          bindSelectors: { selector: 'auth.showLoginInput' },
          description: "Нажимем на ссылку 'Кассир', чтобы увидеть поля ввода логина и пароля.",
          logOptions: { logChildren: false },
          name: 'clickSelector',
          needData: ['selectorNumber?'],
          needSelectors: ['selector'],
          runTest: [
            {
              allowOptions: [
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'waitingTime',
                'noThrow',
              ],
              bindDescription: "`Wait for: '${selector}'`",
              description: 'Wait selector',
              name: 'waitForSelector',
              needSelectors: ['selector'],
              type: 'atom',
            },
            { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
            {
              allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
              bindData: { selectorNumber: 'selectorNumber' },
              description: 'Click',
              name: 'clickSelectorRaw',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              type: 'atom',
            },
          ],
        },
        {
          allowOptions: [
            'count',
            'timeDelayBeforeClick',
            'button',
            'logAfter',
            'hidden',
            'visible',
            'timeDelayBeforeWait',
            'timeDelayAfterWait',
            'timeDelayAfterClick',
            'waitingTime',
          ],
          bindSelectors: { selector: 'auth.inputSubmit' },
          description: "Нажимем на кнопку 'Войти', чтобы пустые поля вывалились с ошибкой.",
          logOptions: { logChildren: false },
          name: 'clickSelector',
          needData: ['selectorNumber?'],
          needSelectors: ['selector'],
          runTest: [
            {
              allowOptions: [
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'waitingTime',
                'noThrow',
              ],
              bindDescription: "`Wait for: '${selector}'`",
              description: 'Wait selector',
              name: 'waitForSelector',
              needSelectors: ['selector'],
              type: 'atom',
            },
            { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
            {
              allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
              bindData: { selectorNumber: 'selectorNumber' },
              description: 'Click',
              name: 'clickSelectorRaw',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              type: 'atom',
            },
          ],
        },
        {
          allowResults: ['success'],
          bindData: { toastMessage: 'всплывашки.authError' },
          bindDescription: "`Проверка всплывающего сообщения: '${toastMessage}'`",
          logOptions: { logChildren: false },
          name: 'проверкаВсплывающегоСообщения',
          needData: ['toastMessage', 'strictMode?'],
          runTest: [
            { description: 'Присваиваем переменную для селектора', name: 'blank', type: 'atom' },
            {
              allowOptions: ['waitingTime'],
              allowResults: ['exists'],
              bindDescription: "`Проверяем, что на экране вышло всплывающее сообщение: '${toastMessage}'`",
              bindSelectors: { selector: 'selectorMessage' },
              logOptions: { logChildren: false },
              name: 'checkSelector',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              options: { waitingTime: 500 },
              runTest: [
                {
                  allowOptions: [
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'waitingTime',
                    'noThrow',
                  ],
                  bindDescription: "`Wait for: '${selector}'`",
                  bindSelectors: { selector: 'selector' },
                  name: 'waitForSelector',
                  needSelectors: ['selector'],
                  options: { noThrow: true, waitingTime: 1 },
                  type: 'atom',
                },
                { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                {
                  allowResults: ['exists'],
                  bindData: { selectorNumber: 'selectorNumber' },
                  bindSelectors: { selector: 'selector' },
                  name: 'checkSelectorRaw',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
              ],
              type: 'atom',
            },
            {
              allowResults: ['text'],
              bindDescription: "`Get text from selector: '${selector}'`",
              bindSelectors: { selector: 'selectorMessage' },
              description: 'Проверка текста всплывашки',
              errorIfResult: '!text.includes(toastMessage)',
              if: 'isSuccessfull',
              name: 'getText',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              type: 'atom',
            },
            {
              allowOptions: [
                'count',
                'timeDelayBeforeClick',
                'button',
                'logAfter',
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'timeDelayAfterClick',
                'waitingTime',
              ],
              bindDescription: "`Кликаем чтобы закрыть всплывающее сообщение: '${toastMessage}'`",
              bindSelectors: { selector: 'selectorMessage' },
              if: 'isSuccessfull',
              logOptions: { logChildren: false },
              name: 'clickSelector',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              runTest: [
                {
                  allowOptions: [
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'waitingTime',
                    'noThrow',
                  ],
                  bindDescription: "`Wait for: '${selector}'`",
                  description: 'Wait selector',
                  name: 'waitForSelector',
                  needSelectors: ['selector'],
                  type: 'atom',
                },
                { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                {
                  allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
                  bindData: { selectorNumber: 'selectorNumber' },
                  description: 'Click',
                  name: 'clickSelectorRaw',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
              ],
            },
            {
              bindDescription: "`Не обнаружено информационное сообщение: '${toastMessage}'`",
              errorIf: 'strictMode && !isSuccessfull',
              name: 'blank',
              type: 'atom',
            },
            { name: 'blank', type: 'atom' },
          ],
        },
        {
          allowOptions: ['timeDelay'],
          allowResults: ['count'],
          bindSelectors: { selector: 'auth.errorBlankField' },
          description: 'Считаем ошибки в полях. Ошибочных полей должно быть 2.',
          errorIfResult: 'count !== 2',
          name: 'countSelectors',
          needSelectors: ['selector'],
          type: 'atom',
        },
        {
          allowOptions: [
            'count',
            'timeDelayBeforeClick',
            'button',
            'logAfter',
            'hidden',
            'visible',
            'timeDelayBeforeWait',
            'timeDelayAfterWait',
            'timeDelayAfterClick',
            'waitingTime',
          ],
          bindSelectors: { selector: 'auth.cashierLoginLink' },
          description: 'Нажимаем иконку с кассой, чтобы вернуть всё как было.',
          logOptions: { logChildren: false },
          name: 'clickSelector',
          needData: ['selectorNumber?'],
          needSelectors: ['selector'],
          runTest: [
            {
              allowOptions: [
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'waitingTime',
                'noThrow',
              ],
              bindDescription: "`Wait for: '${selector}'`",
              description: 'Wait selector',
              name: 'waitForSelector',
              needSelectors: ['selector'],
              type: 'atom',
            },
            { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
            {
              allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
              bindData: { selectorNumber: 'selectorNumber' },
              description: 'Click',
              name: 'clickSelectorRaw',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              type: 'atom',
            },
          ],
        },
        {
          allowOptions: [
            'count',
            'timeDelayBeforeClick',
            'button',
            'logAfter',
            'hidden',
            'visible',
            'timeDelayBeforeWait',
            'timeDelayAfterWait',
            'timeDelayAfterClick',
            'waitingTime',
          ],
          bindSelectors: { selector: 'auth.inputSubmit' },
          description: "Нажимаем на кнопку 'Войти', чтобы пустые поля вывалились с ошибкой.",
          logOptions: { logChildren: false },
          name: 'clickSelector',
          needData: ['selectorNumber?'],
          needSelectors: ['selector'],
          repeat: 2,
          runTest: [
            {
              allowOptions: [
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'waitingTime',
                'noThrow',
              ],
              bindDescription: "`Wait for: '${selector}'`",
              description: 'Wait selector',
              name: 'waitForSelector',
              needSelectors: ['selector'],
              type: 'atom',
            },
            { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
            {
              allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
              bindData: { selectorNumber: 'selectorNumber' },
              description: 'Click',
              name: 'clickSelectorRaw',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              type: 'atom',
            },
          ],
        },
        {
          allowResults: ['success'],
          bindData: { toastMessage: 'всплывашки.authError' },
          bindDescription: "`Проверка всплывающего сообщения: '${toastMessage}'`",
          logOptions: { logChildren: false },
          name: 'проверкаВсплывающегоСообщения',
          needData: ['toastMessage', 'strictMode?'],
          runTest: [
            { description: 'Присваиваем переменную для селектора', name: 'blank', type: 'atom' },
            {
              allowOptions: ['waitingTime'],
              allowResults: ['exists'],
              bindDescription: "`Проверяем, что на экране вышло всплывающее сообщение: '${toastMessage}'`",
              bindSelectors: { selector: 'selectorMessage' },
              logOptions: { logChildren: false },
              name: 'checkSelector',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              options: { waitingTime: 500 },
              runTest: [
                {
                  allowOptions: [
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'waitingTime',
                    'noThrow',
                  ],
                  bindDescription: "`Wait for: '${selector}'`",
                  bindSelectors: { selector: 'selector' },
                  name: 'waitForSelector',
                  needSelectors: ['selector'],
                  options: { noThrow: true, waitingTime: 1 },
                  type: 'atom',
                },
                { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                {
                  allowResults: ['exists'],
                  bindData: { selectorNumber: 'selectorNumber' },
                  bindSelectors: { selector: 'selector' },
                  name: 'checkSelectorRaw',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
              ],
              type: 'atom',
            },
            {
              allowResults: ['text'],
              bindDescription: "`Get text from selector: '${selector}'`",
              bindSelectors: { selector: 'selectorMessage' },
              description: 'Проверка текста всплывашки',
              errorIfResult: '!text.includes(toastMessage)',
              if: 'isSuccessfull',
              name: 'getText',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              type: 'atom',
            },
            {
              allowOptions: [
                'count',
                'timeDelayBeforeClick',
                'button',
                'logAfter',
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'timeDelayAfterClick',
                'waitingTime',
              ],
              bindDescription: "`Кликаем чтобы закрыть всплывающее сообщение: '${toastMessage}'`",
              bindSelectors: { selector: 'selectorMessage' },
              if: 'isSuccessfull',
              logOptions: { logChildren: false },
              name: 'clickSelector',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              runTest: [
                {
                  allowOptions: [
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'waitingTime',
                    'noThrow',
                  ],
                  bindDescription: "`Wait for: '${selector}'`",
                  description: 'Wait selector',
                  name: 'waitForSelector',
                  needSelectors: ['selector'],
                  type: 'atom',
                },
                { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                {
                  allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
                  bindData: { selectorNumber: 'selectorNumber' },
                  description: 'Click',
                  name: 'clickSelectorRaw',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
              ],
            },
            {
              bindDescription: "`Не обнаружено информационное сообщение: '${toastMessage}'`",
              errorIf: 'strictMode && !isSuccessfull',
              name: 'blank',
              type: 'atom',
            },
            { name: 'blank', type: 'atom' },
          ],
        },
        {
          allowOptions: ['timeDelay'],
          allowResults: ['count'],
          bindSelectors: { selector: 'auth.errorBlankField' },
          description: 'Считаем ошибки в полях. Ошибочных полей должно быть 1, только поле пароля.',
          errorIfResult: 'count !== 1',
          name: 'countSelectors',
          needSelectors: ['selector'],
          type: 'atom',
        },
      ],
      tags: ['авторизация'],
      type: 'atom',
    },
    {
      description: 'Под кассиром. Авторизация с неверным паролем',
      logOptions: { textColor: 'black', backgroundColor: 'white' },
      name: 'case',
      runTest: [
        {
          bindData: { password: 'authData.cashierPasswordInvalid' },
          bindDescription: "'Авторизация под кассиром с неверным паролем: ' + authData.cashierPasswordInvalid",
          logOptions: { logChildren: false },
          name: 'авторизацияКассиром',
          needData: ['password'],
          runTest: [
            {
              allowOptions: [
                'count',
                'timeDelayBeforeClick',
                'button',
                'logAfter',
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'timeDelayAfterClick',
                'waitingTime',
              ],
              bindSelectors: { selector: 'auth.selectPasswordEnter' },
              description: 'Открываем вкладку "По паролю"',
              logOptions: { logChildren: false },
              name: 'clickSelector',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              runTest: [
                {
                  allowOptions: [
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'waitingTime',
                    'noThrow',
                  ],
                  bindDescription: "`Wait for: '${selector}'`",
                  description: 'Wait selector',
                  name: 'waitForSelector',
                  needSelectors: ['selector'],
                  type: 'atom',
                },
                { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                {
                  allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
                  bindData: { selectorNumber: 'selectorNumber' },
                  description: 'Click',
                  name: 'clickSelectorRaw',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
              ],
            },
            {
              allowOptions: [
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'noClearInput',
                'waitingTime',
              ],
              bindData: { text: 'password' },
              bindDescription: "`Wait selector: '${selector}' and type text: '${text}' in input`",
              bindSelectors: { selector: 'auth.inputPassword' },
              description: 'Вводим пароль кассира в поле вода пароля',
              logOptions: { logChildren: false },
              name: 'typeInput',
              needData: ['text'],
              needSelectors: ['selector'],
              runTest: [
                {
                  allowOptions: [
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'waitingTime',
                    'noThrow',
                  ],
                  bindDescription: "`Wait for: '${selector}'`",
                  description: 'Wait selector',
                  name: 'waitForSelector',
                  needSelectors: ['selector'],
                  type: 'atom',
                },
                {
                  allowOptions: ['noClearInput'],
                  bindData: { text: 'text' },
                  bindDescription: "`Type text: '${text}' in input: '${selector}'`",
                  description: 'Type in selector',
                  name: 'typeInputRaw',
                  needData: ['text'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
              ],
            },
            {
              allowOptions: [
                'count',
                'timeDelayBeforeClick',
                'button',
                'logAfter',
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'timeDelayAfterClick',
                'waitingTime',
              ],
              bindSelectors: { selector: 'auth.inputSubmit' },
              description: 'Нажимаем кнопку "Вход"',
              logOptions: { logChildren: false },
              name: 'clickSelector',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              runTest: [
                {
                  allowOptions: [
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'waitingTime',
                    'noThrow',
                  ],
                  bindDescription: "`Wait for: '${selector}'`",
                  description: 'Wait selector',
                  name: 'waitForSelector',
                  needSelectors: ['selector'],
                  type: 'atom',
                },
                { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                {
                  allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
                  bindData: { selectorNumber: 'selectorNumber' },
                  description: 'Click',
                  name: 'clickSelectorRaw',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
              ],
            },
          ],
        },
        {
          allowResults: ['success'],
          bindData: { toastMessage: 'всплывашки.authError' },
          bindDescription: "`Проверка всплывающего сообщения: '${toastMessage}'`",
          logOptions: { logChildren: false },
          name: 'проверкаВсплывающегоСообщения',
          needData: ['toastMessage', 'strictMode?'],
          runTest: [
            { description: 'Присваиваем переменную для селектора', name: 'blank', type: 'atom' },
            {
              allowOptions: ['waitingTime'],
              allowResults: ['exists'],
              bindDescription: "`Проверяем, что на экране вышло всплывающее сообщение: '${toastMessage}'`",
              bindSelectors: { selector: 'selectorMessage' },
              logOptions: { logChildren: false },
              name: 'checkSelector',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              options: { waitingTime: 500 },
              runTest: [
                {
                  allowOptions: [
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'waitingTime',
                    'noThrow',
                  ],
                  bindDescription: "`Wait for: '${selector}'`",
                  bindSelectors: { selector: 'selector' },
                  name: 'waitForSelector',
                  needSelectors: ['selector'],
                  options: { noThrow: true, waitingTime: 1 },
                  type: 'atom',
                },
                { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                {
                  allowResults: ['exists'],
                  bindData: { selectorNumber: 'selectorNumber' },
                  bindSelectors: { selector: 'selector' },
                  name: 'checkSelectorRaw',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
              ],
              type: 'atom',
            },
            {
              allowResults: ['text'],
              bindDescription: "`Get text from selector: '${selector}'`",
              bindSelectors: { selector: 'selectorMessage' },
              description: 'Проверка текста всплывашки',
              errorIfResult: '!text.includes(toastMessage)',
              if: 'isSuccessfull',
              name: 'getText',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              type: 'atom',
            },
            {
              allowOptions: [
                'count',
                'timeDelayBeforeClick',
                'button',
                'logAfter',
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'timeDelayAfterClick',
                'waitingTime',
              ],
              bindDescription: "`Кликаем чтобы закрыть всплывающее сообщение: '${toastMessage}'`",
              bindSelectors: { selector: 'selectorMessage' },
              if: 'isSuccessfull',
              logOptions: { logChildren: false },
              name: 'clickSelector',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              runTest: [
                {
                  allowOptions: [
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'waitingTime',
                    'noThrow',
                  ],
                  bindDescription: "`Wait for: '${selector}'`",
                  description: 'Wait selector',
                  name: 'waitForSelector',
                  needSelectors: ['selector'],
                  type: 'atom',
                },
                { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                {
                  allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
                  bindData: { selectorNumber: 'selectorNumber' },
                  description: 'Click',
                  name: 'clickSelectorRaw',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
              ],
            },
            {
              bindDescription: "`Не обнаружено информационное сообщение: '${toastMessage}'`",
              errorIf: 'strictMode && !isSuccessfull',
              name: 'blank',
              type: 'atom',
            },
            { name: 'blank', type: 'atom' },
          ],
        },
      ],
      tags: ['авторизация'],
      type: 'atom',
    },
    {
      description: 'Под кассиром. Проверка открытия окна настроек из окна открытия смены',
      logOptions: { textColor: 'black', backgroundColor: 'white' },
      name: 'case',
      runTest: [
        {
          bindData: { password: 'authData.cashierPassword' },
          bindDescription: "`Авторизация кассиром с паролем: '${password}'`",
          logOptions: { logChildren: false },
          name: 'авторизацияКассиром',
          needData: ['password'],
          runTest: [
            {
              allowOptions: [
                'count',
                'timeDelayBeforeClick',
                'button',
                'logAfter',
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'timeDelayAfterClick',
                'waitingTime',
              ],
              bindSelectors: { selector: 'auth.selectPasswordEnter' },
              description: 'Открываем вкладку "По паролю"',
              logOptions: { logChildren: false },
              name: 'clickSelector',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              runTest: [
                {
                  allowOptions: [
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'waitingTime',
                    'noThrow',
                  ],
                  bindDescription: "`Wait for: '${selector}'`",
                  description: 'Wait selector',
                  name: 'waitForSelector',
                  needSelectors: ['selector'],
                  type: 'atom',
                },
                { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                {
                  allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
                  bindData: { selectorNumber: 'selectorNumber' },
                  description: 'Click',
                  name: 'clickSelectorRaw',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
              ],
            },
            {
              allowOptions: [
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'noClearInput',
                'waitingTime',
              ],
              bindData: { text: 'password' },
              bindDescription: "`Wait selector: '${selector}' and type text: '${text}' in input`",
              bindSelectors: { selector: 'auth.inputPassword' },
              description: 'Вводим пароль кассира в поле вода пароля',
              logOptions: { logChildren: false },
              name: 'typeInput',
              needData: ['text'],
              needSelectors: ['selector'],
              runTest: [
                {
                  allowOptions: [
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'waitingTime',
                    'noThrow',
                  ],
                  bindDescription: "`Wait for: '${selector}'`",
                  description: 'Wait selector',
                  name: 'waitForSelector',
                  needSelectors: ['selector'],
                  type: 'atom',
                },
                {
                  allowOptions: ['noClearInput'],
                  bindData: { text: 'text' },
                  bindDescription: "`Type text: '${text}' in input: '${selector}'`",
                  description: 'Type in selector',
                  name: 'typeInputRaw',
                  needData: ['text'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
              ],
            },
            {
              allowOptions: [
                'count',
                'timeDelayBeforeClick',
                'button',
                'logAfter',
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'timeDelayAfterClick',
                'waitingTime',
              ],
              bindSelectors: { selector: 'auth.inputSubmit' },
              description: 'Нажимаем кнопку "Вход"',
              logOptions: { logChildren: false },
              name: 'clickSelector',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              runTest: [
                {
                  allowOptions: [
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'waitingTime',
                    'noThrow',
                  ],
                  bindDescription: "`Wait for: '${selector}'`",
                  description: 'Wait selector',
                  name: 'waitForSelector',
                  needSelectors: ['selector'],
                  type: 'atom',
                },
                { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                {
                  allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
                  bindData: { selectorNumber: 'selectorNumber' },
                  description: 'Click',
                  name: 'clickSelectorRaw',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
              ],
            },
          ],
        },
        {
          allowOptions: [
            'count',
            'timeDelayBeforeClick',
            'button',
            'logAfter',
            'hidden',
            'visible',
            'timeDelayBeforeWait',
            'timeDelayAfterWait',
            'timeDelayAfterClick',
            'waitingTime',
          ],
          bindSelectors: { selector: 'session.openSettingsButton' },
          description: 'Нажимаем кнопку открытия окна настроек',
          logOptions: { logChildren: false },
          name: 'clickSelector',
          needData: ['selectorNumber?'],
          needSelectors: ['selector'],
          runTest: [
            {
              allowOptions: [
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'waitingTime',
                'noThrow',
              ],
              bindDescription: "`Wait for: '${selector}'`",
              description: 'Wait selector',
              name: 'waitForSelector',
              needSelectors: ['selector'],
              type: 'atom',
            },
            { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
            {
              allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
              bindData: { selectorNumber: 'selectorNumber' },
              description: 'Click',
              name: 'clickSelectorRaw',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              type: 'atom',
            },
          ],
        },
        {
          allowOptions: [
            'hidden',
            'visible',
            'timeDelayBeforeWait',
            'timeDelayAfterWait',
            'noClearInput',
            'waitingTime',
          ],
          bindData: { text: 'authData.settingCashierPassword' },
          bindDescription: "'Вводим пароль для входа в настройки: ' + authData.settingCashierPassword",
          bindSelectors: { selector: 'settingsWindow.enterSettingsCheckCashier_password' },
          logOptions: { logChildren: false },
          name: 'typeInput',
          needData: ['text'],
          needSelectors: ['selector'],
          runTest: [
            {
              allowOptions: [
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'waitingTime',
                'noThrow',
              ],
              bindDescription: "`Wait for: '${selector}'`",
              description: 'Wait selector',
              name: 'waitForSelector',
              needSelectors: ['selector'],
              type: 'atom',
            },
            {
              allowOptions: ['noClearInput'],
              bindData: { text: 'text' },
              bindDescription: "`Type text: '${text}' in input: '${selector}'`",
              description: 'Type in selector',
              name: 'typeInputRaw',
              needData: ['text'],
              needSelectors: ['selector'],
              type: 'atom',
            },
          ],
        },
        {
          allowOptions: [
            'count',
            'timeDelayBeforeClick',
            'button',
            'logAfter',
            'hidden',
            'visible',
            'timeDelayBeforeWait',
            'timeDelayAfterWait',
            'timeDelayAfterClick',
            'waitingTime',
          ],
          bindSelectors: { selector: 'settingsWindow.enterSettingsCheckCashier_continue' },
          description: 'Нажимаем кнопку "Продолжить"',
          logOptions: { logChildren: false },
          name: 'clickSelector',
          needData: ['selectorNumber?'],
          needSelectors: ['selector'],
          runTest: [
            {
              allowOptions: [
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'waitingTime',
                'noThrow',
              ],
              bindDescription: "`Wait for: '${selector}'`",
              description: 'Wait selector',
              name: 'waitForSelector',
              needSelectors: ['selector'],
              type: 'atom',
            },
            { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
            {
              allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
              bindData: { selectorNumber: 'selectorNumber' },
              description: 'Click',
              name: 'clickSelectorRaw',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              type: 'atom',
            },
          ],
        },
        {
          allowOptions: [
            'count',
            'timeDelayBeforeClick',
            'button',
            'logAfter',
            'hidden',
            'visible',
            'timeDelayBeforeWait',
            'timeDelayAfterWait',
            'timeDelayAfterClick',
            'waitingTime',
          ],
          bindSelectors: { selector: 'settingsWindow.settingsModalClose' },
          description: 'Закрываем окно настроек',
          logOptions: { logChildren: false },
          name: 'clickSelector',
          needData: ['selectorNumber?'],
          needSelectors: ['selector'],
          runTest: [
            {
              allowOptions: [
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'waitingTime',
                'noThrow',
              ],
              bindDescription: "`Wait for: '${selector}'`",
              description: 'Wait selector',
              name: 'waitForSelector',
              needSelectors: ['selector'],
              type: 'atom',
            },
            { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
            {
              allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
              bindData: { selectorNumber: 'selectorNumber' },
              description: 'Click',
              name: 'clickSelectorRaw',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              type: 'atom',
            },
          ],
        },
        {
          allowOptions: [
            'count',
            'timeDelayBeforeClick',
            'button',
            'logAfter',
            'hidden',
            'visible',
            'timeDelayBeforeWait',
            'timeDelayAfterWait',
            'timeDelayAfterClick',
            'waitingTime',
          ],
          bindSelectors: { selector: 'session.cancelButton' },
          description: 'Отказываемся открывать смену. Нажимаем отмену',
          logOptions: { logChildren: false },
          name: 'clickSelector',
          needData: ['selectorNumber?'],
          needSelectors: ['selector'],
          runTest: [
            {
              allowOptions: [
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'waitingTime',
                'noThrow',
              ],
              bindDescription: "`Wait for: '${selector}'`",
              description: 'Wait selector',
              name: 'waitForSelector',
              needSelectors: ['selector'],
              type: 'atom',
            },
            { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
            {
              allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
              bindData: { selectorNumber: 'selectorNumber' },
              description: 'Click',
              name: 'clickSelectorRaw',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              type: 'atom',
            },
          ],
        },
      ],
      tags: ['авторизация'],
      type: 'atom',
    },
    {
      description: 'Под админом. Проверка открытия окна настроек из окна открытия смены',
      logOptions: { textColor: 'black', backgroundColor: 'white' },
      name: 'case',
      runTest: [
        {
          bindDescription:
            "'Авторизуемся админом. Логин: ' + authData.loginElectron + ' Пароль: ' + authData.passwordElectron",
          logOptions: { logChildren: false },
          name: 'авторизацияСоВводомЛогина',
          needData: ['needSavePass?'],
          runTest: [
            {
              allowOptions: [
                'count',
                'timeDelayBeforeClick',
                'button',
                'logAfter',
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'timeDelayAfterClick',
                'waitingTime',
              ],
              bindSelectors: { selector: 'auth.selectPasswordEnter' },
              description: 'Открываем вкладку "По паролю"',
              logOptions: { logChildren: false },
              name: 'clickSelector',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              runTest: [
                {
                  allowOptions: [
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'waitingTime',
                    'noThrow',
                  ],
                  bindDescription: "`Wait for: '${selector}'`",
                  description: 'Wait selector',
                  name: 'waitForSelector',
                  needSelectors: ['selector'],
                  type: 'atom',
                },
                { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                {
                  allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
                  bindData: { selectorNumber: 'selectorNumber' },
                  description: 'Click',
                  name: 'clickSelectorRaw',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
              ],
            },
            {
              allowOptions: [
                'count',
                'timeDelayBeforeClick',
                'button',
                'logAfter',
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'timeDelayAfterClick',
                'waitingTime',
              ],
              bindSelectors: { selector: 'auth.showLoginInput' },
              description: "Нажимем на ссылку 'Кассир', чтобы увидеть поля ввода логина и пароля",
              logOptions: { logChildren: false },
              name: 'clickSelector',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              runTest: [
                {
                  allowOptions: [
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'waitingTime',
                    'noThrow',
                  ],
                  bindDescription: "`Wait for: '${selector}'`",
                  description: 'Wait selector',
                  name: 'waitForSelector',
                  needSelectors: ['selector'],
                  type: 'atom',
                },
                { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                {
                  allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
                  bindData: { selectorNumber: 'selectorNumber' },
                  description: 'Click',
                  name: 'clickSelectorRaw',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
              ],
            },
            {
              allowOptions: [
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'noClearInput',
                'waitingTime',
              ],
              bindData: { text: 'authData.loginElectron' },
              bindDescription: "'Вводим логин: ' + authData.loginElectron",
              bindSelectors: { selector: 'auth.inputLogin' },
              logOptions: { logChildren: false },
              name: 'typeInput',
              needData: ['text'],
              needSelectors: ['selector'],
              runTest: [
                {
                  allowOptions: [
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'waitingTime',
                    'noThrow',
                  ],
                  bindDescription: "`Wait for: '${selector}'`",
                  description: 'Wait selector',
                  name: 'waitForSelector',
                  needSelectors: ['selector'],
                  type: 'atom',
                },
                {
                  allowOptions: ['noClearInput'],
                  bindData: { text: 'text' },
                  bindDescription: "`Type text: '${text}' in input: '${selector}'`",
                  description: 'Type in selector',
                  name: 'typeInputRaw',
                  needData: ['text'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
              ],
            },
            {
              allowOptions: [
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'noClearInput',
                'waitingTime',
              ],
              bindData: { text: 'authData.passwordElectron' },
              bindDescription: "'Вводим пароль: ' + authData.passwordElectron",
              bindSelectors: { selector: 'auth.inputPassword' },
              logOptions: { logChildren: false },
              name: 'typeInput',
              needData: ['text'],
              needSelectors: ['selector'],
              runTest: [
                {
                  allowOptions: [
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'waitingTime',
                    'noThrow',
                  ],
                  bindDescription: "`Wait for: '${selector}'`",
                  description: 'Wait selector',
                  name: 'waitForSelector',
                  needSelectors: ['selector'],
                  type: 'atom',
                },
                {
                  allowOptions: ['noClearInput'],
                  bindData: { text: 'text' },
                  bindDescription: "`Type text: '${text}' in input: '${selector}'`",
                  description: 'Type in selector',
                  name: 'typeInputRaw',
                  needData: ['text'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
              ],
            },
            {
              allowOptions: [
                'count',
                'timeDelayBeforeClick',
                'button',
                'logAfter',
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'timeDelayAfterClick',
                'waitingTime',
              ],
              bindSelectors: { selector: 'auth.savePassCheckbox' },
              description: 'Ставим чекбокс "Сохранить пароль"',
              if: 'needSavePass !== null',
              logOptions: { logChildren: false },
              name: 'clickSelector',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              runTest: [
                {
                  allowOptions: [
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'waitingTime',
                    'noThrow',
                  ],
                  bindDescription: "`Wait for: '${selector}'`",
                  description: 'Wait selector',
                  name: 'waitForSelector',
                  needSelectors: ['selector'],
                  type: 'atom',
                },
                { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                {
                  allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
                  bindData: { selectorNumber: 'selectorNumber' },
                  description: 'Click',
                  name: 'clickSelectorRaw',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
              ],
            },
            {
              allowOptions: [
                'count',
                'timeDelayBeforeClick',
                'button',
                'logAfter',
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'timeDelayAfterClick',
                'waitingTime',
              ],
              bindSelectors: { selector: 'auth.inputSubmit' },
              description: 'Нажимаем кнопку логина',
              logOptions: { logChildren: false },
              name: 'clickSelector',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              runTest: [
                {
                  allowOptions: [
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'waitingTime',
                    'noThrow',
                  ],
                  bindDescription: "`Wait for: '${selector}'`",
                  description: 'Wait selector',
                  name: 'waitForSelector',
                  needSelectors: ['selector'],
                  type: 'atom',
                },
                { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                {
                  allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
                  bindData: { selectorNumber: 'selectorNumber' },
                  description: 'Click',
                  name: 'clickSelectorRaw',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
              ],
            },
          ],
        },
        {
          allowOptions: [
            'count',
            'timeDelayBeforeClick',
            'button',
            'logAfter',
            'hidden',
            'visible',
            'timeDelayBeforeWait',
            'timeDelayAfterWait',
            'timeDelayAfterClick',
            'waitingTime',
          ],
          bindSelectors: { selector: 'session.openSettingsButton' },
          description: 'Нажимаем кнопку открытия окна настроек',
          logOptions: { logChildren: false },
          name: 'clickSelector',
          needData: ['selectorNumber?'],
          needSelectors: ['selector'],
          runTest: [
            {
              allowOptions: [
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'waitingTime',
                'noThrow',
              ],
              bindDescription: "`Wait for: '${selector}'`",
              description: 'Wait selector',
              name: 'waitForSelector',
              needSelectors: ['selector'],
              type: 'atom',
            },
            { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
            {
              allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
              bindData: { selectorNumber: 'selectorNumber' },
              description: 'Click',
              name: 'clickSelectorRaw',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              type: 'atom',
            },
          ],
        },
        {
          allowOptions: [
            'count',
            'timeDelayBeforeClick',
            'button',
            'logAfter',
            'hidden',
            'visible',
            'timeDelayBeforeWait',
            'timeDelayAfterWait',
            'timeDelayAfterClick',
            'waitingTime',
          ],
          bindSelectors: { selector: 'settingsWindow.settingsModalClose' },
          description: 'Закрываем окно настроек',
          logOptions: { logChildren: false },
          name: 'clickSelector',
          needData: ['selectorNumber?'],
          needSelectors: ['selector'],
          runTest: [
            {
              allowOptions: [
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'waitingTime',
                'noThrow',
              ],
              bindDescription: "`Wait for: '${selector}'`",
              description: 'Wait selector',
              name: 'waitForSelector',
              needSelectors: ['selector'],
              type: 'atom',
            },
            { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
            {
              allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
              bindData: { selectorNumber: 'selectorNumber' },
              description: 'Click',
              name: 'clickSelectorRaw',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              type: 'atom',
            },
          ],
        },
        {
          allowOptions: [
            'count',
            'timeDelayBeforeClick',
            'button',
            'logAfter',
            'hidden',
            'visible',
            'timeDelayBeforeWait',
            'timeDelayAfterWait',
            'timeDelayAfterClick',
            'waitingTime',
          ],
          bindSelectors: { selector: 'session.cancelButton' },
          description: 'Нажимаем отмену',
          logOptions: { logChildren: false },
          name: 'clickSelector',
          needData: ['selectorNumber?'],
          needSelectors: ['selector'],
          runTest: [
            {
              allowOptions: [
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'waitingTime',
                'noThrow',
              ],
              bindDescription: "`Wait for: '${selector}'`",
              description: 'Wait selector',
              name: 'waitForSelector',
              needSelectors: ['selector'],
              type: 'atom',
            },
            { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
            {
              allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
              bindData: { selectorNumber: 'selectorNumber' },
              description: 'Click',
              name: 'clickSelectorRaw',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              type: 'atom',
            },
          ],
        },
      ],
      tags: ['авторизация'],
      type: 'atom',
    },
    {
      description: 'Под админом. Авторизация + открытие/закрытие смены',
      logOptions: { textColor: 'black', backgroundColor: 'white' },
      name: 'case',
      runTest: [
        {
          bindDescription:
            "'Авторизуемся админом. Логин: ' + authData.loginElectron + ' Пароль: ' + authData.passwordElectron",
          description: 'Авторизация с вводом логина',
          logOptions: { logChildren: false },
          name: 'авторизацияСоВводомЛогина',
          needData: ['needSavePass?'],
          runTest: [
            {
              allowOptions: [
                'count',
                'timeDelayBeforeClick',
                'button',
                'logAfter',
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'timeDelayAfterClick',
                'waitingTime',
              ],
              bindSelectors: { selector: 'auth.selectPasswordEnter' },
              description: 'Открываем вкладку "По паролю"',
              logOptions: { logChildren: false },
              name: 'clickSelector',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              runTest: [
                {
                  allowOptions: [
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'waitingTime',
                    'noThrow',
                  ],
                  bindDescription: "`Wait for: '${selector}'`",
                  description: 'Wait selector',
                  name: 'waitForSelector',
                  needSelectors: ['selector'],
                  type: 'atom',
                },
                { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                {
                  allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
                  bindData: { selectorNumber: 'selectorNumber' },
                  description: 'Click',
                  name: 'clickSelectorRaw',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
              ],
            },
            {
              allowOptions: [
                'count',
                'timeDelayBeforeClick',
                'button',
                'logAfter',
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'timeDelayAfterClick',
                'waitingTime',
              ],
              bindSelectors: { selector: 'auth.showLoginInput' },
              description: "Нажимем на ссылку 'Кассир', чтобы увидеть поля ввода логина и пароля",
              logOptions: { logChildren: false },
              name: 'clickSelector',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              runTest: [
                {
                  allowOptions: [
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'waitingTime',
                    'noThrow',
                  ],
                  bindDescription: "`Wait for: '${selector}'`",
                  description: 'Wait selector',
                  name: 'waitForSelector',
                  needSelectors: ['selector'],
                  type: 'atom',
                },
                { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                {
                  allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
                  bindData: { selectorNumber: 'selectorNumber' },
                  description: 'Click',
                  name: 'clickSelectorRaw',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
              ],
            },
            {
              allowOptions: [
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'noClearInput',
                'waitingTime',
              ],
              bindData: { text: 'authData.loginElectron' },
              bindDescription: "'Вводим логин: ' + authData.loginElectron",
              bindSelectors: { selector: 'auth.inputLogin' },
              logOptions: { logChildren: false },
              name: 'typeInput',
              needData: ['text'],
              needSelectors: ['selector'],
              runTest: [
                {
                  allowOptions: [
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'waitingTime',
                    'noThrow',
                  ],
                  bindDescription: "`Wait for: '${selector}'`",
                  description: 'Wait selector',
                  name: 'waitForSelector',
                  needSelectors: ['selector'],
                  type: 'atom',
                },
                {
                  allowOptions: ['noClearInput'],
                  bindData: { text: 'text' },
                  bindDescription: "`Type text: '${text}' in input: '${selector}'`",
                  description: 'Type in selector',
                  name: 'typeInputRaw',
                  needData: ['text'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
              ],
            },
            {
              allowOptions: [
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'noClearInput',
                'waitingTime',
              ],
              bindData: { text: 'authData.passwordElectron' },
              bindDescription: "'Вводим пароль: ' + authData.passwordElectron",
              bindSelectors: { selector: 'auth.inputPassword' },
              logOptions: { logChildren: false },
              name: 'typeInput',
              needData: ['text'],
              needSelectors: ['selector'],
              runTest: [
                {
                  allowOptions: [
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'waitingTime',
                    'noThrow',
                  ],
                  bindDescription: "`Wait for: '${selector}'`",
                  description: 'Wait selector',
                  name: 'waitForSelector',
                  needSelectors: ['selector'],
                  type: 'atom',
                },
                {
                  allowOptions: ['noClearInput'],
                  bindData: { text: 'text' },
                  bindDescription: "`Type text: '${text}' in input: '${selector}'`",
                  description: 'Type in selector',
                  name: 'typeInputRaw',
                  needData: ['text'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
              ],
            },
            {
              allowOptions: [
                'count',
                'timeDelayBeforeClick',
                'button',
                'logAfter',
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'timeDelayAfterClick',
                'waitingTime',
              ],
              bindSelectors: { selector: 'auth.savePassCheckbox' },
              description: 'Ставим чекбокс "Сохранить пароль"',
              if: 'needSavePass !== null',
              logOptions: { logChildren: false },
              name: 'clickSelector',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              runTest: [
                {
                  allowOptions: [
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'waitingTime',
                    'noThrow',
                  ],
                  bindDescription: "`Wait for: '${selector}'`",
                  description: 'Wait selector',
                  name: 'waitForSelector',
                  needSelectors: ['selector'],
                  type: 'atom',
                },
                { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                {
                  allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
                  bindData: { selectorNumber: 'selectorNumber' },
                  description: 'Click',
                  name: 'clickSelectorRaw',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
              ],
            },
            {
              allowOptions: [
                'count',
                'timeDelayBeforeClick',
                'button',
                'logAfter',
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'timeDelayAfterClick',
                'waitingTime',
              ],
              bindSelectors: { selector: 'auth.inputSubmit' },
              description: 'Нажимаем кнопку логина',
              logOptions: { logChildren: false },
              name: 'clickSelector',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              runTest: [
                {
                  allowOptions: [
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'waitingTime',
                    'noThrow',
                  ],
                  bindDescription: "`Wait for: '${selector}'`",
                  description: 'Wait selector',
                  name: 'waitForSelector',
                  needSelectors: ['selector'],
                  type: 'atom',
                },
                { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                {
                  allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
                  bindData: { selectorNumber: 'selectorNumber' },
                  description: 'Click',
                  name: 'clickSelectorRaw',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
              ],
            },
          ],
        },
        {
          description: 'Открываем смену',
          logOptions: { logChildren: false },
          name: 'открытиеСмены',
          runTest: [
            {
              allowOptions: [
                'count',
                'timeDelayBeforeClick',
                'button',
                'logAfter',
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'timeDelayAfterClick',
                'waitingTime',
              ],
              bindSelectors: { selector: 'session.openButton' },
              description: 'Нажимаем "Открыть смену"',
              logOptions: { logChildren: false },
              name: 'clickSelector',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              runTest: [
                {
                  allowOptions: [
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'waitingTime',
                    'noThrow',
                  ],
                  bindDescription: "`Wait for: '${selector}'`",
                  description: 'Wait selector',
                  name: 'waitForSelector',
                  needSelectors: ['selector'],
                  type: 'atom',
                },
                { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                {
                  allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
                  bindData: { selectorNumber: 'selectorNumber' },
                  description: 'Click',
                  name: 'clickSelectorRaw',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
              ],
            },
            {
              allowOptions: [
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'waitingTime',
                'noThrow',
              ],
              bindDescription: "`Wait for: '${selector}'`",
              bindSelectors: { selector: 'mainView.menuButton' },
              description: 'Ждем закрытия окна и появления кнопки открытия бокового меню',
              name: 'waitForSelector',
              needSelectors: ['selector'],
              type: 'atom',
            },
          ],
        },
        {
          description: 'Закрываем смену',
          logOptions: { logChildren: false },
          name: 'закрытиеСмены',
          runTest: [
            {
              allowOptions: [
                'count',
                'timeDelayBeforeClick',
                'button',
                'logAfter',
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'timeDelayAfterClick',
                'waitingTime',
              ],
              bindSelectors: { selector: 'mainView.menuButton' },
              description: 'Открываем основное меню по кнопке',
              logOptions: { logChildren: false },
              name: 'clickSelector',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              options: { timeDelayAfterWait: 20 },
              runTest: [
                {
                  allowOptions: [
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'waitingTime',
                    'noThrow',
                  ],
                  bindDescription: "`Wait for: '${selector}'`",
                  description: 'Wait selector',
                  name: 'waitForSelector',
                  needSelectors: ['selector'],
                  type: 'atom',
                },
                { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                {
                  allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
                  bindData: { selectorNumber: 'selectorNumber' },
                  description: 'Click',
                  name: 'clickSelectorRaw',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
              ],
            },
            {
              allowOptions: [
                'count',
                'timeDelayBeforeClick',
                'button',
                'logAfter',
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'timeDelayAfterClick',
                'waitingTime',
              ],
              bindSelectors: { selector: 'mainMenu.buttonExit' },
              description: 'Ждем появления меню и нажимаем кнопку "Выход"',
              logOptions: { logChildren: false },
              name: 'clickSelector',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              options: { timeDelayAfterWait: 20 },
              runTest: [
                {
                  allowOptions: [
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'waitingTime',
                    'noThrow',
                  ],
                  bindDescription: "`Wait for: '${selector}'`",
                  description: 'Wait selector',
                  name: 'waitForSelector',
                  needSelectors: ['selector'],
                  type: 'atom',
                },
                { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                {
                  allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
                  bindData: { selectorNumber: 'selectorNumber' },
                  description: 'Click',
                  name: 'clickSelectorRaw',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
              ],
            },
            {
              allowOptions: [
                'count',
                'timeDelayBeforeClick',
                'button',
                'logAfter',
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'timeDelayAfterClick',
                'waitingTime',
              ],
              bindSelectors: { selector: 'session.buttonCloseSession' },
              description: 'Нажимаем "Закрыть смену"',
              logOptions: { logChildren: false },
              name: 'clickSelector',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              runTest: [
                {
                  allowOptions: [
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'waitingTime',
                    'noThrow',
                  ],
                  bindDescription: "`Wait for: '${selector}'`",
                  description: 'Wait selector',
                  name: 'waitForSelector',
                  needSelectors: ['selector'],
                  type: 'atom',
                },
                { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                {
                  allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
                  bindData: { selectorNumber: 'selectorNumber' },
                  description: 'Click',
                  name: 'clickSelectorRaw',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
              ],
            },
            {
              allowOptions: ['waitingTime'],
              allowResults: ['exists'],
              description: 'Если есть активный чек то всплывает окно',
              logOptions: { logChildren: false },
              name: 'checkSelector',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              options: { waitingTime: 50 },
              runTest: [
                {
                  allowOptions: [
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'waitingTime',
                    'noThrow',
                  ],
                  bindDescription: "`Wait for: '${selector}'`",
                  bindSelectors: { selector: 'selector' },
                  name: 'waitForSelector',
                  needSelectors: ['selector'],
                  options: { noThrow: true, waitingTime: 1 },
                  type: 'atom',
                },
                { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                {
                  allowResults: ['exists'],
                  bindData: { selectorNumber: 'selectorNumber' },
                  bindSelectors: { selector: 'selector' },
                  name: 'checkSelectorRaw',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
              ],
              type: 'atom',
            },
            {
              description: 'Появилось окно активного чека',
              if: 'естьАктивныйЧек',
              name: 'if',
              runTest: [
                {
                  allowOptions: [
                    'count',
                    'timeDelayBeforeClick',
                    'button',
                    'logAfter',
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'timeDelayAfterClick',
                    'waitingTime',
                  ],
                  description: 'Нажимаем "Удалить чек"',
                  logOptions: { logChildren: false },
                  name: 'clickSelector',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  runTest: [
                    {
                      allowOptions: [
                        'hidden',
                        'visible',
                        'timeDelayBeforeWait',
                        'timeDelayAfterWait',
                        'waitingTime',
                        'noThrow',
                      ],
                      bindDescription: "`Wait for: '${selector}'`",
                      description: 'Wait selector',
                      name: 'waitForSelector',
                      needSelectors: ['selector'],
                      type: 'atom',
                    },
                    { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                    {
                      allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
                      bindData: { selectorNumber: 'selectorNumber' },
                      description: 'Click',
                      name: 'clickSelectorRaw',
                      needData: ['selectorNumber?'],
                      needSelectors: ['selector'],
                      type: 'atom',
                    },
                  ],
                },
                {
                  allowOptions: [
                    'count',
                    'timeDelayBeforeClick',
                    'button',
                    'logAfter',
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'timeDelayAfterClick',
                    'waitingTime',
                  ],
                  bindSelectors: { selector: 'session.buttonCloseSession' },
                  description: 'Нажимаем "Закрыть смену" еще раз',
                  logOptions: { logChildren: false },
                  name: 'clickSelector',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  runTest: [
                    {
                      allowOptions: [
                        'hidden',
                        'visible',
                        'timeDelayBeforeWait',
                        'timeDelayAfterWait',
                        'waitingTime',
                        'noThrow',
                      ],
                      bindDescription: "`Wait for: '${selector}'`",
                      description: 'Wait selector',
                      name: 'waitForSelector',
                      needSelectors: ['selector'],
                      type: 'atom',
                    },
                    { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                    {
                      allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
                      bindData: { selectorNumber: 'selectorNumber' },
                      description: 'Click',
                      name: 'clickSelectorRaw',
                      needData: ['selectorNumber?'],
                      needSelectors: ['selector'],
                      type: 'atom',
                    },
                  ],
                },
              ],
              type: 'atom',
            },
            {
              allowOptions: [
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'waitingTime',
                'noThrow',
              ],
              bindDescription: "`Wait for: '${selector}'`",
              bindSelectors: { selector: 'auth.version' },
              description: 'Ожидаем окна авторизации. Ждем плашку с версией.',
              name: 'waitForSelector',
              needSelectors: ['selector'],
              type: 'atom',
            },
          ],
        },
      ],
      tags: ['авторизация'],
      type: 'atom',
    },
    {
      description: 'Под кассиром. Авторизация + открытие/закрытие смены',
      logOptions: { textColor: 'black', backgroundColor: 'white' },
      name: 'case',
      runTest: [
        {
          bindData: { password: 'authData.cashierPassword' },
          bindDescription: "`Авторизация кассиром с паролем: '${password}'`",
          logOptions: { logChildren: false },
          name: 'авторизацияКассиром',
          needData: ['password'],
          runTest: [
            {
              allowOptions: [
                'count',
                'timeDelayBeforeClick',
                'button',
                'logAfter',
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'timeDelayAfterClick',
                'waitingTime',
              ],
              bindSelectors: { selector: 'auth.selectPasswordEnter' },
              description: 'Открываем вкладку "По паролю"',
              logOptions: { logChildren: false },
              name: 'clickSelector',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              runTest: [
                {
                  allowOptions: [
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'waitingTime',
                    'noThrow',
                  ],
                  bindDescription: "`Wait for: '${selector}'`",
                  description: 'Wait selector',
                  name: 'waitForSelector',
                  needSelectors: ['selector'],
                  type: 'atom',
                },
                { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                {
                  allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
                  bindData: { selectorNumber: 'selectorNumber' },
                  description: 'Click',
                  name: 'clickSelectorRaw',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
              ],
            },
            {
              allowOptions: [
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'noClearInput',
                'waitingTime',
              ],
              bindData: { text: 'password' },
              bindDescription: "`Wait selector: '${selector}' and type text: '${text}' in input`",
              bindSelectors: { selector: 'auth.inputPassword' },
              description: 'Вводим пароль кассира в поле вода пароля',
              logOptions: { logChildren: false },
              name: 'typeInput',
              needData: ['text'],
              needSelectors: ['selector'],
              runTest: [
                {
                  allowOptions: [
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'waitingTime',
                    'noThrow',
                  ],
                  bindDescription: "`Wait for: '${selector}'`",
                  description: 'Wait selector',
                  name: 'waitForSelector',
                  needSelectors: ['selector'],
                  type: 'atom',
                },
                {
                  allowOptions: ['noClearInput'],
                  bindData: { text: 'text' },
                  bindDescription: "`Type text: '${text}' in input: '${selector}'`",
                  description: 'Type in selector',
                  name: 'typeInputRaw',
                  needData: ['text'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
              ],
            },
            {
              allowOptions: [
                'count',
                'timeDelayBeforeClick',
                'button',
                'logAfter',
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'timeDelayAfterClick',
                'waitingTime',
              ],
              bindSelectors: { selector: 'auth.inputSubmit' },
              description: 'Нажимаем кнопку "Вход"',
              logOptions: { logChildren: false },
              name: 'clickSelector',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              runTest: [
                {
                  allowOptions: [
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'waitingTime',
                    'noThrow',
                  ],
                  bindDescription: "`Wait for: '${selector}'`",
                  description: 'Wait selector',
                  name: 'waitForSelector',
                  needSelectors: ['selector'],
                  type: 'atom',
                },
                { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                {
                  allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
                  bindData: { selectorNumber: 'selectorNumber' },
                  description: 'Click',
                  name: 'clickSelectorRaw',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
              ],
            },
          ],
        },
        {
          description: 'Открываем смену',
          logOptions: { logChildren: false },
          name: 'открытиеСмены',
          runTest: [
            {
              allowOptions: [
                'count',
                'timeDelayBeforeClick',
                'button',
                'logAfter',
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'timeDelayAfterClick',
                'waitingTime',
              ],
              bindSelectors: { selector: 'session.openButton' },
              description: 'Нажимаем "Открыть смену"',
              logOptions: { logChildren: false },
              name: 'clickSelector',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              runTest: [
                {
                  allowOptions: [
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'waitingTime',
                    'noThrow',
                  ],
                  bindDescription: "`Wait for: '${selector}'`",
                  description: 'Wait selector',
                  name: 'waitForSelector',
                  needSelectors: ['selector'],
                  type: 'atom',
                },
                { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                {
                  allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
                  bindData: { selectorNumber: 'selectorNumber' },
                  description: 'Click',
                  name: 'clickSelectorRaw',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
              ],
            },
            {
              allowOptions: [
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'waitingTime',
                'noThrow',
              ],
              bindDescription: "`Wait for: '${selector}'`",
              bindSelectors: { selector: 'mainView.menuButton' },
              description: 'Ждем закрытия окна и появления кнопки открытия бокового меню',
              name: 'waitForSelector',
              needSelectors: ['selector'],
              type: 'atom',
            },
          ],
        },
        {
          description: 'Закрываем смену',
          logOptions: { logChildren: false },
          name: 'закрытиеСмены',
          runTest: [
            {
              allowOptions: [
                'count',
                'timeDelayBeforeClick',
                'button',
                'logAfter',
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'timeDelayAfterClick',
                'waitingTime',
              ],
              bindSelectors: { selector: 'mainView.menuButton' },
              description: 'Открываем основное меню по кнопке',
              logOptions: { logChildren: false },
              name: 'clickSelector',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              options: { timeDelayAfterWait: 20 },
              runTest: [
                {
                  allowOptions: [
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'waitingTime',
                    'noThrow',
                  ],
                  bindDescription: "`Wait for: '${selector}'`",
                  description: 'Wait selector',
                  name: 'waitForSelector',
                  needSelectors: ['selector'],
                  type: 'atom',
                },
                { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                {
                  allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
                  bindData: { selectorNumber: 'selectorNumber' },
                  description: 'Click',
                  name: 'clickSelectorRaw',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
              ],
            },
            {
              allowOptions: [
                'count',
                'timeDelayBeforeClick',
                'button',
                'logAfter',
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'timeDelayAfterClick',
                'waitingTime',
              ],
              bindSelectors: { selector: 'mainMenu.buttonExit' },
              description: 'Ждем появления меню и нажимаем кнопку "Выход"',
              logOptions: { logChildren: false },
              name: 'clickSelector',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              options: { timeDelayAfterWait: 20 },
              runTest: [
                {
                  allowOptions: [
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'waitingTime',
                    'noThrow',
                  ],
                  bindDescription: "`Wait for: '${selector}'`",
                  description: 'Wait selector',
                  name: 'waitForSelector',
                  needSelectors: ['selector'],
                  type: 'atom',
                },
                { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                {
                  allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
                  bindData: { selectorNumber: 'selectorNumber' },
                  description: 'Click',
                  name: 'clickSelectorRaw',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
              ],
            },
            {
              allowOptions: [
                'count',
                'timeDelayBeforeClick',
                'button',
                'logAfter',
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'timeDelayAfterClick',
                'waitingTime',
              ],
              bindSelectors: { selector: 'session.buttonCloseSession' },
              description: 'Нажимаем "Закрыть смену"',
              logOptions: { logChildren: false },
              name: 'clickSelector',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              runTest: [
                {
                  allowOptions: [
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'waitingTime',
                    'noThrow',
                  ],
                  bindDescription: "`Wait for: '${selector}'`",
                  description: 'Wait selector',
                  name: 'waitForSelector',
                  needSelectors: ['selector'],
                  type: 'atom',
                },
                { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                {
                  allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
                  bindData: { selectorNumber: 'selectorNumber' },
                  description: 'Click',
                  name: 'clickSelectorRaw',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
              ],
            },
            {
              allowOptions: ['waitingTime'],
              allowResults: ['exists'],
              description: 'Если есть активный чек то всплывает окно',
              logOptions: { logChildren: false },
              name: 'checkSelector',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              options: { waitingTime: 50 },
              runTest: [
                {
                  allowOptions: [
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'waitingTime',
                    'noThrow',
                  ],
                  bindDescription: "`Wait for: '${selector}'`",
                  bindSelectors: { selector: 'selector' },
                  name: 'waitForSelector',
                  needSelectors: ['selector'],
                  options: { noThrow: true, waitingTime: 1 },
                  type: 'atom',
                },
                { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                {
                  allowResults: ['exists'],
                  bindData: { selectorNumber: 'selectorNumber' },
                  bindSelectors: { selector: 'selector' },
                  name: 'checkSelectorRaw',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
              ],
              type: 'atom',
            },
            {
              description: 'Появилось окно активного чека',
              if: 'естьАктивныйЧек',
              name: 'if',
              runTest: [
                {
                  allowOptions: [
                    'count',
                    'timeDelayBeforeClick',
                    'button',
                    'logAfter',
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'timeDelayAfterClick',
                    'waitingTime',
                  ],
                  description: 'Нажимаем "Удалить чек"',
                  logOptions: { logChildren: false },
                  name: 'clickSelector',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  runTest: [
                    {
                      allowOptions: [
                        'hidden',
                        'visible',
                        'timeDelayBeforeWait',
                        'timeDelayAfterWait',
                        'waitingTime',
                        'noThrow',
                      ],
                      bindDescription: "`Wait for: '${selector}'`",
                      description: 'Wait selector',
                      name: 'waitForSelector',
                      needSelectors: ['selector'],
                      type: 'atom',
                    },
                    { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                    {
                      allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
                      bindData: { selectorNumber: 'selectorNumber' },
                      description: 'Click',
                      name: 'clickSelectorRaw',
                      needData: ['selectorNumber?'],
                      needSelectors: ['selector'],
                      type: 'atom',
                    },
                  ],
                },
                {
                  allowOptions: [
                    'count',
                    'timeDelayBeforeClick',
                    'button',
                    'logAfter',
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'timeDelayAfterClick',
                    'waitingTime',
                  ],
                  bindSelectors: { selector: 'session.buttonCloseSession' },
                  description: 'Нажимаем "Закрыть смену" еще раз',
                  logOptions: { logChildren: false },
                  name: 'clickSelector',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  runTest: [
                    {
                      allowOptions: [
                        'hidden',
                        'visible',
                        'timeDelayBeforeWait',
                        'timeDelayAfterWait',
                        'waitingTime',
                        'noThrow',
                      ],
                      bindDescription: "`Wait for: '${selector}'`",
                      description: 'Wait selector',
                      name: 'waitForSelector',
                      needSelectors: ['selector'],
                      type: 'atom',
                    },
                    { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                    {
                      allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
                      bindData: { selectorNumber: 'selectorNumber' },
                      description: 'Click',
                      name: 'clickSelectorRaw',
                      needData: ['selectorNumber?'],
                      needSelectors: ['selector'],
                      type: 'atom',
                    },
                  ],
                },
              ],
              type: 'atom',
            },
            {
              allowOptions: [
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'waitingTime',
                'noThrow',
              ],
              bindDescription: "`Wait for: '${selector}'`",
              bindSelectors: { selector: 'auth.version' },
              description: 'Ожидаем окна авторизации. Ждем плашку с версией.',
              name: 'waitForSelector',
              needSelectors: ['selector'],
              type: 'atom',
            },
          ],
        },
      ],
      tags: ['авторизация'],
      type: 'atom',
    },
    {
      description: 'Сохранение пароля',
      logOptions: { textColor: 'black', backgroundColor: 'white' },
      name: 'case',
      runTest: [
        {
          bindDescription:
            "'Авторизуемся админом. Логин: ' + authData.loginElectron + ' Пароль: ' + authData.passwordElectron",
          logOptions: { logChildren: false },
          name: 'авторизацияСоВводомЛогина',
          needData: ['needSavePass?'],
          runTest: [
            {
              allowOptions: [
                'count',
                'timeDelayBeforeClick',
                'button',
                'logAfter',
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'timeDelayAfterClick',
                'waitingTime',
              ],
              bindSelectors: { selector: 'auth.selectPasswordEnter' },
              description: 'Открываем вкладку "По паролю"',
              logOptions: { logChildren: false },
              name: 'clickSelector',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              runTest: [
                {
                  allowOptions: [
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'waitingTime',
                    'noThrow',
                  ],
                  bindDescription: "`Wait for: '${selector}'`",
                  description: 'Wait selector',
                  name: 'waitForSelector',
                  needSelectors: ['selector'],
                  type: 'atom',
                },
                { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                {
                  allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
                  bindData: { selectorNumber: 'selectorNumber' },
                  description: 'Click',
                  name: 'clickSelectorRaw',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
              ],
            },
            {
              allowOptions: [
                'count',
                'timeDelayBeforeClick',
                'button',
                'logAfter',
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'timeDelayAfterClick',
                'waitingTime',
              ],
              bindSelectors: { selector: 'auth.showLoginInput' },
              description: "Нажимем на ссылку 'Кассир', чтобы увидеть поля ввода логина и пароля",
              logOptions: { logChildren: false },
              name: 'clickSelector',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              runTest: [
                {
                  allowOptions: [
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'waitingTime',
                    'noThrow',
                  ],
                  bindDescription: "`Wait for: '${selector}'`",
                  description: 'Wait selector',
                  name: 'waitForSelector',
                  needSelectors: ['selector'],
                  type: 'atom',
                },
                { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                {
                  allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
                  bindData: { selectorNumber: 'selectorNumber' },
                  description: 'Click',
                  name: 'clickSelectorRaw',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
              ],
            },
            {
              allowOptions: [
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'noClearInput',
                'waitingTime',
              ],
              bindData: { text: 'authData.loginElectron' },
              bindDescription: "'Вводим логин: ' + authData.loginElectron",
              bindSelectors: { selector: 'auth.inputLogin' },
              logOptions: { logChildren: false },
              name: 'typeInput',
              needData: ['text'],
              needSelectors: ['selector'],
              runTest: [
                {
                  allowOptions: [
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'waitingTime',
                    'noThrow',
                  ],
                  bindDescription: "`Wait for: '${selector}'`",
                  description: 'Wait selector',
                  name: 'waitForSelector',
                  needSelectors: ['selector'],
                  type: 'atom',
                },
                {
                  allowOptions: ['noClearInput'],
                  bindData: { text: 'text' },
                  bindDescription: "`Type text: '${text}' in input: '${selector}'`",
                  description: 'Type in selector',
                  name: 'typeInputRaw',
                  needData: ['text'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
              ],
            },
            {
              allowOptions: [
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'noClearInput',
                'waitingTime',
              ],
              bindData: { text: 'authData.passwordElectron' },
              bindDescription: "'Вводим пароль: ' + authData.passwordElectron",
              bindSelectors: { selector: 'auth.inputPassword' },
              logOptions: { logChildren: false },
              name: 'typeInput',
              needData: ['text'],
              needSelectors: ['selector'],
              runTest: [
                {
                  allowOptions: [
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'waitingTime',
                    'noThrow',
                  ],
                  bindDescription: "`Wait for: '${selector}'`",
                  description: 'Wait selector',
                  name: 'waitForSelector',
                  needSelectors: ['selector'],
                  type: 'atom',
                },
                {
                  allowOptions: ['noClearInput'],
                  bindData: { text: 'text' },
                  bindDescription: "`Type text: '${text}' in input: '${selector}'`",
                  description: 'Type in selector',
                  name: 'typeInputRaw',
                  needData: ['text'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
              ],
            },
            {
              allowOptions: [
                'count',
                'timeDelayBeforeClick',
                'button',
                'logAfter',
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'timeDelayAfterClick',
                'waitingTime',
              ],
              bindSelectors: { selector: 'auth.savePassCheckbox' },
              description: 'Ставим чекбокс "Сохранить пароль"',
              if: 'needSavePass !== null',
              logOptions: { logChildren: false },
              name: 'clickSelector',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              runTest: [
                {
                  allowOptions: [
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'waitingTime',
                    'noThrow',
                  ],
                  bindDescription: "`Wait for: '${selector}'`",
                  description: 'Wait selector',
                  name: 'waitForSelector',
                  needSelectors: ['selector'],
                  type: 'atom',
                },
                { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                {
                  allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
                  bindData: { selectorNumber: 'selectorNumber' },
                  description: 'Click',
                  name: 'clickSelectorRaw',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
              ],
            },
            {
              allowOptions: [
                'count',
                'timeDelayBeforeClick',
                'button',
                'logAfter',
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'timeDelayAfterClick',
                'waitingTime',
              ],
              bindSelectors: { selector: 'auth.inputSubmit' },
              description: 'Нажимаем кнопку логина',
              logOptions: { logChildren: false },
              name: 'clickSelector',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              runTest: [
                {
                  allowOptions: [
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'waitingTime',
                    'noThrow',
                  ],
                  bindDescription: "`Wait for: '${selector}'`",
                  description: 'Wait selector',
                  name: 'waitForSelector',
                  needSelectors: ['selector'],
                  type: 'atom',
                },
                { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                {
                  allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
                  bindData: { selectorNumber: 'selectorNumber' },
                  description: 'Click',
                  name: 'clickSelectorRaw',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
              ],
            },
          ],
        },
        {
          description: 'Открываем смену',
          logOptions: { logChildren: false },
          name: 'открытиеСмены',
          runTest: [
            {
              allowOptions: [
                'count',
                'timeDelayBeforeClick',
                'button',
                'logAfter',
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'timeDelayAfterClick',
                'waitingTime',
              ],
              bindSelectors: { selector: 'session.openButton' },
              description: 'Нажимаем "Открыть смену"',
              logOptions: { logChildren: false },
              name: 'clickSelector',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              runTest: [
                {
                  allowOptions: [
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'waitingTime',
                    'noThrow',
                  ],
                  bindDescription: "`Wait for: '${selector}'`",
                  description: 'Wait selector',
                  name: 'waitForSelector',
                  needSelectors: ['selector'],
                  type: 'atom',
                },
                { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                {
                  allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
                  bindData: { selectorNumber: 'selectorNumber' },
                  description: 'Click',
                  name: 'clickSelectorRaw',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
              ],
            },
            {
              allowOptions: [
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'waitingTime',
                'noThrow',
              ],
              bindDescription: "`Wait for: '${selector}'`",
              bindSelectors: { selector: 'mainView.menuButton' },
              description: 'Ждем закрытия окна и появления кнопки открытия бокового меню',
              name: 'waitForSelector',
              needSelectors: ['selector'],
              type: 'atom',
            },
          ],
        },
        {
          bindDescription: '`✅ настройку: ${setting ? setting : JSON.stringify(settingsArray || [])}`',
          data: { setting: ['Разрешить сохранять пароли (небезопасно)'] },
          description: 'Включим настройку сохранить пароль',
          logOptions: { logChildren: false },
          name: 'включитьНастройку',
          needData: ['setting?', 'settingsArray?', 'alreadyOpenSettings?', 'tabName?'],
          runTest: [
            {
              bindData: { tabName: 'tabName' },
              description: 'Откроем окно настроек вкладку "Общие"',
              if: 'alreadyOpenSettings === null',
              logOptions: { logChildren: false },
              name: 'открытьНастройки',
              needData: ['tabName?'],
              runTest: [
                { name: 'blank', type: 'atom' },
                {
                  description: 'Открываем боковое меню',
                  logOptions: { logChildren: false },
                  name: 'боковоеМенюОткрыть',
                  runTest: [
                    {
                      description: 'Удостовериться, что мы залогинены и доступно боковое меню',
                      name: 'боковоеМенюДоступно',
                      runTest: [
                        {
                          description:
                            'Нужна проверка, что селектор не скрыт под другими селекторами, например, модалкой',
                          logOptions: { textColor: 'white', backgroundColor: 'red' },
                          name: 'todo',
                          type: 'atom',
                        },
                        {
                          allowOptions: ['waitingTime'],
                          allowResults: ['exists'],
                          bindSelectors: { selector: 'mainView.menuButton' },
                          description: 'Проверяем доступность селектора бокового меню',
                          logOptions: { logChildren: false },
                          name: 'checkSelector',
                          needData: ['selectorNumber?'],
                          needSelectors: ['selector'],
                          options: { waitingTime: 500 },
                          runTest: [
                            {
                              allowOptions: [
                                'hidden',
                                'visible',
                                'timeDelayBeforeWait',
                                'timeDelayAfterWait',
                                'waitingTime',
                                'noThrow',
                              ],
                              bindDescription: "`Wait for: '${selector}'`",
                              bindSelectors: { selector: 'selector' },
                              name: 'waitForSelector',
                              needSelectors: ['selector'],
                              options: { noThrow: true, waitingTime: 1 },
                              type: 'atom',
                            },
                            { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                            {
                              allowResults: ['exists'],
                              bindData: { selectorNumber: 'selectorNumber' },
                              bindSelectors: { selector: 'selector' },
                              name: 'checkSelectorRaw',
                              needData: ['selectorNumber?'],
                              needSelectors: ['selector'],
                              type: 'atom',
                            },
                          ],
                          type: 'atom',
                        },
                      ],
                    },
                    {
                      allowOptions: [
                        'count',
                        'timeDelayBeforeClick',
                        'button',
                        'logAfter',
                        'hidden',
                        'visible',
                        'timeDelayBeforeWait',
                        'timeDelayAfterWait',
                        'timeDelayAfterClick',
                        'waitingTime',
                      ],
                      bindSelectors: { selector: 'mainView.menuButton' },
                      description: 'Кликаем на бутерброд бокового меню и ждем пока оно откроется',
                      logOptions: { logChildren: false },
                      name: 'clickSelector',
                      needData: ['selectorNumber?'],
                      needSelectors: ['selector'],
                      options: { timeDelayAfterClick: 25 },
                      runTest: [
                        {
                          allowOptions: [
                            'hidden',
                            'visible',
                            'timeDelayBeforeWait',
                            'timeDelayAfterWait',
                            'waitingTime',
                            'noThrow',
                          ],
                          bindDescription: "`Wait for: '${selector}'`",
                          description: 'Wait selector',
                          name: 'waitForSelector',
                          needSelectors: ['selector'],
                          type: 'atom',
                        },
                        { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                        {
                          allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
                          bindData: { selectorNumber: 'selectorNumber' },
                          description: 'Click',
                          name: 'clickSelectorRaw',
                          needData: ['selectorNumber?'],
                          needSelectors: ['selector'],
                          type: 'atom',
                        },
                      ],
                    },
                  ],
                },
                {
                  allowOptions: [
                    'count',
                    'timeDelayBeforeClick',
                    'button',
                    'logAfter',
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'timeDelayAfterClick',
                    'waitingTime',
                  ],
                  bindSelectors: { selector: 'mainMenu.buttonSettings' },
                  description: 'Нажимаем "Настройки"',
                  logOptions: { logChildren: false },
                  name: 'clickSelector',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  runTest: [
                    {
                      allowOptions: [
                        'hidden',
                        'visible',
                        'timeDelayBeforeWait',
                        'timeDelayAfterWait',
                        'waitingTime',
                        'noThrow',
                      ],
                      bindDescription: "`Wait for: '${selector}'`",
                      description: 'Wait selector',
                      name: 'waitForSelector',
                      needSelectors: ['selector'],
                      type: 'atom',
                    },
                    { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                    {
                      allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
                      bindData: { selectorNumber: 'selectorNumber' },
                      description: 'Click',
                      name: 'clickSelectorRaw',
                      needData: ['selectorNumber?'],
                      needSelectors: ['selector'],
                      type: 'atom',
                    },
                  ],
                },
                {
                  allowOptions: [
                    'count',
                    'timeDelayBeforeClick',
                    'button',
                    'logAfter',
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'timeDelayAfterClick',
                    'waitingTime',
                  ],
                  bindDescription: '`Переходим на вкладку: ${tabName}`',
                  bindSelectors: { selector: 'settingsWindow.settingTab.replace("__text__", tabName)' },
                  logOptions: { logChildren: false },
                  name: 'clickSelector',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  runTest: [
                    {
                      allowOptions: [
                        'hidden',
                        'visible',
                        'timeDelayBeforeWait',
                        'timeDelayAfterWait',
                        'waitingTime',
                        'noThrow',
                      ],
                      bindDescription: "`Wait for: '${selector}'`",
                      description: 'Wait selector',
                      name: 'waitForSelector',
                      needSelectors: ['selector'],
                      type: 'atom',
                    },
                    { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                    {
                      allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
                      bindData: { selectorNumber: 'selectorNumber' },
                      description: 'Click',
                      name: 'clickSelectorRaw',
                      needData: ['selectorNumber?'],
                      needSelectors: ['selector'],
                      type: 'atom',
                    },
                  ],
                },
              ],
            },
            {
              description: 'Если нужно передать только одну настройку',
              if: 'setting !== null',
              name: 'blank',
              type: 'atom',
            },
            {
              allowResults: ['settingsArray'],
              description: 'Проверяем на наличие массива в настройками',
              if: 'settingsArray !== null',
              name: 'if',
              runTest: [
                { description: 'Выбираем одну настройку', name: 'blank', type: 'atom' },
                { description: 'Присваиваем переменные для селектора', name: 'blank', type: 'atom' },
                {
                  allowOptions: ['waitingTime'],
                  allowResults: ['exists'],
                  bindSelectors: { selector: 'localSetting' },
                  description: 'Смотрим есть ли такой пункт, если нет, то падаем.',
                  errorIfResult: '!exists',
                  logOptions: { logChildren: false },
                  name: 'checkSelector',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  options: { screenshot: true },
                  runTest: [
                    {
                      allowOptions: [
                        'hidden',
                        'visible',
                        'timeDelayBeforeWait',
                        'timeDelayAfterWait',
                        'waitingTime',
                        'noThrow',
                      ],
                      bindDescription: "`Wait for: '${selector}'`",
                      bindSelectors: { selector: 'selector' },
                      name: 'waitForSelector',
                      needSelectors: ['selector'],
                      options: { noThrow: true, waitingTime: 1 },
                      type: 'atom',
                    },
                    { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                    {
                      allowResults: ['exists'],
                      bindData: { selectorNumber: 'selectorNumber' },
                      bindSelectors: { selector: 'selector' },
                      name: 'checkSelectorRaw',
                      needData: ['selectorNumber?'],
                      needSelectors: ['selector'],
                      type: 'atom',
                    },
                  ],
                  type: 'atom',
                },
                {
                  allowResults: ['value'],
                  bindDescription: "`Get value: '${key}' from selector: '${selector}' in browser context`",
                  bindSelectors: { selector: 'localSettingInput' },
                  data: { key: 'checked' },
                  description: 'Проверяем активность пункта',
                  name: 'getElementObjectValue',
                  needData: ['key'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
                {
                  allowOptions: [
                    'count',
                    'timeDelayBeforeClick',
                    'button',
                    'logAfter',
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'timeDelayAfterClick',
                    'waitingTime',
                  ],
                  bindSelectors: { selector: 'localSetting' },
                  description: 'Нажимаем на нужную настройку если она выключена',
                  if: '!active',
                  logOptions: { logChildren: false },
                  name: 'clickSelector',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  options: { screenshot: true, logAfter: true },
                  runTest: [
                    {
                      allowOptions: [
                        'hidden',
                        'visible',
                        'timeDelayBeforeWait',
                        'timeDelayAfterWait',
                        'waitingTime',
                        'noThrow',
                      ],
                      bindDescription: "`Wait for: '${selector}'`",
                      description: 'Wait selector',
                      name: 'waitForSelector',
                      needSelectors: ['selector'],
                      type: 'atom',
                    },
                    { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                    {
                      allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
                      bindData: { selectorNumber: 'selectorNumber' },
                      description: 'Click',
                      name: 'clickSelectorRaw',
                      needData: ['selectorNumber?'],
                      needSelectors: ['selector'],
                      type: 'atom',
                    },
                  ],
                },
                {
                  allowResults: ['value'],
                  bindDescription: "`Get value: '${key}' from selector: '${selector}' in browser context`",
                  bindSelectors: { selector: 'localSettingInput' },
                  data: { key: 'checked' },
                  description: 'Проверяем активность пункта',
                  errorIfResult: '!active',
                  name: 'getElementObjectValue',
                  needData: ['key'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
                {
                  bindDescription: "`Wait time: '${time}'`",
                  data: { time: 250 },
                  description: 'Ожидаем',
                  name: 'waitTime',
                  needData: ['time'],
                  type: 'atom',
                },
              ],
              type: 'atom',
              while: 'settingsArray.length',
            },
            {
              description: 'Сохранение настроек',
              logOptions: { logChildren: false },
              name: 'сохранитьНастройки',
              runTest: [
                {
                  allowOptions: ['waitingTime'],
                  allowResults: ['exists'],
                  bindSelectors: { selector: 'settingsWindow.header' },
                  description: 'Проверяем, что открыто окно "Настройки", по заголовку',
                  errorIfResult: '!exists',
                  logOptions: { logChildren: false },
                  name: 'checkSelector',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  runTest: [
                    {
                      allowOptions: [
                        'hidden',
                        'visible',
                        'timeDelayBeforeWait',
                        'timeDelayAfterWait',
                        'waitingTime',
                        'noThrow',
                      ],
                      bindDescription: "`Wait for: '${selector}'`",
                      bindSelectors: { selector: 'selector' },
                      name: 'waitForSelector',
                      needSelectors: ['selector'],
                      options: { noThrow: true, waitingTime: 1 },
                      type: 'atom',
                    },
                    { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                    {
                      allowResults: ['exists'],
                      bindData: { selectorNumber: 'selectorNumber' },
                      bindSelectors: { selector: 'selector' },
                      name: 'checkSelectorRaw',
                      needData: ['selectorNumber?'],
                      needSelectors: ['selector'],
                      type: 'atom',
                    },
                  ],
                  type: 'atom',
                },
                {
                  allowOptions: [
                    'count',
                    'timeDelayBeforeClick',
                    'button',
                    'logAfter',
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'timeDelayAfterClick',
                    'waitingTime',
                  ],
                  bindSelectors: { selector: 'settingsWindow.buttonSaveSettings' },
                  description: 'Нажимаем кнопку сохранить',
                  logOptions: { logChildren: false },
                  name: 'clickSelector',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  runTest: [
                    {
                      allowOptions: [
                        'hidden',
                        'visible',
                        'timeDelayBeforeWait',
                        'timeDelayAfterWait',
                        'waitingTime',
                        'noThrow',
                      ],
                      bindDescription: "`Wait for: '${selector}'`",
                      description: 'Wait selector',
                      name: 'waitForSelector',
                      needSelectors: ['selector'],
                      type: 'atom',
                    },
                    { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                    {
                      allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
                      bindData: { selectorNumber: 'selectorNumber' },
                      description: 'Click',
                      name: 'clickSelectorRaw',
                      needData: ['selectorNumber?'],
                      needSelectors: ['selector'],
                      type: 'atom',
                    },
                  ],
                },
                {
                  allowResults: ['success'],
                  bindData: { toastMessage: 'всплывашки.настройкиСохранены' },
                  bindDescription: "`Проверка всплывающего сообщения: '${toastMessage}'`",
                  logOptions: { logChildren: false },
                  name: 'проверкаВсплывающегоСообщения',
                  needData: ['toastMessage', 'strictMode?'],
                  runTest: [
                    { description: 'Присваиваем переменную для селектора', name: 'blank', type: 'atom' },
                    {
                      allowOptions: ['waitingTime'],
                      allowResults: ['exists'],
                      bindDescription: "`Проверяем, что на экране вышло всплывающее сообщение: '${toastMessage}'`",
                      bindSelectors: { selector: 'selectorMessage' },
                      logOptions: { logChildren: false },
                      name: 'checkSelector',
                      needData: ['selectorNumber?'],
                      needSelectors: ['selector'],
                      options: { waitingTime: 500 },
                      runTest: [
                        {
                          allowOptions: [
                            'hidden',
                            'visible',
                            'timeDelayBeforeWait',
                            'timeDelayAfterWait',
                            'waitingTime',
                            'noThrow',
                          ],
                          bindDescription: "`Wait for: '${selector}'`",
                          bindSelectors: { selector: 'selector' },
                          name: 'waitForSelector',
                          needSelectors: ['selector'],
                          options: { noThrow: true, waitingTime: 1 },
                          type: 'atom',
                        },
                        { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                        {
                          allowResults: ['exists'],
                          bindData: { selectorNumber: 'selectorNumber' },
                          bindSelectors: { selector: 'selector' },
                          name: 'checkSelectorRaw',
                          needData: ['selectorNumber?'],
                          needSelectors: ['selector'],
                          type: 'atom',
                        },
                      ],
                      type: 'atom',
                    },
                    {
                      allowResults: ['text'],
                      bindDescription: "`Get text from selector: '${selector}'`",
                      bindSelectors: { selector: 'selectorMessage' },
                      description: 'Проверка текста всплывашки',
                      errorIfResult: '!text.includes(toastMessage)',
                      if: 'isSuccessfull',
                      name: 'getText',
                      needData: ['selectorNumber?'],
                      needSelectors: ['selector'],
                      type: 'atom',
                    },
                    {
                      allowOptions: [
                        'count',
                        'timeDelayBeforeClick',
                        'button',
                        'logAfter',
                        'hidden',
                        'visible',
                        'timeDelayBeforeWait',
                        'timeDelayAfterWait',
                        'timeDelayAfterClick',
                        'waitingTime',
                      ],
                      bindDescription: "`Кликаем чтобы закрыть всплывающее сообщение: '${toastMessage}'`",
                      bindSelectors: { selector: 'selectorMessage' },
                      if: 'isSuccessfull',
                      logOptions: { logChildren: false },
                      name: 'clickSelector',
                      needData: ['selectorNumber?'],
                      needSelectors: ['selector'],
                      runTest: [
                        {
                          allowOptions: [
                            'hidden',
                            'visible',
                            'timeDelayBeforeWait',
                            'timeDelayAfterWait',
                            'waitingTime',
                            'noThrow',
                          ],
                          bindDescription: "`Wait for: '${selector}'`",
                          description: 'Wait selector',
                          name: 'waitForSelector',
                          needSelectors: ['selector'],
                          type: 'atom',
                        },
                        { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                        {
                          allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
                          bindData: { selectorNumber: 'selectorNumber' },
                          description: 'Click',
                          name: 'clickSelectorRaw',
                          needData: ['selectorNumber?'],
                          needSelectors: ['selector'],
                          type: 'atom',
                        },
                      ],
                    },
                    {
                      bindDescription: "`Не обнаружено информационное сообщение: '${toastMessage}'`",
                      errorIf: 'strictMode && !isSuccessfull',
                      name: 'blank',
                      type: 'atom',
                    },
                    { name: 'blank', type: 'atom' },
                  ],
                },
              ],
            },
            {
              afterTest: [
                {
                  afterTest: [],
                  allowOptions: [],
                  allowResults: [],
                  argsRedefine: {},
                  beforeTest: [],
                  bindData: {},
                  bindDescription: '',
                  bindResults: {},
                  bindSelectors: {},
                  data: {},
                  dataExt: [],
                  debug: false,
                  debugInfo: false,
                  description: 'Проверяем, что окно закрылось и доступно боковое меню',
                  descriptionError: '',
                  descriptionExtend: [],
                  disable: false,
                  engineSupports: [],
                  errorIf: '',
                  errorIfResult: '',
                  frame: '',
                  if: '',
                  inlineJS: '',
                  logOptions: {},
                  name: 'боковоеМенюДоступно',
                  needData: [],
                  needSelectors: [],
                  options: {},
                  repeat: 1,
                  runTest: [
                    {
                      type: 'atom',
                      name: 'todo',
                      logOptions: { textColor: 'white', backgroundColor: 'red' },
                      testFile:
                        'C:\\DEV\\cashdesk-electron\\e2e-ppd\\node_modules\\@puppedo\\atoms\\src\\blank\\todo.yaml',
                      description: 'Нужна проверка, что селектор не скрыт под другими селекторами, например, модалкой',
                      breadcrumbs: [
                        'кейсыАвторизация',
                        'runTest[10].case',
                        'runTest[2].включитьНастройку',
                        'runTest[4].закрытьНастройки',
                        'afterTest[0].боковоеМенюДоступно',
                        'runTest[0].todo',
                      ],
                      levelIndent: 5,
                      stepId: '0dd3f81f2147904bd4df7b5679871632',
                      source:
                        '{\n  "type": "atom",\n  "name": "todo",\n  "logOptions": {\n    "textColor": "white",\n    "backgroundColor": "red"\n  },\n  "testFile": "C:\\\\DEV\\\\cashdesk-electron\\\\e2e-ppd\\\\node_modules\\\\@puppedo\\\\atoms\\\\src\\\\blank\\\\todo.yaml",\n  "description": "Нужна проверка, что селектор не скрыт под другими селекторами, например, модалкой",\n  "breadcrumbs": [\n    "кейсыАвторизация",\n    "runTest[10].case",\n    "runTest[2].включитьНастройку",\n    "runTest[4].закрытьНастройки",\n    "afterTest[0].боковоеМенюДоступно",\n    "runTest[0].todo"\n  ],\n  "levelIndent": 5,\n  "stepId": "0dd3f81f2147904bd4df7b5679871632"\n}',
                    },
                    {
                      type: 'atom',
                      name: 'checkSelector',
                      needSelectors: ['selector'],
                      needData: ['selectorNumber?'],
                      allowOptions: ['waitingTime'],
                      allowResults: ['exists'],
                      logOptions: { logChildren: false },
                      runTest: [
                        {
                          type: 'atom',
                          name: 'waitForSelector',
                          bindDescription: "`Wait for: '${selector}'`",
                          needSelectors: ['selector'],
                          allowOptions: [
                            'hidden',
                            'visible',
                            'timeDelayBeforeWait',
                            'timeDelayAfterWait',
                            'waitingTime',
                            'noThrow',
                          ],
                          testFile:
                            'C:\\DEV\\cashdesk-electron\\e2e-ppd\\node_modules\\@puppedo\\atoms\\src\\main\\waitForSelector.yaml',
                          bindSelectors: { selector: 'selector' },
                          options: { noThrow: true, waitingTime: 1 },
                          breadcrumbs: [
                            'кейсыАвторизация',
                            'runTest[10].case',
                            'runTest[2].включитьНастройку',
                            'runTest[4].закрытьНастройки',
                            'afterTest[0].боковоеМенюДоступно',
                            'runTest[1].checkSelector',
                            'runTest[0].waitForSelector',
                          ],
                          levelIndent: 6,
                          stepId: '587864b1c3bbbb3d17c684da348fd817',
                          source:
                            '{\n  "type": "atom",\n  "name": "waitForSelector",\n  "bindDescription": "`Wait for: \'${selector}\'`",\n  "needSelectors": [\n    "selector"\n  ],\n  "allowOptions": [\n    "hidden",\n    "visible",\n    "timeDelayBeforeWait",\n    "timeDelayAfterWait",\n    "waitingTime",\n    "noThrow"\n  ],\n  "testFile": "C:\\\\DEV\\\\cashdesk-electron\\\\e2e-ppd\\\\node_modules\\\\@puppedo\\\\atoms\\\\src\\\\main\\\\waitForSelector.yaml",\n  "bindSelectors": {\n    "selector": "selector"\n  },\n  "options": {\n    "noThrow": true,\n    "waitingTime": 1\n  },\n  "breadcrumbs": [\n    "кейсыАвторизация",\n    "runTest[10].case",\n    "runTest[2].включитьНастройку",\n    "runTest[4].закрытьНастройки",\n    "afterTest[0].боковоеМенюДоступно",\n    "runTest[1].checkSelector",\n    "runTest[0].waitForSelector"\n  ],\n  "levelIndent": 6,\n  "stepId": "587864b1c3bbbb3d17c684da348fd817"\n}',
                        },
                        {
                          type: 'atom',
                          name: 'blank',
                          testFile:
                            'C:\\DEV\\cashdesk-electron\\e2e-ppd\\node_modules\\@puppedo\\atoms\\src\\blank\\blank.yaml',
                          if: 'selectorNumber === null',
                          const: { selectorNumber: 0 },
                          breadcrumbs: [
                            'кейсыАвторизация',
                            'runTest[10].case',
                            'runTest[2].включитьНастройку',
                            'runTest[4].закрытьНастройки',
                            'afterTest[0].боковоеМенюДоступно',
                            'runTest[1].checkSelector',
                            'runTest[1].blank',
                          ],
                          levelIndent: 6,
                          stepId: 'a1e5ea13e3c36322ac39d35ce490c9cf',
                          source:
                            '{\n  "type": "atom",\n  "name": "blank",\n  "testFile": "C:\\\\DEV\\\\cashdesk-electron\\\\e2e-ppd\\\\node_modules\\\\@puppedo\\\\atoms\\\\src\\\\blank\\\\blank.yaml",\n  "if": "selectorNumber === null",\n  "const": {\n    "selectorNumber": 0\n  },\n  "breadcrumbs": [\n    "кейсыАвторизация",\n    "runTest[10].case",\n    "runTest[2].включитьНастройку",\n    "runTest[4].закрытьНастройки",\n    "afterTest[0].боковоеМенюДоступно",\n    "runTest[1].checkSelector",\n    "runTest[1].blank"\n  ],\n  "levelIndent": 6,\n  "stepId": "a1e5ea13e3c36322ac39d35ce490c9cf"\n}',
                        },
                        {
                          type: 'atom',
                          name: 'checkSelectorRaw',
                          needSelectors: ['selector'],
                          needData: ['selectorNumber?'],
                          allowResults: ['exists'],
                          testFile:
                            'C:\\DEV\\cashdesk-electron\\e2e-ppd\\node_modules\\@puppedo\\atoms\\src\\checks\\checkSelectorRaw.yaml',
                          bindSelectors: { selector: 'selector' },
                          bindData: { selectorNumber: 'selectorNumber' },
                          result: { exists: 'exists' },
                          breadcrumbs: [
                            'кейсыАвторизация',
                            'runTest[10].case',
                            'runTest[2].включитьНастройку',
                            'runTest[4].закрытьНастройки',
                            'afterTest[0].боковоеМенюДоступно',
                            'runTest[1].checkSelector',
                            'runTest[2].checkSelectorRaw',
                          ],
                          levelIndent: 6,
                          stepId: '5d8abab5767cedbfd2c0d4d83c48c0cb',
                          source:
                            '{\n  "type": "atom",\n  "name": "checkSelectorRaw",\n  "needSelectors": [\n    "selector"\n  ],\n  "needData": [\n    "selectorNumber?"\n  ],\n  "allowResults": [\n    "exists"\n  ],\n  "testFile": "C:\\\\DEV\\\\cashdesk-electron\\\\e2e-ppd\\\\node_modules\\\\@puppedo\\\\atoms\\\\src\\\\checks\\\\checkSelectorRaw.yaml",\n  "bindSelectors": {\n    "selector": "selector"\n  },\n  "bindData": {\n    "selectorNumber": "selectorNumber"\n  },\n  "result": {\n    "exists": "exists"\n  },\n  "breadcrumbs": [\n    "кейсыАвторизация",\n    "runTest[10].case",\n    "runTest[2].включитьНастройку",\n    "runTest[4].закрытьНастройки",\n    "afterTest[0].боковоеМенюДоступно",\n    "runTest[1].checkSelector",\n    "runTest[2].checkSelectorRaw"\n  ],\n  "levelIndent": 6,\n  "stepId": "5d8abab5767cedbfd2c0d4d83c48c0cb"\n}',
                        },
                      ],
                      testFile:
                        'C:\\DEV\\cashdesk-electron\\e2e-ppd\\node_modules\\@puppedo\\atoms\\src\\checks\\checkSelector.yaml',
                      description: 'Проверяем доступность селектора бокового меню',
                      bindSelectors: { selector: 'mainView.menuButton' },
                      options: { waitingTime: 500 },
                      errorInResult: '!exists',
                      breadcrumbs: [
                        'кейсыАвторизация',
                        'runTest[10].case',
                        'runTest[2].включитьНастройку',
                        'runTest[4].закрытьНастройки',
                        'afterTest[0].боковоеМенюДоступно',
                        'runTest[1].checkSelector',
                      ],
                      levelIndent: 5,
                      stepId: '2ae45807d2f88c64fec73236fc63ae70',
                      source:
                        '{\n  "type": "atom",\n  "name": "checkSelector",\n  "needSelectors": [\n    "selector"\n  ],\n  "needData": [\n    "selectorNumber?"\n  ],\n  "allowOptions": [\n    "waitingTime"\n  ],\n  "allowResults": [\n    "exists"\n  ],\n  "logOptions": {\n    "logChildren": false\n  },\n  "runTest": [\n    {\n      "waitForSelector": {\n        "bindSelectors": {\n          "selector": "selector"\n        },\n        "options": {\n          "noThrow": true,\n          "waitingTime": 1\n        }\n      }\n    },\n    {\n      "blank": {\n        "if": "selectorNumber === null",\n        "const": {\n          "selectorNumber": 0\n        }\n      }\n    },\n    {\n      "checkSelectorRaw": {\n        "bindSelectors": {\n          "selector": "selector"\n        },\n        "bindData": {\n          "selectorNumber": "selectorNumber"\n        },\n        "result": {\n          "exists": "exists"\n        }\n      }\n    }\n  ],\n  "testFile": "C:\\\\DEV\\\\cashdesk-electron\\\\e2e-ppd\\\\node_modules\\\\@puppedo\\\\atoms\\\\src\\\\checks\\\\checkSelector.yaml",\n  "description": "Проверяем доступность селектора бокового меню",\n  "bindSelectors": {\n    "selector": "mainView.menuButton"\n  },\n  "options": {\n    "waitingTime": 500\n  },\n  "errorInResult": "!exists",\n  "breadcrumbs": [\n    "кейсыАвторизация",\n    "runTest[10].case",\n    "runTest[2].включитьНастройку",\n    "runTest[4].закрытьНастройки",\n    "afterTest[0].боковоеМенюДоступно",\n    "runTest[1].checkSelector"\n  ],\n  "levelIndent": 5,\n  "stepId": "2ae45807d2f88c64fec73236fc63ae70"\n}',
                    },
                  ],
                  selectors: {},
                  selectorsExt: [],
                  tags: [],
                  todo: '',
                  type: 'test',
                  while: '',
                  testFile: 'C:\\DEV\\cashdesk-electron\\e2e-ppd\\tests\\Касса\\БоковоеМеню\\боковоеМенюДоступно.yaml',
                  breadcrumbs: [
                    'кейсыАвторизация',
                    'runTest[10].case',
                    'runTest[2].включитьНастройку',
                    'runTest[4].закрытьНастройки',
                    'afterTest[0].боковоеМенюДоступно',
                  ],
                  levelIndent: 4,
                  stepId: '6170d0a040726449d5c3609525b127d0',
                  source:
                    '{\n  "afterTest": [],\n  "allowOptions": [],\n  "allowResults": [],\n  "argsRedefine": {},\n  "beforeTest": [],\n  "bindData": {},\n  "bindDescription": "",\n  "bindResults": {},\n  "bindSelectors": {},\n  "data": {},\n  "dataExt": [],\n  "debug": false,\n  "debugInfo": false,\n  "description": "Проверяем, что окно закрылось и доступно боковое меню",\n  "descriptionError": "",\n  "descriptionExtend": [],\n  "disable": false,\n  "engineSupports": [],\n  "errorIf": "",\n  "errorIfResult": "",\n  "frame": "",\n  "if": "",\n  "inlineJS": "",\n  "logOptions": {},\n  "name": "боковоеМенюДоступно",\n  "needData": [],\n  "needSelectors": [],\n  "options": {},\n  "repeat": 1,\n  "runTest": [\n    {\n      "todo": {\n        "description": "Нужна проверка, что селектор не скрыт под другими селекторами, например, модалкой"\n      }\n    },\n    {\n      "checkSelector": {\n        "description": "Проверяем доступность селектора бокового меню",\n        "bindSelectors": {\n          "selector": "mainView.menuButton"\n        },\n        "options": {\n          "waitingTime": 500\n        },\n        "errorInResult": "!exists"\n      }\n    }\n  ],\n  "selectors": {},\n  "selectorsExt": [],\n  "tags": [],\n  "todo": "",\n  "type": "test",\n  "while": "",\n  "testFile": "C:\\\\DEV\\\\cashdesk-electron\\\\e2e-ppd\\\\tests\\\\Касса\\\\БоковоеМеню\\\\боковоеМенюДоступно.yaml",\n  "breadcrumbs": [\n    "кейсыАвторизация",\n    "runTest[10].case",\n    "runTest[2].включитьНастройку",\n    "runTest[4].закрытьНастройки",\n    "afterTest[0].боковоеМенюДоступно"\n  ],\n  "levelIndent": 4,\n  "stepId": "6170d0a040726449d5c3609525b127d0"\n}',
                },
              ],
              description: 'Закрыть вкладку "Настройки"',
              logOptions: { logChildren: false },
              name: 'закрытьНастройки',
              runTest: [
                {
                  allowOptions: ['waitingTime'],
                  allowResults: ['exists'],
                  bindSelectors: { selector: 'settingsWindow.header' },
                  description: 'Проверяем, что открыто окно "Настройки", по заголовку',
                  errorIfResult: '!exists',
                  logOptions: { logChildren: false },
                  name: 'checkSelector',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  runTest: [
                    {
                      allowOptions: [
                        'hidden',
                        'visible',
                        'timeDelayBeforeWait',
                        'timeDelayAfterWait',
                        'waitingTime',
                        'noThrow',
                      ],
                      bindDescription: "`Wait for: '${selector}'`",
                      bindSelectors: { selector: 'selector' },
                      name: 'waitForSelector',
                      needSelectors: ['selector'],
                      options: { noThrow: true, waitingTime: 1 },
                      type: 'atom',
                    },
                    { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                    {
                      allowResults: ['exists'],
                      bindData: { selectorNumber: 'selectorNumber' },
                      bindSelectors: { selector: 'selector' },
                      name: 'checkSelectorRaw',
                      needData: ['selectorNumber?'],
                      needSelectors: ['selector'],
                      type: 'atom',
                    },
                  ],
                  type: 'atom',
                },
                {
                  allowOptions: [
                    'count',
                    'timeDelayBeforeClick',
                    'button',
                    'logAfter',
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'timeDelayAfterClick',
                    'waitingTime',
                  ],
                  bindSelectors: { selector: 'settingsWindow.closeButton' },
                  description: 'Нажимаем кнопку закрыть в окне',
                  logOptions: { logChildren: false },
                  name: 'clickSelector',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  runTest: [
                    {
                      allowOptions: [
                        'hidden',
                        'visible',
                        'timeDelayBeforeWait',
                        'timeDelayAfterWait',
                        'waitingTime',
                        'noThrow',
                      ],
                      bindDescription: "`Wait for: '${selector}'`",
                      description: 'Wait selector',
                      name: 'waitForSelector',
                      needSelectors: ['selector'],
                      type: 'atom',
                    },
                    { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                    {
                      allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
                      bindData: { selectorNumber: 'selectorNumber' },
                      description: 'Click',
                      name: 'clickSelectorRaw',
                      needData: ['selectorNumber?'],
                      needSelectors: ['selector'],
                      type: 'atom',
                    },
                  ],
                },
              ],
            },
          ],
        },
        {
          beforeTest: [
            {
              afterTest: [],
              allowOptions: [],
              allowResults: [],
              argsRedefine: {},
              beforeTest: [],
              bindData: {},
              bindDescription: '',
              bindResults: {},
              bindSelectors: {},
              data: {},
              dataExt: [],
              debug: false,
              debugInfo: false,
              description: 'Открываем боковое меню',
              descriptionError: '',
              descriptionExtend: [],
              disable: false,
              engineSupports: [],
              errorIf: '',
              errorIfResult: '',
              frame: '',
              if: '',
              inlineJS: '',
              logOptions: { logChildren: false },
              name: 'боковоеМенюОткрыть',
              needData: [],
              needSelectors: [],
              options: {},
              repeat: 1,
              runTest: [
                {
                  afterTest: [],
                  allowOptions: [],
                  allowResults: [],
                  argsRedefine: {},
                  beforeTest: [],
                  bindData: {},
                  bindDescription: '',
                  bindResults: {},
                  bindSelectors: {},
                  data: {},
                  dataExt: [],
                  debug: false,
                  debugInfo: false,
                  description: 'Удостовериться, что мы залогинены и доступно боковое меню',
                  descriptionError: '',
                  descriptionExtend: [],
                  disable: false,
                  engineSupports: [],
                  errorIf: '',
                  errorIfResult: '',
                  frame: '',
                  if: '',
                  inlineJS: '',
                  logOptions: {},
                  name: 'боковоеМенюДоступно',
                  needData: [],
                  needSelectors: [],
                  options: {},
                  repeat: 1,
                  runTest: [
                    {
                      type: 'atom',
                      name: 'todo',
                      logOptions: { textColor: 'white', backgroundColor: 'red' },
                      testFile:
                        'C:\\DEV\\cashdesk-electron\\e2e-ppd\\node_modules\\@puppedo\\atoms\\src\\blank\\todo.yaml',
                      description: 'Нужна проверка, что селектор не скрыт под другими селекторами, например, модалкой',
                      breadcrumbs: [
                        'кейсыАвторизация',
                        'runTest[10].case',
                        'runTest[3].заблокироватьКассу',
                        'beforeTest[0].боковоеМенюОткрыть',
                        'runTest[0].боковоеМенюДоступно',
                        'runTest[0].todo',
                      ],
                      levelIndent: 5,
                      stepId: '5566e75594ed1a60656dee38753956e5',
                      source:
                        '{\n  "type": "atom",\n  "name": "todo",\n  "logOptions": {\n    "textColor": "white",\n    "backgroundColor": "red"\n  },\n  "testFile": "C:\\\\DEV\\\\cashdesk-electron\\\\e2e-ppd\\\\node_modules\\\\@puppedo\\\\atoms\\\\src\\\\blank\\\\todo.yaml",\n  "description": "Нужна проверка, что селектор не скрыт под другими селекторами, например, модалкой",\n  "breadcrumbs": [\n    "кейсыАвторизация",\n    "runTest[10].case",\n    "runTest[3].заблокироватьКассу",\n    "beforeTest[0].боковоеМенюОткрыть",\n    "runTest[0].боковоеМенюДоступно",\n    "runTest[0].todo"\n  ],\n  "levelIndent": 5,\n  "stepId": "5566e75594ed1a60656dee38753956e5"\n}',
                    },
                    {
                      type: 'atom',
                      name: 'checkSelector',
                      needSelectors: ['selector'],
                      needData: ['selectorNumber?'],
                      allowOptions: ['waitingTime'],
                      allowResults: ['exists'],
                      logOptions: { logChildren: false },
                      runTest: [
                        {
                          type: 'atom',
                          name: 'waitForSelector',
                          bindDescription: "`Wait for: '${selector}'`",
                          needSelectors: ['selector'],
                          allowOptions: [
                            'hidden',
                            'visible',
                            'timeDelayBeforeWait',
                            'timeDelayAfterWait',
                            'waitingTime',
                            'noThrow',
                          ],
                          testFile:
                            'C:\\DEV\\cashdesk-electron\\e2e-ppd\\node_modules\\@puppedo\\atoms\\src\\main\\waitForSelector.yaml',
                          bindSelectors: { selector: 'selector' },
                          options: { noThrow: true, waitingTime: 1 },
                          breadcrumbs: [
                            'кейсыАвторизация',
                            'runTest[10].case',
                            'runTest[3].заблокироватьКассу',
                            'beforeTest[0].боковоеМенюОткрыть',
                            'runTest[0].боковоеМенюДоступно',
                            'runTest[1].checkSelector',
                            'runTest[0].waitForSelector',
                          ],
                          levelIndent: 6,
                          stepId: '6178b333b3f5f0abd351e57241eda578',
                          source:
                            '{\n  "type": "atom",\n  "name": "waitForSelector",\n  "bindDescription": "`Wait for: \'${selector}\'`",\n  "needSelectors": [\n    "selector"\n  ],\n  "allowOptions": [\n    "hidden",\n    "visible",\n    "timeDelayBeforeWait",\n    "timeDelayAfterWait",\n    "waitingTime",\n    "noThrow"\n  ],\n  "testFile": "C:\\\\DEV\\\\cashdesk-electron\\\\e2e-ppd\\\\node_modules\\\\@puppedo\\\\atoms\\\\src\\\\main\\\\waitForSelector.yaml",\n  "bindSelectors": {\n    "selector": "selector"\n  },\n  "options": {\n    "noThrow": true,\n    "waitingTime": 1\n  },\n  "breadcrumbs": [\n    "кейсыАвторизация",\n    "runTest[10].case",\n    "runTest[3].заблокироватьКассу",\n    "beforeTest[0].боковоеМенюОткрыть",\n    "runTest[0].боковоеМенюДоступно",\n    "runTest[1].checkSelector",\n    "runTest[0].waitForSelector"\n  ],\n  "levelIndent": 6,\n  "stepId": "6178b333b3f5f0abd351e57241eda578"\n}',
                        },
                        {
                          type: 'atom',
                          name: 'blank',
                          testFile:
                            'C:\\DEV\\cashdesk-electron\\e2e-ppd\\node_modules\\@puppedo\\atoms\\src\\blank\\blank.yaml',
                          if: 'selectorNumber === null',
                          const: { selectorNumber: 0 },
                          breadcrumbs: [
                            'кейсыАвторизация',
                            'runTest[10].case',
                            'runTest[3].заблокироватьКассу',
                            'beforeTest[0].боковоеМенюОткрыть',
                            'runTest[0].боковоеМенюДоступно',
                            'runTest[1].checkSelector',
                            'runTest[1].blank',
                          ],
                          levelIndent: 6,
                          stepId: '21eff92b397bcc49b69a4bb71ea65921',
                          source:
                            '{\n  "type": "atom",\n  "name": "blank",\n  "testFile": "C:\\\\DEV\\\\cashdesk-electron\\\\e2e-ppd\\\\node_modules\\\\@puppedo\\\\atoms\\\\src\\\\blank\\\\blank.yaml",\n  "if": "selectorNumber === null",\n  "const": {\n    "selectorNumber": 0\n  },\n  "breadcrumbs": [\n    "кейсыАвторизация",\n    "runTest[10].case",\n    "runTest[3].заблокироватьКассу",\n    "beforeTest[0].боковоеМенюОткрыть",\n    "runTest[0].боковоеМенюДоступно",\n    "runTest[1].checkSelector",\n    "runTest[1].blank"\n  ],\n  "levelIndent": 6,\n  "stepId": "21eff92b397bcc49b69a4bb71ea65921"\n}',
                        },
                        {
                          type: 'atom',
                          name: 'checkSelectorRaw',
                          needSelectors: ['selector'],
                          needData: ['selectorNumber?'],
                          allowResults: ['exists'],
                          testFile:
                            'C:\\DEV\\cashdesk-electron\\e2e-ppd\\node_modules\\@puppedo\\atoms\\src\\checks\\checkSelectorRaw.yaml',
                          bindSelectors: { selector: 'selector' },
                          bindData: { selectorNumber: 'selectorNumber' },
                          result: { exists: 'exists' },
                          breadcrumbs: [
                            'кейсыАвторизация',
                            'runTest[10].case',
                            'runTest[3].заблокироватьКассу',
                            'beforeTest[0].боковоеМенюОткрыть',
                            'runTest[0].боковоеМенюДоступно',
                            'runTest[1].checkSelector',
                            'runTest[2].checkSelectorRaw',
                          ],
                          levelIndent: 6,
                          stepId: '1c8fe20fd0d25e718c61a8c2d1a0e87e',
                          source:
                            '{\n  "type": "atom",\n  "name": "checkSelectorRaw",\n  "needSelectors": [\n    "selector"\n  ],\n  "needData": [\n    "selectorNumber?"\n  ],\n  "allowResults": [\n    "exists"\n  ],\n  "testFile": "C:\\\\DEV\\\\cashdesk-electron\\\\e2e-ppd\\\\node_modules\\\\@puppedo\\\\atoms\\\\src\\\\checks\\\\checkSelectorRaw.yaml",\n  "bindSelectors": {\n    "selector": "selector"\n  },\n  "bindData": {\n    "selectorNumber": "selectorNumber"\n  },\n  "result": {\n    "exists": "exists"\n  },\n  "breadcrumbs": [\n    "кейсыАвторизация",\n    "runTest[10].case",\n    "runTest[3].заблокироватьКассу",\n    "beforeTest[0].боковоеМенюОткрыть",\n    "runTest[0].боковоеМенюДоступно",\n    "runTest[1].checkSelector",\n    "runTest[2].checkSelectorRaw"\n  ],\n  "levelIndent": 6,\n  "stepId": "1c8fe20fd0d25e718c61a8c2d1a0e87e"\n}',
                        },
                      ],
                      testFile:
                        'C:\\DEV\\cashdesk-electron\\e2e-ppd\\node_modules\\@puppedo\\atoms\\src\\checks\\checkSelector.yaml',
                      description: 'Проверяем доступность селектора бокового меню',
                      bindSelectors: { selector: 'mainView.menuButton' },
                      options: { waitingTime: 500 },
                      errorInResult: '!exists',
                      breadcrumbs: [
                        'кейсыАвторизация',
                        'runTest[10].case',
                        'runTest[3].заблокироватьКассу',
                        'beforeTest[0].боковоеМенюОткрыть',
                        'runTest[0].боковоеМенюДоступно',
                        'runTest[1].checkSelector',
                      ],
                      levelIndent: 5,
                      stepId: 'd468e7ab2868d2eadaf014c6918e656e',
                      source:
                        '{\n  "type": "atom",\n  "name": "checkSelector",\n  "needSelectors": [\n    "selector"\n  ],\n  "needData": [\n    "selectorNumber?"\n  ],\n  "allowOptions": [\n    "waitingTime"\n  ],\n  "allowResults": [\n    "exists"\n  ],\n  "logOptions": {\n    "logChildren": false\n  },\n  "runTest": [\n    {\n      "waitForSelector": {\n        "bindSelectors": {\n          "selector": "selector"\n        },\n        "options": {\n          "noThrow": true,\n          "waitingTime": 1\n        }\n      }\n    },\n    {\n      "blank": {\n        "if": "selectorNumber === null",\n        "const": {\n          "selectorNumber": 0\n        }\n      }\n    },\n    {\n      "checkSelectorRaw": {\n        "bindSelectors": {\n          "selector": "selector"\n        },\n        "bindData": {\n          "selectorNumber": "selectorNumber"\n        },\n        "result": {\n          "exists": "exists"\n        }\n      }\n    }\n  ],\n  "testFile": "C:\\\\DEV\\\\cashdesk-electron\\\\e2e-ppd\\\\node_modules\\\\@puppedo\\\\atoms\\\\src\\\\checks\\\\checkSelector.yaml",\n  "description": "Проверяем доступность селектора бокового меню",\n  "bindSelectors": {\n    "selector": "mainView.menuButton"\n  },\n  "options": {\n    "waitingTime": 500\n  },\n  "errorInResult": "!exists",\n  "breadcrumbs": [\n    "кейсыАвторизация",\n    "runTest[10].case",\n    "runTest[3].заблокироватьКассу",\n    "beforeTest[0].боковоеМенюОткрыть",\n    "runTest[0].боковоеМенюДоступно",\n    "runTest[1].checkSelector"\n  ],\n  "levelIndent": 5,\n  "stepId": "d468e7ab2868d2eadaf014c6918e656e"\n}',
                    },
                  ],
                  selectors: {},
                  selectorsExt: [],
                  tags: [],
                  todo: '',
                  type: 'test',
                  while: '',
                  testFile: 'C:\\DEV\\cashdesk-electron\\e2e-ppd\\tests\\Касса\\БоковоеМеню\\боковоеМенюДоступно.yaml',
                  breadcrumbs: [
                    'кейсыАвторизация',
                    'runTest[10].case',
                    'runTest[3].заблокироватьКассу',
                    'beforeTest[0].боковоеМенюОткрыть',
                    'runTest[0].боковоеМенюДоступно',
                  ],
                  levelIndent: 4,
                  stepId: '1ec248e71641f4e6ee2284a38875e276',
                  source:
                    '{\n  "afterTest": [],\n  "allowOptions": [],\n  "allowResults": [],\n  "argsRedefine": {},\n  "beforeTest": [],\n  "bindData": {},\n  "bindDescription": "",\n  "bindResults": {},\n  "bindSelectors": {},\n  "data": {},\n  "dataExt": [],\n  "debug": false,\n  "debugInfo": false,\n  "description": "Удостовериться, что мы залогинены и доступно боковое меню",\n  "descriptionError": "",\n  "descriptionExtend": [],\n  "disable": false,\n  "engineSupports": [],\n  "errorIf": "",\n  "errorIfResult": "",\n  "frame": "",\n  "if": "",\n  "inlineJS": "",\n  "logOptions": {},\n  "name": "боковоеМенюДоступно",\n  "needData": [],\n  "needSelectors": [],\n  "options": {},\n  "repeat": 1,\n  "runTest": [\n    {\n      "todo": {\n        "description": "Нужна проверка, что селектор не скрыт под другими селекторами, например, модалкой"\n      }\n    },\n    {\n      "checkSelector": {\n        "description": "Проверяем доступность селектора бокового меню",\n        "bindSelectors": {\n          "selector": "mainView.menuButton"\n        },\n        "options": {\n          "waitingTime": 500\n        },\n        "errorInResult": "!exists"\n      }\n    }\n  ],\n  "selectors": {},\n  "selectorsExt": [],\n  "tags": [],\n  "todo": "",\n  "type": "test",\n  "while": "",\n  "testFile": "C:\\\\DEV\\\\cashdesk-electron\\\\e2e-ppd\\\\tests\\\\Касса\\\\БоковоеМеню\\\\боковоеМенюДоступно.yaml",\n  "breadcrumbs": [\n    "кейсыАвторизация",\n    "runTest[10].case",\n    "runTest[3].заблокироватьКассу",\n    "beforeTest[0].боковоеМенюОткрыть",\n    "runTest[0].боковоеМенюДоступно"\n  ],\n  "levelIndent": 4,\n  "stepId": "1ec248e71641f4e6ee2284a38875e276"\n}',
                },
                {
                  afterTest: [],
                  allowOptions: [
                    'count',
                    'timeDelayBeforeClick',
                    'button',
                    'logAfter',
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'timeDelayAfterClick',
                    'waitingTime',
                  ],
                  allowResults: [],
                  argsRedefine: {},
                  beforeTest: [],
                  bindData: {},
                  bindDescription: '',
                  bindResults: {},
                  bindSelectors: { selector: 'mainView.menuButton' },
                  data: {},
                  dataExt: [],
                  debug: false,
                  debugInfo: false,
                  description: 'Кликаем на бутерброд бокового меню и ждем пока оно откроется',
                  descriptionError: '',
                  descriptionExtend: [],
                  disable: false,
                  engineSupports: [],
                  errorIf: '',
                  errorIfResult: '',
                  frame: '',
                  if: '',
                  inlineJS: '',
                  logOptions: { logChildren: false },
                  name: 'clickSelector',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  options: { timeDelayAfterClick: 25 },
                  repeat: 1,
                  runTest: [
                    {
                      type: 'atom',
                      name: 'waitForSelector',
                      bindDescription: "`Wait for: '${selector}'`",
                      needSelectors: ['selector'],
                      allowOptions: [
                        'hidden',
                        'visible',
                        'timeDelayBeforeWait',
                        'timeDelayAfterWait',
                        'waitingTime',
                        'noThrow',
                      ],
                      testFile:
                        'C:\\DEV\\cashdesk-electron\\e2e-ppd\\node_modules\\@puppedo\\atoms\\src\\main\\waitForSelector.yaml',
                      description: 'Wait selector',
                      bindSelector: { selector: 'selector' },
                      breadcrumbs: [
                        'кейсыАвторизация',
                        'runTest[10].case',
                        'runTest[3].заблокироватьКассу',
                        'beforeTest[0].боковоеМенюОткрыть',
                        'runTest[1].clickSelector',
                        'runTest[0].waitForSelector',
                      ],
                      levelIndent: 5,
                      stepId: '4a1a4a88c1950ed8d42486d738c93786',
                      source:
                        '{\n  "type": "atom",\n  "name": "waitForSelector",\n  "bindDescription": "`Wait for: \'${selector}\'`",\n  "needSelectors": [\n    "selector"\n  ],\n  "allowOptions": [\n    "hidden",\n    "visible",\n    "timeDelayBeforeWait",\n    "timeDelayAfterWait",\n    "waitingTime",\n    "noThrow"\n  ],\n  "testFile": "C:\\\\DEV\\\\cashdesk-electron\\\\e2e-ppd\\\\node_modules\\\\@puppedo\\\\atoms\\\\src\\\\main\\\\waitForSelector.yaml",\n  "description": "Wait selector",\n  "bindSelector": {\n    "selector": "selector"\n  },\n  "breadcrumbs": [\n    "кейсыАвторизация",\n    "runTest[10].case",\n    "runTest[3].заблокироватьКассу",\n    "beforeTest[0].боковоеМенюОткрыть",\n    "runTest[1].clickSelector",\n    "runTest[0].waitForSelector"\n  ],\n  "levelIndent": 5,\n  "stepId": "4a1a4a88c1950ed8d42486d738c93786"\n}',
                    },
                    {
                      type: 'atom',
                      name: 'blank',
                      testFile:
                        'C:\\DEV\\cashdesk-electron\\e2e-ppd\\node_modules\\@puppedo\\atoms\\src\\blank\\blank.yaml',
                      if: 'selectorNumber === null',
                      const: { selectorNumber: 0 },
                      breadcrumbs: [
                        'кейсыАвторизация',
                        'runTest[10].case',
                        'runTest[3].заблокироватьКассу',
                        'beforeTest[0].боковоеМенюОткрыть',
                        'runTest[1].clickSelector',
                        'runTest[1].blank',
                      ],
                      levelIndent: 5,
                      stepId: '168edf0a27fb7c20e43a5be7b5672c59',
                      source:
                        '{\n  "type": "atom",\n  "name": "blank",\n  "testFile": "C:\\\\DEV\\\\cashdesk-electron\\\\e2e-ppd\\\\node_modules\\\\@puppedo\\\\atoms\\\\src\\\\blank\\\\blank.yaml",\n  "if": "selectorNumber === null",\n  "const": {\n    "selectorNumber": 0\n  },\n  "breadcrumbs": [\n    "кейсыАвторизация",\n    "runTest[10].case",\n    "runTest[3].заблокироватьКассу",\n    "beforeTest[0].боковоеМенюОткрыть",\n    "runTest[1].clickSelector",\n    "runTest[1].blank"\n  ],\n  "levelIndent": 5,\n  "stepId": "168edf0a27fb7c20e43a5be7b5672c59"\n}',
                    },
                    {
                      type: 'atom',
                      name: 'clickSelectorRaw',
                      bindDescriprion: "`Click selector: '${selector}'`",
                      needSelectors: ['selector'],
                      needData: ['selectorNumber?'],
                      allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
                      testFile:
                        'C:\\DEV\\cashdesk-electron\\e2e-ppd\\node_modules\\@puppedo\\atoms\\src\\main\\clickSelectorRaw.yaml',
                      description: 'Click',
                      bindData: { selectorNumber: 'selectorNumber' },
                      bindSelector: { selector: 'selector' },
                      breadcrumbs: [
                        'кейсыАвторизация',
                        'runTest[10].case',
                        'runTest[3].заблокироватьКассу',
                        'beforeTest[0].боковоеМенюОткрыть',
                        'runTest[1].clickSelector',
                        'runTest[2].clickSelectorRaw',
                      ],
                      levelIndent: 5,
                      stepId: '4bb22db75483ed82a9b59e6ce431a986',
                      source:
                        '{\n  "type": "atom",\n  "name": "clickSelectorRaw",\n  "bindDescriprion": "`Click selector: \'${selector}\'`",\n  "needSelectors": [\n    "selector"\n  ],\n  "needData": [\n    "selectorNumber?"\n  ],\n  "allowOptions": [\n    "count",\n    "timeDelayBeforeClick",\n    "button",\n    "logAfter",\n    "timeDelayAfterClick"\n  ],\n  "testFile": "C:\\\\DEV\\\\cashdesk-electron\\\\e2e-ppd\\\\node_modules\\\\@puppedo\\\\atoms\\\\src\\\\main\\\\clickSelectorRaw.yaml",\n  "description": "Click",\n  "bindData": {\n    "selectorNumber": "selectorNumber"\n  },\n  "bindSelector": {\n    "selector": "selector"\n  },\n  "breadcrumbs": [\n    "кейсыАвторизация",\n    "runTest[10].case",\n    "runTest[3].заблокироватьКассу",\n    "beforeTest[0].боковоеМенюОткрыть",\n    "runTest[1].clickSelector",\n    "runTest[2].clickSelectorRaw"\n  ],\n  "levelIndent": 5,\n  "stepId": "4bb22db75483ed82a9b59e6ce431a986"\n}',
                    },
                  ],
                  selectors: {},
                  selectorsExt: [],
                  tags: [],
                  todo: '',
                  type: 'test',
                  while: '',
                  bindDescriprion: "`Wait selector: '${selector}' and click`",
                  testFile:
                    'C:\\DEV\\cashdesk-electron\\e2e-ppd\\node_modules\\@puppedo\\atoms\\src\\main\\clickSelector.yaml',
                  breadcrumbs: [
                    'кейсыАвторизация',
                    'runTest[10].case',
                    'runTest[3].заблокироватьКассу',
                    'beforeTest[0].боковоеМенюОткрыть',
                    'runTest[1].clickSelector',
                  ],
                  levelIndent: 4,
                  stepId: '7b71ee265a8741f5220b9e1a545e8060',
                  source:
                    '{\n  "afterTest": [],\n  "allowOptions": [\n    "count",\n    "timeDelayBeforeClick",\n    "button",\n    "logAfter",\n    "hidden",\n    "visible",\n    "timeDelayBeforeWait",\n    "timeDelayAfterWait",\n    "timeDelayAfterClick",\n    "waitingTime"\n  ],\n  "allowResults": [],\n  "argsRedefine": {},\n  "beforeTest": [],\n  "bindData": {},\n  "bindDescription": "",\n  "bindResults": {},\n  "bindSelectors": {\n    "selector": "mainView.menuButton"\n  },\n  "data": {},\n  "dataExt": [],\n  "debug": false,\n  "debugInfo": false,\n  "description": "Кликаем на бутерброд бокового меню и ждем пока оно откроется",\n  "descriptionError": "",\n  "descriptionExtend": [],\n  "disable": false,\n  "engineSupports": [],\n  "errorIf": "",\n  "errorIfResult": "",\n  "frame": "",\n  "if": "",\n  "inlineJS": "",\n  "logOptions": {\n    "logChildren": false\n  },\n  "name": "clickSelector",\n  "needData": [\n    "selectorNumber?"\n  ],\n  "needSelectors": [\n    "selector"\n  ],\n  "options": {\n    "timeDelayAfterClick": 25\n  },\n  "repeat": 1,\n  "runTest": [\n    {\n      "waitForSelector": {\n        "description": "Wait selector",\n        "bindSelector": {\n          "selector": "selector"\n        }\n      }\n    },\n    {\n      "blank": {\n        "if": "selectorNumber === null",\n        "const": {\n          "selectorNumber": 0\n        }\n      }\n    },\n    {\n      "clickSelectorRaw": {\n        "description": "Click",\n        "bindData": {\n          "selectorNumber": "selectorNumber"\n        },\n        "bindSelector": {\n          "selector": "selector"\n        }\n      }\n    }\n  ],\n  "selectors": {},\n  "selectorsExt": [],\n  "tags": [],\n  "todo": "",\n  "type": "test",\n  "while": "",\n  "bindDescriprion": "`Wait selector: \'${selector}\' and click`",\n  "testFile": "C:\\\\DEV\\\\cashdesk-electron\\\\e2e-ppd\\\\node_modules\\\\@puppedo\\\\atoms\\\\src\\\\main\\\\clickSelector.yaml",\n  "breadcrumbs": [\n    "кейсыАвторизация",\n    "runTest[10].case",\n    "runTest[3].заблокироватьКассу",\n    "beforeTest[0].боковоеМенюОткрыть",\n    "runTest[1].clickSelector"\n  ],\n  "levelIndent": 4,\n  "stepId": "7b71ee265a8741f5220b9e1a545e8060"\n}',
                },
              ],
              selectors: {},
              selectorsExt: [],
              tags: [],
              todo: '',
              type: 'test',
              while: '',
              testFile: 'C:\\DEV\\cashdesk-electron\\e2e-ppd\\tests\\Касса\\БоковоеМеню\\боковоеМенюОткрыть.yaml',
              breadcrumbs: [
                'кейсыАвторизация',
                'runTest[10].case',
                'runTest[3].заблокироватьКассу',
                'beforeTest[0].боковоеМенюОткрыть',
              ],
              levelIndent: 3,
              stepId: '5727b22737840125cf46b548f3adcb8d',
              source:
                '{\n  "afterTest": [],\n  "allowOptions": [],\n  "allowResults": [],\n  "argsRedefine": {},\n  "beforeTest": [],\n  "bindData": {},\n  "bindDescription": "",\n  "bindResults": {},\n  "bindSelectors": {},\n  "data": {},\n  "dataExt": [],\n  "debug": false,\n  "debugInfo": false,\n  "description": "Открываем боковое меню",\n  "descriptionError": "",\n  "descriptionExtend": [],\n  "disable": false,\n  "engineSupports": [],\n  "errorIf": "",\n  "errorIfResult": "",\n  "frame": "",\n  "if": "",\n  "inlineJS": "",\n  "logOptions": {\n    "logChildren": false\n  },\n  "name": "боковоеМенюОткрыть",\n  "needData": [],\n  "needSelectors": [],\n  "options": {},\n  "repeat": 1,\n  "runTest": [\n    {\n      "боковоеМенюДоступно": {\n        "description": "Удостовериться, что мы залогинены и доступно боковое меню"\n      }\n    },\n    {\n      "clickSelector": {\n        "description": "Кликаем на бутерброд бокового меню и ждем пока оно откроется",\n        "bindSelectors": {\n          "selector": "mainView.menuButton"\n        },\n        "options": {\n          "timeDelayAfterClick": 25\n        }\n      }\n    }\n  ],\n  "selectors": {},\n  "selectorsExt": [],\n  "tags": [],\n  "todo": "",\n  "type": "test",\n  "while": "",\n  "testFile": "C:\\\\DEV\\\\cashdesk-electron\\\\e2e-ppd\\\\tests\\\\Касса\\\\БоковоеМеню\\\\боковоеМенюОткрыть.yaml",\n  "breadcrumbs": [\n    "кейсыАвторизация",\n    "runTest[10].case",\n    "runTest[3].заблокироватьКассу",\n    "beforeTest[0].боковоеМенюОткрыть"\n  ],\n  "levelIndent": 3,\n  "stepId": "5727b22737840125cf46b548f3adcb8d"\n}',
            },
          ],
          description: 'Блокировка кассы',
          name: 'заблокироватьКассу',
          runTest: [
            {
              allowOptions: [
                'count',
                'timeDelayBeforeClick',
                'button',
                'logAfter',
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'timeDelayAfterClick',
                'waitingTime',
              ],
              bindSelectors: { selector: 'mainMenu.buttonBlockApp' },
              description: 'Клик на кнопку "Заблокировать кассу"',
              logOptions: { logChildren: false },
              name: 'clickSelector',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              runTest: [
                {
                  allowOptions: [
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'waitingTime',
                    'noThrow',
                  ],
                  bindDescription: "`Wait for: '${selector}'`",
                  description: 'Wait selector',
                  name: 'waitForSelector',
                  needSelectors: ['selector'],
                  type: 'atom',
                },
                { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                {
                  allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
                  bindData: { selectorNumber: 'selectorNumber' },
                  description: 'Click',
                  name: 'clickSelectorRaw',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
              ],
            },
            {
              allowOptions: ['waitingTime'],
              allowResults: ['exists'],
              bindSelectors: { selector: 'blockAppWindow.header' },
              description: 'Проверяем, что открылось окно "Заблокировать кассу", по заголовку',
              logOptions: { logChildren: false },
              name: 'checkSelector',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              runTest: [
                {
                  allowOptions: [
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'waitingTime',
                    'noThrow',
                  ],
                  bindDescription: "`Wait for: '${selector}'`",
                  bindSelectors: { selector: 'selector' },
                  name: 'waitForSelector',
                  needSelectors: ['selector'],
                  options: { noThrow: true, waitingTime: 1 },
                  type: 'atom',
                },
                { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                {
                  allowResults: ['exists'],
                  bindData: { selectorNumber: 'selectorNumber' },
                  bindSelectors: { selector: 'selector' },
                  name: 'checkSelectorRaw',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
              ],
              type: 'atom',
            },
            {
              allowOptions: [
                'count',
                'timeDelayBeforeClick',
                'button',
                'logAfter',
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'timeDelayAfterClick',
                'waitingTime',
              ],
              bindSelectors: { selector: 'blockAppWindow.buttonOK' },
              description: 'Соглашаемся с блокировкой кассы',
              logOptions: { logChildren: false },
              name: 'clickSelector',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              runTest: [
                {
                  allowOptions: [
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'waitingTime',
                    'noThrow',
                  ],
                  bindDescription: "`Wait for: '${selector}'`",
                  description: 'Wait selector',
                  name: 'waitForSelector',
                  needSelectors: ['selector'],
                  type: 'atom',
                },
                { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                {
                  allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
                  bindData: { selectorNumber: 'selectorNumber' },
                  description: 'Click',
                  name: 'clickSelectorRaw',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
              ],
            },
          ],
        },
        {
          bindDescription:
            "'Авторизуемся админом. Логин: ' + authData.loginElectron + ' Пароль: ' + authData.passwordElectron",
          data: { needSavePass: true },
          description: 'Aвторизация со вводом логина и установкой чекбокса сохранить пароль',
          logOptions: { logChildren: false },
          name: 'авторизацияСоВводомЛогина',
          needData: ['needSavePass?'],
          runTest: [
            {
              allowOptions: [
                'count',
                'timeDelayBeforeClick',
                'button',
                'logAfter',
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'timeDelayAfterClick',
                'waitingTime',
              ],
              bindSelectors: { selector: 'auth.selectPasswordEnter' },
              description: 'Открываем вкладку "По паролю"',
              logOptions: { logChildren: false },
              name: 'clickSelector',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              runTest: [
                {
                  allowOptions: [
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'waitingTime',
                    'noThrow',
                  ],
                  bindDescription: "`Wait for: '${selector}'`",
                  description: 'Wait selector',
                  name: 'waitForSelector',
                  needSelectors: ['selector'],
                  type: 'atom',
                },
                { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                {
                  allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
                  bindData: { selectorNumber: 'selectorNumber' },
                  description: 'Click',
                  name: 'clickSelectorRaw',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
              ],
            },
            {
              allowOptions: [
                'count',
                'timeDelayBeforeClick',
                'button',
                'logAfter',
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'timeDelayAfterClick',
                'waitingTime',
              ],
              bindSelectors: { selector: 'auth.showLoginInput' },
              description: "Нажимем на ссылку 'Кассир', чтобы увидеть поля ввода логина и пароля",
              logOptions: { logChildren: false },
              name: 'clickSelector',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              runTest: [
                {
                  allowOptions: [
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'waitingTime',
                    'noThrow',
                  ],
                  bindDescription: "`Wait for: '${selector}'`",
                  description: 'Wait selector',
                  name: 'waitForSelector',
                  needSelectors: ['selector'],
                  type: 'atom',
                },
                { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                {
                  allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
                  bindData: { selectorNumber: 'selectorNumber' },
                  description: 'Click',
                  name: 'clickSelectorRaw',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
              ],
            },
            {
              allowOptions: [
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'noClearInput',
                'waitingTime',
              ],
              bindData: { text: 'authData.loginElectron' },
              bindDescription: "'Вводим логин: ' + authData.loginElectron",
              bindSelectors: { selector: 'auth.inputLogin' },
              logOptions: { logChildren: false },
              name: 'typeInput',
              needData: ['text'],
              needSelectors: ['selector'],
              runTest: [
                {
                  allowOptions: [
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'waitingTime',
                    'noThrow',
                  ],
                  bindDescription: "`Wait for: '${selector}'`",
                  description: 'Wait selector',
                  name: 'waitForSelector',
                  needSelectors: ['selector'],
                  type: 'atom',
                },
                {
                  allowOptions: ['noClearInput'],
                  bindData: { text: 'text' },
                  bindDescription: "`Type text: '${text}' in input: '${selector}'`",
                  description: 'Type in selector',
                  name: 'typeInputRaw',
                  needData: ['text'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
              ],
            },
            {
              allowOptions: [
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'noClearInput',
                'waitingTime',
              ],
              bindData: { text: 'authData.passwordElectron' },
              bindDescription: "'Вводим пароль: ' + authData.passwordElectron",
              bindSelectors: { selector: 'auth.inputPassword' },
              logOptions: { logChildren: false },
              name: 'typeInput',
              needData: ['text'],
              needSelectors: ['selector'],
              runTest: [
                {
                  allowOptions: [
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'waitingTime',
                    'noThrow',
                  ],
                  bindDescription: "`Wait for: '${selector}'`",
                  description: 'Wait selector',
                  name: 'waitForSelector',
                  needSelectors: ['selector'],
                  type: 'atom',
                },
                {
                  allowOptions: ['noClearInput'],
                  bindData: { text: 'text' },
                  bindDescription: "`Type text: '${text}' in input: '${selector}'`",
                  description: 'Type in selector',
                  name: 'typeInputRaw',
                  needData: ['text'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
              ],
            },
            {
              allowOptions: [
                'count',
                'timeDelayBeforeClick',
                'button',
                'logAfter',
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'timeDelayAfterClick',
                'waitingTime',
              ],
              bindSelectors: { selector: 'auth.savePassCheckbox' },
              description: 'Ставим чекбокс "Сохранить пароль"',
              if: 'needSavePass !== null',
              logOptions: { logChildren: false },
              name: 'clickSelector',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              runTest: [
                {
                  allowOptions: [
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'waitingTime',
                    'noThrow',
                  ],
                  bindDescription: "`Wait for: '${selector}'`",
                  description: 'Wait selector',
                  name: 'waitForSelector',
                  needSelectors: ['selector'],
                  type: 'atom',
                },
                { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                {
                  allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
                  bindData: { selectorNumber: 'selectorNumber' },
                  description: 'Click',
                  name: 'clickSelectorRaw',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
              ],
            },
            {
              allowOptions: [
                'count',
                'timeDelayBeforeClick',
                'button',
                'logAfter',
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'timeDelayAfterClick',
                'waitingTime',
              ],
              bindSelectors: { selector: 'auth.inputSubmit' },
              description: 'Нажимаем кнопку логина',
              logOptions: { logChildren: false },
              name: 'clickSelector',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              runTest: [
                {
                  allowOptions: [
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'waitingTime',
                    'noThrow',
                  ],
                  bindDescription: "`Wait for: '${selector}'`",
                  description: 'Wait selector',
                  name: 'waitForSelector',
                  needSelectors: ['selector'],
                  type: 'atom',
                },
                { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                {
                  allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
                  bindData: { selectorNumber: 'selectorNumber' },
                  description: 'Click',
                  name: 'clickSelectorRaw',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
              ],
            },
          ],
        },
        {
          beforeTest: [
            {
              afterTest: [],
              allowOptions: [],
              allowResults: [],
              argsRedefine: {},
              beforeTest: [],
              bindData: {},
              bindDescription: '',
              bindResults: {},
              bindSelectors: {},
              data: {},
              dataExt: [],
              debug: false,
              debugInfo: false,
              description: 'Открываем боковое меню',
              descriptionError: '',
              descriptionExtend: [],
              disable: false,
              engineSupports: [],
              errorIf: '',
              errorIfResult: '',
              frame: '',
              if: '',
              inlineJS: '',
              logOptions: { logChildren: false },
              name: 'боковоеМенюОткрыть',
              needData: [],
              needSelectors: [],
              options: {},
              repeat: 1,
              runTest: [
                {
                  afterTest: [],
                  allowOptions: [],
                  allowResults: [],
                  argsRedefine: {},
                  beforeTest: [],
                  bindData: {},
                  bindDescription: '',
                  bindResults: {},
                  bindSelectors: {},
                  data: {},
                  dataExt: [],
                  debug: false,
                  debugInfo: false,
                  description: 'Удостовериться, что мы залогинены и доступно боковое меню',
                  descriptionError: '',
                  descriptionExtend: [],
                  disable: false,
                  engineSupports: [],
                  errorIf: '',
                  errorIfResult: '',
                  frame: '',
                  if: '',
                  inlineJS: '',
                  logOptions: {},
                  name: 'боковоеМенюДоступно',
                  needData: [],
                  needSelectors: [],
                  options: {},
                  repeat: 1,
                  runTest: [
                    {
                      type: 'atom',
                      name: 'todo',
                      logOptions: { textColor: 'white', backgroundColor: 'red' },
                      testFile:
                        'C:\\DEV\\cashdesk-electron\\e2e-ppd\\node_modules\\@puppedo\\atoms\\src\\blank\\todo.yaml',
                      description: 'Нужна проверка, что селектор не скрыт под другими селекторами, например, модалкой',
                      breadcrumbs: [
                        'кейсыАвторизация',
                        'runTest[10].case',
                        'runTest[5].заблокироватьКассу',
                        'beforeTest[0].боковоеМенюОткрыть',
                        'runTest[0].боковоеМенюДоступно',
                        'runTest[0].todo',
                      ],
                      levelIndent: 5,
                      stepId: '9398d2d818cba497ffc82b5715e51fc4',
                      source:
                        '{\n  "type": "atom",\n  "name": "todo",\n  "logOptions": {\n    "textColor": "white",\n    "backgroundColor": "red"\n  },\n  "testFile": "C:\\\\DEV\\\\cashdesk-electron\\\\e2e-ppd\\\\node_modules\\\\@puppedo\\\\atoms\\\\src\\\\blank\\\\todo.yaml",\n  "description": "Нужна проверка, что селектор не скрыт под другими селекторами, например, модалкой",\n  "breadcrumbs": [\n    "кейсыАвторизация",\n    "runTest[10].case",\n    "runTest[5].заблокироватьКассу",\n    "beforeTest[0].боковоеМенюОткрыть",\n    "runTest[0].боковоеМенюДоступно",\n    "runTest[0].todo"\n  ],\n  "levelIndent": 5,\n  "stepId": "9398d2d818cba497ffc82b5715e51fc4"\n}',
                    },
                    {
                      type: 'atom',
                      name: 'checkSelector',
                      needSelectors: ['selector'],
                      needData: ['selectorNumber?'],
                      allowOptions: ['waitingTime'],
                      allowResults: ['exists'],
                      logOptions: { logChildren: false },
                      runTest: [
                        {
                          type: 'atom',
                          name: 'waitForSelector',
                          bindDescription: "`Wait for: '${selector}'`",
                          needSelectors: ['selector'],
                          allowOptions: [
                            'hidden',
                            'visible',
                            'timeDelayBeforeWait',
                            'timeDelayAfterWait',
                            'waitingTime',
                            'noThrow',
                          ],
                          testFile:
                            'C:\\DEV\\cashdesk-electron\\e2e-ppd\\node_modules\\@puppedo\\atoms\\src\\main\\waitForSelector.yaml',
                          bindSelectors: { selector: 'selector' },
                          options: { noThrow: true, waitingTime: 1 },
                          breadcrumbs: [
                            'кейсыАвторизация',
                            'runTest[10].case',
                            'runTest[5].заблокироватьКассу',
                            'beforeTest[0].боковоеМенюОткрыть',
                            'runTest[0].боковоеМенюДоступно',
                            'runTest[1].checkSelector',
                            'runTest[0].waitForSelector',
                          ],
                          levelIndent: 6,
                          stepId: '4e9e1f3e38d4a50332dd3f8dad26b0a0',
                          source:
                            '{\n  "type": "atom",\n  "name": "waitForSelector",\n  "bindDescription": "`Wait for: \'${selector}\'`",\n  "needSelectors": [\n    "selector"\n  ],\n  "allowOptions": [\n    "hidden",\n    "visible",\n    "timeDelayBeforeWait",\n    "timeDelayAfterWait",\n    "waitingTime",\n    "noThrow"\n  ],\n  "testFile": "C:\\\\DEV\\\\cashdesk-electron\\\\e2e-ppd\\\\node_modules\\\\@puppedo\\\\atoms\\\\src\\\\main\\\\waitForSelector.yaml",\n  "bindSelectors": {\n    "selector": "selector"\n  },\n  "options": {\n    "noThrow": true,\n    "waitingTime": 1\n  },\n  "breadcrumbs": [\n    "кейсыАвторизация",\n    "runTest[10].case",\n    "runTest[5].заблокироватьКассу",\n    "beforeTest[0].боковоеМенюОткрыть",\n    "runTest[0].боковоеМенюДоступно",\n    "runTest[1].checkSelector",\n    "runTest[0].waitForSelector"\n  ],\n  "levelIndent": 6,\n  "stepId": "4e9e1f3e38d4a50332dd3f8dad26b0a0"\n}',
                        },
                        {
                          type: 'atom',
                          name: 'blank',
                          testFile:
                            'C:\\DEV\\cashdesk-electron\\e2e-ppd\\node_modules\\@puppedo\\atoms\\src\\blank\\blank.yaml',
                          if: 'selectorNumber === null',
                          const: { selectorNumber: 0 },
                          breadcrumbs: [
                            'кейсыАвторизация',
                            'runTest[10].case',
                            'runTest[5].заблокироватьКассу',
                            'beforeTest[0].боковоеМенюОткрыть',
                            'runTest[0].боковоеМенюДоступно',
                            'runTest[1].checkSelector',
                            'runTest[1].blank',
                          ],
                          levelIndent: 6,
                          stepId: '76a5638d96e1031bcc4a9d307de29f30',
                          source:
                            '{\n  "type": "atom",\n  "name": "blank",\n  "testFile": "C:\\\\DEV\\\\cashdesk-electron\\\\e2e-ppd\\\\node_modules\\\\@puppedo\\\\atoms\\\\src\\\\blank\\\\blank.yaml",\n  "if": "selectorNumber === null",\n  "const": {\n    "selectorNumber": 0\n  },\n  "breadcrumbs": [\n    "кейсыАвторизация",\n    "runTest[10].case",\n    "runTest[5].заблокироватьКассу",\n    "beforeTest[0].боковоеМенюОткрыть",\n    "runTest[0].боковоеМенюДоступно",\n    "runTest[1].checkSelector",\n    "runTest[1].blank"\n  ],\n  "levelIndent": 6,\n  "stepId": "76a5638d96e1031bcc4a9d307de29f30"\n}',
                        },
                        {
                          type: 'atom',
                          name: 'checkSelectorRaw',
                          needSelectors: ['selector'],
                          needData: ['selectorNumber?'],
                          allowResults: ['exists'],
                          testFile:
                            'C:\\DEV\\cashdesk-electron\\e2e-ppd\\node_modules\\@puppedo\\atoms\\src\\checks\\checkSelectorRaw.yaml',
                          bindSelectors: { selector: 'selector' },
                          bindData: { selectorNumber: 'selectorNumber' },
                          result: { exists: 'exists' },
                          breadcrumbs: [
                            'кейсыАвторизация',
                            'runTest[10].case',
                            'runTest[5].заблокироватьКассу',
                            'beforeTest[0].боковоеМенюОткрыть',
                            'runTest[0].боковоеМенюДоступно',
                            'runTest[1].checkSelector',
                            'runTest[2].checkSelectorRaw',
                          ],
                          levelIndent: 6,
                          stepId: '909a4984033cbc28aa1d0300eaf7cfa1',
                          source:
                            '{\n  "type": "atom",\n  "name": "checkSelectorRaw",\n  "needSelectors": [\n    "selector"\n  ],\n  "needData": [\n    "selectorNumber?"\n  ],\n  "allowResults": [\n    "exists"\n  ],\n  "testFile": "C:\\\\DEV\\\\cashdesk-electron\\\\e2e-ppd\\\\node_modules\\\\@puppedo\\\\atoms\\\\src\\\\checks\\\\checkSelectorRaw.yaml",\n  "bindSelectors": {\n    "selector": "selector"\n  },\n  "bindData": {\n    "selectorNumber": "selectorNumber"\n  },\n  "result": {\n    "exists": "exists"\n  },\n  "breadcrumbs": [\n    "кейсыАвторизация",\n    "runTest[10].case",\n    "runTest[5].заблокироватьКассу",\n    "beforeTest[0].боковоеМенюОткрыть",\n    "runTest[0].боковоеМенюДоступно",\n    "runTest[1].checkSelector",\n    "runTest[2].checkSelectorRaw"\n  ],\n  "levelIndent": 6,\n  "stepId": "909a4984033cbc28aa1d0300eaf7cfa1"\n}',
                        },
                      ],
                      testFile:
                        'C:\\DEV\\cashdesk-electron\\e2e-ppd\\node_modules\\@puppedo\\atoms\\src\\checks\\checkSelector.yaml',
                      description: 'Проверяем доступность селектора бокового меню',
                      bindSelectors: { selector: 'mainView.menuButton' },
                      options: { waitingTime: 500 },
                      errorInResult: '!exists',
                      breadcrumbs: [
                        'кейсыАвторизация',
                        'runTest[10].case',
                        'runTest[5].заблокироватьКассу',
                        'beforeTest[0].боковоеМенюОткрыть',
                        'runTest[0].боковоеМенюДоступно',
                        'runTest[1].checkSelector',
                      ],
                      levelIndent: 5,
                      stepId: 'e4dda62e7dba4017f775110fda5407f6',
                      source:
                        '{\n  "type": "atom",\n  "name": "checkSelector",\n  "needSelectors": [\n    "selector"\n  ],\n  "needData": [\n    "selectorNumber?"\n  ],\n  "allowOptions": [\n    "waitingTime"\n  ],\n  "allowResults": [\n    "exists"\n  ],\n  "logOptions": {\n    "logChildren": false\n  },\n  "runTest": [\n    {\n      "waitForSelector": {\n        "bindSelectors": {\n          "selector": "selector"\n        },\n        "options": {\n          "noThrow": true,\n          "waitingTime": 1\n        }\n      }\n    },\n    {\n      "blank": {\n        "if": "selectorNumber === null",\n        "const": {\n          "selectorNumber": 0\n        }\n      }\n    },\n    {\n      "checkSelectorRaw": {\n        "bindSelectors": {\n          "selector": "selector"\n        },\n        "bindData": {\n          "selectorNumber": "selectorNumber"\n        },\n        "result": {\n          "exists": "exists"\n        }\n      }\n    }\n  ],\n  "testFile": "C:\\\\DEV\\\\cashdesk-electron\\\\e2e-ppd\\\\node_modules\\\\@puppedo\\\\atoms\\\\src\\\\checks\\\\checkSelector.yaml",\n  "description": "Проверяем доступность селектора бокового меню",\n  "bindSelectors": {\n    "selector": "mainView.menuButton"\n  },\n  "options": {\n    "waitingTime": 500\n  },\n  "errorInResult": "!exists",\n  "breadcrumbs": [\n    "кейсыАвторизация",\n    "runTest[10].case",\n    "runTest[5].заблокироватьКассу",\n    "beforeTest[0].боковоеМенюОткрыть",\n    "runTest[0].боковоеМенюДоступно",\n    "runTest[1].checkSelector"\n  ],\n  "levelIndent": 5,\n  "stepId": "e4dda62e7dba4017f775110fda5407f6"\n}',
                    },
                  ],
                  selectors: {},
                  selectorsExt: [],
                  tags: [],
                  todo: '',
                  type: 'test',
                  while: '',
                  testFile: 'C:\\DEV\\cashdesk-electron\\e2e-ppd\\tests\\Касса\\БоковоеМеню\\боковоеМенюДоступно.yaml',
                  breadcrumbs: [
                    'кейсыАвторизация',
                    'runTest[10].case',
                    'runTest[5].заблокироватьКассу',
                    'beforeTest[0].боковоеМенюОткрыть',
                    'runTest[0].боковоеМенюДоступно',
                  ],
                  levelIndent: 4,
                  stepId: 'd695c77ed71c0209eb556a99f1d2692d',
                  source:
                    '{\n  "afterTest": [],\n  "allowOptions": [],\n  "allowResults": [],\n  "argsRedefine": {},\n  "beforeTest": [],\n  "bindData": {},\n  "bindDescription": "",\n  "bindResults": {},\n  "bindSelectors": {},\n  "data": {},\n  "dataExt": [],\n  "debug": false,\n  "debugInfo": false,\n  "description": "Удостовериться, что мы залогинены и доступно боковое меню",\n  "descriptionError": "",\n  "descriptionExtend": [],\n  "disable": false,\n  "engineSupports": [],\n  "errorIf": "",\n  "errorIfResult": "",\n  "frame": "",\n  "if": "",\n  "inlineJS": "",\n  "logOptions": {},\n  "name": "боковоеМенюДоступно",\n  "needData": [],\n  "needSelectors": [],\n  "options": {},\n  "repeat": 1,\n  "runTest": [\n    {\n      "todo": {\n        "description": "Нужна проверка, что селектор не скрыт под другими селекторами, например, модалкой"\n      }\n    },\n    {\n      "checkSelector": {\n        "description": "Проверяем доступность селектора бокового меню",\n        "bindSelectors": {\n          "selector": "mainView.menuButton"\n        },\n        "options": {\n          "waitingTime": 500\n        },\n        "errorInResult": "!exists"\n      }\n    }\n  ],\n  "selectors": {},\n  "selectorsExt": [],\n  "tags": [],\n  "todo": "",\n  "type": "test",\n  "while": "",\n  "testFile": "C:\\\\DEV\\\\cashdesk-electron\\\\e2e-ppd\\\\tests\\\\Касса\\\\БоковоеМеню\\\\боковоеМенюДоступно.yaml",\n  "breadcrumbs": [\n    "кейсыАвторизация",\n    "runTest[10].case",\n    "runTest[5].заблокироватьКассу",\n    "beforeTest[0].боковоеМенюОткрыть",\n    "runTest[0].боковоеМенюДоступно"\n  ],\n  "levelIndent": 4,\n  "stepId": "d695c77ed71c0209eb556a99f1d2692d"\n}',
                },
                {
                  afterTest: [],
                  allowOptions: [
                    'count',
                    'timeDelayBeforeClick',
                    'button',
                    'logAfter',
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'timeDelayAfterClick',
                    'waitingTime',
                  ],
                  allowResults: [],
                  argsRedefine: {},
                  beforeTest: [],
                  bindData: {},
                  bindDescription: '',
                  bindResults: {},
                  bindSelectors: { selector: 'mainView.menuButton' },
                  data: {},
                  dataExt: [],
                  debug: false,
                  debugInfo: false,
                  description: 'Кликаем на бутерброд бокового меню и ждем пока оно откроется',
                  descriptionError: '',
                  descriptionExtend: [],
                  disable: false,
                  engineSupports: [],
                  errorIf: '',
                  errorIfResult: '',
                  frame: '',
                  if: '',
                  inlineJS: '',
                  logOptions: { logChildren: false },
                  name: 'clickSelector',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  options: { timeDelayAfterClick: 25 },
                  repeat: 1,
                  runTest: [
                    {
                      type: 'atom',
                      name: 'waitForSelector',
                      bindDescription: "`Wait for: '${selector}'`",
                      needSelectors: ['selector'],
                      allowOptions: [
                        'hidden',
                        'visible',
                        'timeDelayBeforeWait',
                        'timeDelayAfterWait',
                        'waitingTime',
                        'noThrow',
                      ],
                      testFile:
                        'C:\\DEV\\cashdesk-electron\\e2e-ppd\\node_modules\\@puppedo\\atoms\\src\\main\\waitForSelector.yaml',
                      description: 'Wait selector',
                      bindSelector: { selector: 'selector' },
                      breadcrumbs: [
                        'кейсыАвторизация',
                        'runTest[10].case',
                        'runTest[5].заблокироватьКассу',
                        'beforeTest[0].боковоеМенюОткрыть',
                        'runTest[1].clickSelector',
                        'runTest[0].waitForSelector',
                      ],
                      levelIndent: 5,
                      stepId: 'ccefba92b42d095dfc602439ebbb67b0',
                      source:
                        '{\n  "type": "atom",\n  "name": "waitForSelector",\n  "bindDescription": "`Wait for: \'${selector}\'`",\n  "needSelectors": [\n    "selector"\n  ],\n  "allowOptions": [\n    "hidden",\n    "visible",\n    "timeDelayBeforeWait",\n    "timeDelayAfterWait",\n    "waitingTime",\n    "noThrow"\n  ],\n  "testFile": "C:\\\\DEV\\\\cashdesk-electron\\\\e2e-ppd\\\\node_modules\\\\@puppedo\\\\atoms\\\\src\\\\main\\\\waitForSelector.yaml",\n  "description": "Wait selector",\n  "bindSelector": {\n    "selector": "selector"\n  },\n  "breadcrumbs": [\n    "кейсыАвторизация",\n    "runTest[10].case",\n    "runTest[5].заблокироватьКассу",\n    "beforeTest[0].боковоеМенюОткрыть",\n    "runTest[1].clickSelector",\n    "runTest[0].waitForSelector"\n  ],\n  "levelIndent": 5,\n  "stepId": "ccefba92b42d095dfc602439ebbb67b0"\n}',
                    },
                    {
                      type: 'atom',
                      name: 'blank',
                      testFile:
                        'C:\\DEV\\cashdesk-electron\\e2e-ppd\\node_modules\\@puppedo\\atoms\\src\\blank\\blank.yaml',
                      if: 'selectorNumber === null',
                      const: { selectorNumber: 0 },
                      breadcrumbs: [
                        'кейсыАвторизация',
                        'runTest[10].case',
                        'runTest[5].заблокироватьКассу',
                        'beforeTest[0].боковоеМенюОткрыть',
                        'runTest[1].clickSelector',
                        'runTest[1].blank',
                      ],
                      levelIndent: 5,
                      stepId: 'c28bd0c6250dec083ebe0907ac77b37b',
                      source:
                        '{\n  "type": "atom",\n  "name": "blank",\n  "testFile": "C:\\\\DEV\\\\cashdesk-electron\\\\e2e-ppd\\\\node_modules\\\\@puppedo\\\\atoms\\\\src\\\\blank\\\\blank.yaml",\n  "if": "selectorNumber === null",\n  "const": {\n    "selectorNumber": 0\n  },\n  "breadcrumbs": [\n    "кейсыАвторизация",\n    "runTest[10].case",\n    "runTest[5].заблокироватьКассу",\n    "beforeTest[0].боковоеМенюОткрыть",\n    "runTest[1].clickSelector",\n    "runTest[1].blank"\n  ],\n  "levelIndent": 5,\n  "stepId": "c28bd0c6250dec083ebe0907ac77b37b"\n}',
                    },
                    {
                      type: 'atom',
                      name: 'clickSelectorRaw',
                      bindDescriprion: "`Click selector: '${selector}'`",
                      needSelectors: ['selector'],
                      needData: ['selectorNumber?'],
                      allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
                      testFile:
                        'C:\\DEV\\cashdesk-electron\\e2e-ppd\\node_modules\\@puppedo\\atoms\\src\\main\\clickSelectorRaw.yaml',
                      description: 'Click',
                      bindData: { selectorNumber: 'selectorNumber' },
                      bindSelector: { selector: 'selector' },
                      breadcrumbs: [
                        'кейсыАвторизация',
                        'runTest[10].case',
                        'runTest[5].заблокироватьКассу',
                        'beforeTest[0].боковоеМенюОткрыть',
                        'runTest[1].clickSelector',
                        'runTest[2].clickSelectorRaw',
                      ],
                      levelIndent: 5,
                      stepId: '2cc8508022fbdc5c33c14130fe192744',
                      source:
                        '{\n  "type": "atom",\n  "name": "clickSelectorRaw",\n  "bindDescriprion": "`Click selector: \'${selector}\'`",\n  "needSelectors": [\n    "selector"\n  ],\n  "needData": [\n    "selectorNumber?"\n  ],\n  "allowOptions": [\n    "count",\n    "timeDelayBeforeClick",\n    "button",\n    "logAfter",\n    "timeDelayAfterClick"\n  ],\n  "testFile": "C:\\\\DEV\\\\cashdesk-electron\\\\e2e-ppd\\\\node_modules\\\\@puppedo\\\\atoms\\\\src\\\\main\\\\clickSelectorRaw.yaml",\n  "description": "Click",\n  "bindData": {\n    "selectorNumber": "selectorNumber"\n  },\n  "bindSelector": {\n    "selector": "selector"\n  },\n  "breadcrumbs": [\n    "кейсыАвторизация",\n    "runTest[10].case",\n    "runTest[5].заблокироватьКассу",\n    "beforeTest[0].боковоеМенюОткрыть",\n    "runTest[1].clickSelector",\n    "runTest[2].clickSelectorRaw"\n  ],\n  "levelIndent": 5,\n  "stepId": "2cc8508022fbdc5c33c14130fe192744"\n}',
                    },
                  ],
                  selectors: {},
                  selectorsExt: [],
                  tags: [],
                  todo: '',
                  type: 'test',
                  while: '',
                  bindDescriprion: "`Wait selector: '${selector}' and click`",
                  testFile:
                    'C:\\DEV\\cashdesk-electron\\e2e-ppd\\node_modules\\@puppedo\\atoms\\src\\main\\clickSelector.yaml',
                  breadcrumbs: [
                    'кейсыАвторизация',
                    'runTest[10].case',
                    'runTest[5].заблокироватьКассу',
                    'beforeTest[0].боковоеМенюОткрыть',
                    'runTest[1].clickSelector',
                  ],
                  levelIndent: 4,
                  stepId: '7e57a8afc0a53a5637a6e15c249a73c1',
                  source:
                    '{\n  "afterTest": [],\n  "allowOptions": [\n    "count",\n    "timeDelayBeforeClick",\n    "button",\n    "logAfter",\n    "hidden",\n    "visible",\n    "timeDelayBeforeWait",\n    "timeDelayAfterWait",\n    "timeDelayAfterClick",\n    "waitingTime"\n  ],\n  "allowResults": [],\n  "argsRedefine": {},\n  "beforeTest": [],\n  "bindData": {},\n  "bindDescription": "",\n  "bindResults": {},\n  "bindSelectors": {\n    "selector": "mainView.menuButton"\n  },\n  "data": {},\n  "dataExt": [],\n  "debug": false,\n  "debugInfo": false,\n  "description": "Кликаем на бутерброд бокового меню и ждем пока оно откроется",\n  "descriptionError": "",\n  "descriptionExtend": [],\n  "disable": false,\n  "engineSupports": [],\n  "errorIf": "",\n  "errorIfResult": "",\n  "frame": "",\n  "if": "",\n  "inlineJS": "",\n  "logOptions": {\n    "logChildren": false\n  },\n  "name": "clickSelector",\n  "needData": [\n    "selectorNumber?"\n  ],\n  "needSelectors": [\n    "selector"\n  ],\n  "options": {\n    "timeDelayAfterClick": 25\n  },\n  "repeat": 1,\n  "runTest": [\n    {\n      "waitForSelector": {\n        "description": "Wait selector",\n        "bindSelector": {\n          "selector": "selector"\n        }\n      }\n    },\n    {\n      "blank": {\n        "if": "selectorNumber === null",\n        "const": {\n          "selectorNumber": 0\n        }\n      }\n    },\n    {\n      "clickSelectorRaw": {\n        "description": "Click",\n        "bindData": {\n          "selectorNumber": "selectorNumber"\n        },\n        "bindSelector": {\n          "selector": "selector"\n        }\n      }\n    }\n  ],\n  "selectors": {},\n  "selectorsExt": [],\n  "tags": [],\n  "todo": "",\n  "type": "test",\n  "while": "",\n  "bindDescriprion": "`Wait selector: \'${selector}\' and click`",\n  "testFile": "C:\\\\DEV\\\\cashdesk-electron\\\\e2e-ppd\\\\node_modules\\\\@puppedo\\\\atoms\\\\src\\\\main\\\\clickSelector.yaml",\n  "breadcrumbs": [\n    "кейсыАвторизация",\n    "runTest[10].case",\n    "runTest[5].заблокироватьКассу",\n    "beforeTest[0].боковоеМенюОткрыть",\n    "runTest[1].clickSelector"\n  ],\n  "levelIndent": 4,\n  "stepId": "7e57a8afc0a53a5637a6e15c249a73c1"\n}',
                },
              ],
              selectors: {},
              selectorsExt: [],
              tags: [],
              todo: '',
              type: 'test',
              while: '',
              testFile: 'C:\\DEV\\cashdesk-electron\\e2e-ppd\\tests\\Касса\\БоковоеМеню\\боковоеМенюОткрыть.yaml',
              breadcrumbs: [
                'кейсыАвторизация',
                'runTest[10].case',
                'runTest[5].заблокироватьКассу',
                'beforeTest[0].боковоеМенюОткрыть',
              ],
              levelIndent: 3,
              stepId: 'f80bfc884ac2b3a113034f18a7503252',
              source:
                '{\n  "afterTest": [],\n  "allowOptions": [],\n  "allowResults": [],\n  "argsRedefine": {},\n  "beforeTest": [],\n  "bindData": {},\n  "bindDescription": "",\n  "bindResults": {},\n  "bindSelectors": {},\n  "data": {},\n  "dataExt": [],\n  "debug": false,\n  "debugInfo": false,\n  "description": "Открываем боковое меню",\n  "descriptionError": "",\n  "descriptionExtend": [],\n  "disable": false,\n  "engineSupports": [],\n  "errorIf": "",\n  "errorIfResult": "",\n  "frame": "",\n  "if": "",\n  "inlineJS": "",\n  "logOptions": {\n    "logChildren": false\n  },\n  "name": "боковоеМенюОткрыть",\n  "needData": [],\n  "needSelectors": [],\n  "options": {},\n  "repeat": 1,\n  "runTest": [\n    {\n      "боковоеМенюДоступно": {\n        "description": "Удостовериться, что мы залогинены и доступно боковое меню"\n      }\n    },\n    {\n      "clickSelector": {\n        "description": "Кликаем на бутерброд бокового меню и ждем пока оно откроется",\n        "bindSelectors": {\n          "selector": "mainView.menuButton"\n        },\n        "options": {\n          "timeDelayAfterClick": 25\n        }\n      }\n    }\n  ],\n  "selectors": {},\n  "selectorsExt": [],\n  "tags": [],\n  "todo": "",\n  "type": "test",\n  "while": "",\n  "testFile": "C:\\\\DEV\\\\cashdesk-electron\\\\e2e-ppd\\\\tests\\\\Касса\\\\БоковоеМеню\\\\боковоеМенюОткрыть.yaml",\n  "breadcrumbs": [\n    "кейсыАвторизация",\n    "runTest[10].case",\n    "runTest[5].заблокироватьКассу",\n    "beforeTest[0].боковоеМенюОткрыть"\n  ],\n  "levelIndent": 3,\n  "stepId": "f80bfc884ac2b3a113034f18a7503252"\n}',
            },
          ],
          description: 'Повторная блокировка кассы',
          logOptions: { logChildren: false },
          name: 'заблокироватьКассу',
          runTest: [
            {
              allowOptions: [
                'count',
                'timeDelayBeforeClick',
                'button',
                'logAfter',
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'timeDelayAfterClick',
                'waitingTime',
              ],
              bindSelectors: { selector: 'mainMenu.buttonBlockApp' },
              description: 'Клик на кнопку "Заблокировать кассу"',
              logOptions: { logChildren: false },
              name: 'clickSelector',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              runTest: [
                {
                  allowOptions: [
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'waitingTime',
                    'noThrow',
                  ],
                  bindDescription: "`Wait for: '${selector}'`",
                  description: 'Wait selector',
                  name: 'waitForSelector',
                  needSelectors: ['selector'],
                  type: 'atom',
                },
                { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                {
                  allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
                  bindData: { selectorNumber: 'selectorNumber' },
                  description: 'Click',
                  name: 'clickSelectorRaw',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
              ],
            },
            {
              allowOptions: ['waitingTime'],
              allowResults: ['exists'],
              bindSelectors: { selector: 'blockAppWindow.header' },
              description: 'Проверяем, что открылось окно "Заблокировать кассу", по заголовку',
              logOptions: { logChildren: false },
              name: 'checkSelector',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              runTest: [
                {
                  allowOptions: [
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'waitingTime',
                    'noThrow',
                  ],
                  bindDescription: "`Wait for: '${selector}'`",
                  bindSelectors: { selector: 'selector' },
                  name: 'waitForSelector',
                  needSelectors: ['selector'],
                  options: { noThrow: true, waitingTime: 1 },
                  type: 'atom',
                },
                { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                {
                  allowResults: ['exists'],
                  bindData: { selectorNumber: 'selectorNumber' },
                  bindSelectors: { selector: 'selector' },
                  name: 'checkSelectorRaw',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
              ],
              type: 'atom',
            },
            {
              allowOptions: [
                'count',
                'timeDelayBeforeClick',
                'button',
                'logAfter',
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'timeDelayAfterClick',
                'waitingTime',
              ],
              bindSelectors: { selector: 'blockAppWindow.buttonOK' },
              description: 'Соглашаемся с блокировкой кассы',
              logOptions: { logChildren: false },
              name: 'clickSelector',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              runTest: [
                {
                  allowOptions: [
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'waitingTime',
                    'noThrow',
                  ],
                  bindDescription: "`Wait for: '${selector}'`",
                  description: 'Wait selector',
                  name: 'waitForSelector',
                  needSelectors: ['selector'],
                  type: 'atom',
                },
                { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                {
                  allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
                  bindData: { selectorNumber: 'selectorNumber' },
                  description: 'Click',
                  name: 'clickSelectorRaw',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
              ],
            },
          ],
        },
        {
          description: 'Авторизация с сохраненным паролем',
          name: 'авторизацияССохраненнымПаролем',
          runTest: [
            {
              allowOptions: [
                'count',
                'timeDelayBeforeClick',
                'button',
                'logAfter',
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'timeDelayAfterClick',
                'waitingTime',
              ],
              bindSelectors: { selector: 'auth.selectPasswordEnter' },
              description: 'Открываем вкладку "По паролю"',
              logOptions: { logChildren: false },
              name: 'clickSelector',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              runTest: [
                {
                  allowOptions: [
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'waitingTime',
                    'noThrow',
                  ],
                  bindDescription: "`Wait for: '${selector}'`",
                  description: 'Wait selector',
                  name: 'waitForSelector',
                  needSelectors: ['selector'],
                  type: 'atom',
                },
                { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                {
                  allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
                  bindData: { selectorNumber: 'selectorNumber' },
                  description: 'Click',
                  name: 'clickSelectorRaw',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
              ],
            },
            {
              allowOptions: [
                'count',
                'timeDelayBeforeClick',
                'button',
                'logAfter',
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'timeDelayAfterClick',
                'waitingTime',
              ],
              bindSelectors: { selector: 'auth.showLoginInput' },
              description: "Нажимем на ссылку 'Кассир', чтобы увидеть поля ввода логина и пароля",
              logOptions: { logChildren: false },
              name: 'clickSelector',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              runTest: [
                {
                  allowOptions: [
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'waitingTime',
                    'noThrow',
                  ],
                  bindDescription: "`Wait for: '${selector}'`",
                  description: 'Wait selector',
                  name: 'waitForSelector',
                  needSelectors: ['selector'],
                  type: 'atom',
                },
                { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                {
                  allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
                  bindData: { selectorNumber: 'selectorNumber' },
                  description: 'Click',
                  name: 'clickSelectorRaw',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
              ],
            },
            {
              allowOptions: [
                'count',
                'timeDelayBeforeClick',
                'button',
                'logAfter',
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'timeDelayAfterClick',
                'waitingTime',
              ],
              bindSelectors: { selector: 'auth.selectUserIcon' },
              description: 'Нажимем на кнопку для показа списка пользователей',
              logOptions: { logChildren: false },
              name: 'clickSelector',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              runTest: [
                {
                  allowOptions: [
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'waitingTime',
                    'noThrow',
                  ],
                  bindDescription: "`Wait for: '${selector}'`",
                  description: 'Wait selector',
                  name: 'waitForSelector',
                  needSelectors: ['selector'],
                  type: 'atom',
                },
                { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                {
                  allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
                  bindData: { selectorNumber: 'selectorNumber' },
                  description: 'Click',
                  name: 'clickSelectorRaw',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
              ],
            },
            {
              allowOptions: [
                'count',
                'timeDelayBeforeClick',
                'button',
                'logAfter',
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'timeDelayAfterClick',
                'waitingTime',
              ],
              bindSelectors: { selector: 'auth.adminUserLine' },
              description: 'Нажимем на пользователя у которого сохранен пароль',
              logOptions: { logChildren: false },
              name: 'clickSelector',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              runTest: [
                {
                  allowOptions: [
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'waitingTime',
                    'noThrow',
                  ],
                  bindDescription: "`Wait for: '${selector}'`",
                  description: 'Wait selector',
                  name: 'waitForSelector',
                  needSelectors: ['selector'],
                  type: 'atom',
                },
                { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                {
                  allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
                  bindData: { selectorNumber: 'selectorNumber' },
                  description: 'Click',
                  name: 'clickSelectorRaw',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
              ],
            },
            {
              allowOptions: [
                'count',
                'timeDelayBeforeClick',
                'button',
                'logAfter',
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'timeDelayAfterClick',
                'waitingTime',
              ],
              bindSelectors: { selector: 'auth.inputSubmit' },
              description: 'Нажимаем кнопку логина',
              logOptions: { logChildren: false },
              name: 'clickSelector',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              runTest: [
                {
                  allowOptions: [
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'waitingTime',
                    'noThrow',
                  ],
                  bindDescription: "`Wait for: '${selector}'`",
                  description: 'Wait selector',
                  name: 'waitForSelector',
                  needSelectors: ['selector'],
                  type: 'atom',
                },
                { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                {
                  allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
                  bindData: { selectorNumber: 'selectorNumber' },
                  description: 'Click',
                  name: 'clickSelectorRaw',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
              ],
            },
          ],
        },
        {
          bindDescription: '`❌ настройку: ${setting ? setting : JSON.stringify(settingsArray || [])}`',
          data: { setting: ['Разрешить сохранять пароли (небезопасно)'] },
          description: 'Отключим настройку сохранить пароль',
          logOptions: { logChildren: false },
          name: 'отключитьНастройку',
          needData: ['setting?', 'settingsArray?', 'alreadyOpenSettings?'],
          runTest: [
            {
              description: 'Откроем окно настроек в нужной вкладке',
              if: 'alreadyOpenSettings === null',
              logOptions: { logChildren: false },
              name: 'открытьНастройки',
              needData: ['tabName?'],
              runTest: [
                { name: 'blank', type: 'atom' },
                {
                  description: 'Открываем боковое меню',
                  logOptions: { logChildren: false },
                  name: 'боковоеМенюОткрыть',
                  runTest: [
                    {
                      description: 'Удостовериться, что мы залогинены и доступно боковое меню',
                      name: 'боковоеМенюДоступно',
                      runTest: [
                        {
                          description:
                            'Нужна проверка, что селектор не скрыт под другими селекторами, например, модалкой',
                          logOptions: { textColor: 'white', backgroundColor: 'red' },
                          name: 'todo',
                          type: 'atom',
                        },
                        {
                          allowOptions: ['waitingTime'],
                          allowResults: ['exists'],
                          bindSelectors: { selector: 'mainView.menuButton' },
                          description: 'Проверяем доступность селектора бокового меню',
                          logOptions: { logChildren: false },
                          name: 'checkSelector',
                          needData: ['selectorNumber?'],
                          needSelectors: ['selector'],
                          options: { waitingTime: 500 },
                          runTest: [
                            {
                              allowOptions: [
                                'hidden',
                                'visible',
                                'timeDelayBeforeWait',
                                'timeDelayAfterWait',
                                'waitingTime',
                                'noThrow',
                              ],
                              bindDescription: "`Wait for: '${selector}'`",
                              bindSelectors: { selector: 'selector' },
                              name: 'waitForSelector',
                              needSelectors: ['selector'],
                              options: { noThrow: true, waitingTime: 1 },
                              type: 'atom',
                            },
                            { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                            {
                              allowResults: ['exists'],
                              bindData: { selectorNumber: 'selectorNumber' },
                              bindSelectors: { selector: 'selector' },
                              name: 'checkSelectorRaw',
                              needData: ['selectorNumber?'],
                              needSelectors: ['selector'],
                              type: 'atom',
                            },
                          ],
                          type: 'atom',
                        },
                      ],
                    },
                    {
                      allowOptions: [
                        'count',
                        'timeDelayBeforeClick',
                        'button',
                        'logAfter',
                        'hidden',
                        'visible',
                        'timeDelayBeforeWait',
                        'timeDelayAfterWait',
                        'timeDelayAfterClick',
                        'waitingTime',
                      ],
                      bindSelectors: { selector: 'mainView.menuButton' },
                      description: 'Кликаем на бутерброд бокового меню и ждем пока оно откроется',
                      logOptions: { logChildren: false },
                      name: 'clickSelector',
                      needData: ['selectorNumber?'],
                      needSelectors: ['selector'],
                      options: { timeDelayAfterClick: 25 },
                      runTest: [
                        {
                          allowOptions: [
                            'hidden',
                            'visible',
                            'timeDelayBeforeWait',
                            'timeDelayAfterWait',
                            'waitingTime',
                            'noThrow',
                          ],
                          bindDescription: "`Wait for: '${selector}'`",
                          description: 'Wait selector',
                          name: 'waitForSelector',
                          needSelectors: ['selector'],
                          type: 'atom',
                        },
                        { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                        {
                          allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
                          bindData: { selectorNumber: 'selectorNumber' },
                          description: 'Click',
                          name: 'clickSelectorRaw',
                          needData: ['selectorNumber?'],
                          needSelectors: ['selector'],
                          type: 'atom',
                        },
                      ],
                    },
                  ],
                },
                {
                  allowOptions: [
                    'count',
                    'timeDelayBeforeClick',
                    'button',
                    'logAfter',
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'timeDelayAfterClick',
                    'waitingTime',
                  ],
                  bindSelectors: { selector: 'mainMenu.buttonSettings' },
                  description: 'Нажимаем "Настройки"',
                  logOptions: { logChildren: false },
                  name: 'clickSelector',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  runTest: [
                    {
                      allowOptions: [
                        'hidden',
                        'visible',
                        'timeDelayBeforeWait',
                        'timeDelayAfterWait',
                        'waitingTime',
                        'noThrow',
                      ],
                      bindDescription: "`Wait for: '${selector}'`",
                      description: 'Wait selector',
                      name: 'waitForSelector',
                      needSelectors: ['selector'],
                      type: 'atom',
                    },
                    { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                    {
                      allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
                      bindData: { selectorNumber: 'selectorNumber' },
                      description: 'Click',
                      name: 'clickSelectorRaw',
                      needData: ['selectorNumber?'],
                      needSelectors: ['selector'],
                      type: 'atom',
                    },
                  ],
                },
                {
                  allowOptions: [
                    'count',
                    'timeDelayBeforeClick',
                    'button',
                    'logAfter',
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'timeDelayAfterClick',
                    'waitingTime',
                  ],
                  bindDescription: '`Переходим на вкладку: ${tabName}`',
                  bindSelectors: { selector: 'settingsWindow.settingTab.replace("__text__", tabName)' },
                  logOptions: { logChildren: false },
                  name: 'clickSelector',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  runTest: [
                    {
                      allowOptions: [
                        'hidden',
                        'visible',
                        'timeDelayBeforeWait',
                        'timeDelayAfterWait',
                        'waitingTime',
                        'noThrow',
                      ],
                      bindDescription: "`Wait for: '${selector}'`",
                      description: 'Wait selector',
                      name: 'waitForSelector',
                      needSelectors: ['selector'],
                      type: 'atom',
                    },
                    { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                    {
                      allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
                      bindData: { selectorNumber: 'selectorNumber' },
                      description: 'Click',
                      name: 'clickSelectorRaw',
                      needData: ['selectorNumber?'],
                      needSelectors: ['selector'],
                      type: 'atom',
                    },
                  ],
                },
              ],
            },
            {
              description: 'Если нужно передать только одну настройку',
              if: 'setting !== null',
              name: 'blank',
              type: 'atom',
            },
            {
              allowResults: ['settingsArray'],
              description: 'Проверяем на наличие массива в настройками',
              if: 'settingsArray !== null',
              name: 'if',
              runTest: [
                { description: 'Выбираем одну настройку', name: 'blank', type: 'atom' },
                { description: 'Присваиваем переменную для селектора', name: 'blank', type: 'atom' },
                {
                  allowOptions: ['waitingTime'],
                  allowResults: ['exists'],
                  bindSelectors: { selector: 'localSetting' },
                  description: 'Смотрим, есть ли такой пункт, если нет, то падаем.',
                  errorIfResult: '!exists',
                  logOptions: { logChildren: false },
                  name: 'checkSelector',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  options: { screenshot: true, logAfter: true },
                  runTest: [
                    {
                      allowOptions: [
                        'hidden',
                        'visible',
                        'timeDelayBeforeWait',
                        'timeDelayAfterWait',
                        'waitingTime',
                        'noThrow',
                      ],
                      bindDescription: "`Wait for: '${selector}'`",
                      bindSelectors: { selector: 'selector' },
                      name: 'waitForSelector',
                      needSelectors: ['selector'],
                      options: { noThrow: true, waitingTime: 1 },
                      type: 'atom',
                    },
                    { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                    {
                      allowResults: ['exists'],
                      bindData: { selectorNumber: 'selectorNumber' },
                      bindSelectors: { selector: 'selector' },
                      name: 'checkSelectorRaw',
                      needData: ['selectorNumber?'],
                      needSelectors: ['selector'],
                      type: 'atom',
                    },
                  ],
                  type: 'atom',
                },
                {
                  allowResults: ['value'],
                  bindDescription: "`Get value: '${key}' from selector: '${selector}' in browser context`",
                  bindSelectors: { selector: 'localSettingInput' },
                  data: { key: 'checked' },
                  description: 'Проверяем активность пункта',
                  name: 'getElementObjectValue',
                  needData: ['key'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
                {
                  allowOptions: [
                    'count',
                    'timeDelayBeforeClick',
                    'button',
                    'logAfter',
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'timeDelayAfterClick',
                    'waitingTime',
                  ],
                  bindSelectors: { selector: 'localSetting' },
                  description: 'Нажимаем на нужную настройку, если она включена',
                  if: 'active',
                  logOptions: { logChildren: false },
                  name: 'clickSelector',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  options: { screenshot: true },
                  runTest: [
                    {
                      allowOptions: [
                        'hidden',
                        'visible',
                        'timeDelayBeforeWait',
                        'timeDelayAfterWait',
                        'waitingTime',
                        'noThrow',
                      ],
                      bindDescription: "`Wait for: '${selector}'`",
                      description: 'Wait selector',
                      name: 'waitForSelector',
                      needSelectors: ['selector'],
                      type: 'atom',
                    },
                    { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                    {
                      allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
                      bindData: { selectorNumber: 'selectorNumber' },
                      description: 'Click',
                      name: 'clickSelectorRaw',
                      needData: ['selectorNumber?'],
                      needSelectors: ['selector'],
                      type: 'atom',
                    },
                  ],
                },
                {
                  allowResults: ['value'],
                  bindDescription: "`Get value: '${key}' from selector: '${selector}' in browser context`",
                  bindSelectors: { selector: 'localSettingInput' },
                  data: { key: 'checked' },
                  description: 'Проверяем активность пункта',
                  errorIfResult: 'active',
                  name: 'getElementObjectValue',
                  needData: ['key'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
              ],
              type: 'atom',
              while: 'settingsArray.length',
            },
            {
              description: 'Сохранение настроек',
              logOptions: { logChildren: false },
              name: 'сохранитьНастройки',
              runTest: [
                {
                  allowOptions: ['waitingTime'],
                  allowResults: ['exists'],
                  bindSelectors: { selector: 'settingsWindow.header' },
                  description: 'Проверяем, что открыто окно "Настройки", по заголовку',
                  errorIfResult: '!exists',
                  logOptions: { logChildren: false },
                  name: 'checkSelector',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  runTest: [
                    {
                      allowOptions: [
                        'hidden',
                        'visible',
                        'timeDelayBeforeWait',
                        'timeDelayAfterWait',
                        'waitingTime',
                        'noThrow',
                      ],
                      bindDescription: "`Wait for: '${selector}'`",
                      bindSelectors: { selector: 'selector' },
                      name: 'waitForSelector',
                      needSelectors: ['selector'],
                      options: { noThrow: true, waitingTime: 1 },
                      type: 'atom',
                    },
                    { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                    {
                      allowResults: ['exists'],
                      bindData: { selectorNumber: 'selectorNumber' },
                      bindSelectors: { selector: 'selector' },
                      name: 'checkSelectorRaw',
                      needData: ['selectorNumber?'],
                      needSelectors: ['selector'],
                      type: 'atom',
                    },
                  ],
                  type: 'atom',
                },
                {
                  allowOptions: [
                    'count',
                    'timeDelayBeforeClick',
                    'button',
                    'logAfter',
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'timeDelayAfterClick',
                    'waitingTime',
                  ],
                  bindSelectors: { selector: 'settingsWindow.buttonSaveSettings' },
                  description: 'Нажимаем кнопку сохранить',
                  logOptions: { logChildren: false },
                  name: 'clickSelector',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  runTest: [
                    {
                      allowOptions: [
                        'hidden',
                        'visible',
                        'timeDelayBeforeWait',
                        'timeDelayAfterWait',
                        'waitingTime',
                        'noThrow',
                      ],
                      bindDescription: "`Wait for: '${selector}'`",
                      description: 'Wait selector',
                      name: 'waitForSelector',
                      needSelectors: ['selector'],
                      type: 'atom',
                    },
                    { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                    {
                      allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
                      bindData: { selectorNumber: 'selectorNumber' },
                      description: 'Click',
                      name: 'clickSelectorRaw',
                      needData: ['selectorNumber?'],
                      needSelectors: ['selector'],
                      type: 'atom',
                    },
                  ],
                },
                {
                  allowResults: ['success'],
                  bindData: { toastMessage: 'всплывашки.настройкиСохранены' },
                  bindDescription: "`Проверка всплывающего сообщения: '${toastMessage}'`",
                  logOptions: { logChildren: false },
                  name: 'проверкаВсплывающегоСообщения',
                  needData: ['toastMessage', 'strictMode?'],
                  runTest: [
                    { description: 'Присваиваем переменную для селектора', name: 'blank', type: 'atom' },
                    {
                      allowOptions: ['waitingTime'],
                      allowResults: ['exists'],
                      bindDescription: "`Проверяем, что на экране вышло всплывающее сообщение: '${toastMessage}'`",
                      bindSelectors: { selector: 'selectorMessage' },
                      logOptions: { logChildren: false },
                      name: 'checkSelector',
                      needData: ['selectorNumber?'],
                      needSelectors: ['selector'],
                      options: { waitingTime: 500 },
                      runTest: [
                        {
                          allowOptions: [
                            'hidden',
                            'visible',
                            'timeDelayBeforeWait',
                            'timeDelayAfterWait',
                            'waitingTime',
                            'noThrow',
                          ],
                          bindDescription: "`Wait for: '${selector}'`",
                          bindSelectors: { selector: 'selector' },
                          name: 'waitForSelector',
                          needSelectors: ['selector'],
                          options: { noThrow: true, waitingTime: 1 },
                          type: 'atom',
                        },
                        { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                        {
                          allowResults: ['exists'],
                          bindData: { selectorNumber: 'selectorNumber' },
                          bindSelectors: { selector: 'selector' },
                          name: 'checkSelectorRaw',
                          needData: ['selectorNumber?'],
                          needSelectors: ['selector'],
                          type: 'atom',
                        },
                      ],
                      type: 'atom',
                    },
                    {
                      allowResults: ['text'],
                      bindDescription: "`Get text from selector: '${selector}'`",
                      bindSelectors: { selector: 'selectorMessage' },
                      description: 'Проверка текста всплывашки',
                      errorIfResult: '!text.includes(toastMessage)',
                      if: 'isSuccessfull',
                      name: 'getText',
                      needData: ['selectorNumber?'],
                      needSelectors: ['selector'],
                      type: 'atom',
                    },
                    {
                      allowOptions: [
                        'count',
                        'timeDelayBeforeClick',
                        'button',
                        'logAfter',
                        'hidden',
                        'visible',
                        'timeDelayBeforeWait',
                        'timeDelayAfterWait',
                        'timeDelayAfterClick',
                        'waitingTime',
                      ],
                      bindDescription: "`Кликаем чтобы закрыть всплывающее сообщение: '${toastMessage}'`",
                      bindSelectors: { selector: 'selectorMessage' },
                      if: 'isSuccessfull',
                      logOptions: { logChildren: false },
                      name: 'clickSelector',
                      needData: ['selectorNumber?'],
                      needSelectors: ['selector'],
                      runTest: [
                        {
                          allowOptions: [
                            'hidden',
                            'visible',
                            'timeDelayBeforeWait',
                            'timeDelayAfterWait',
                            'waitingTime',
                            'noThrow',
                          ],
                          bindDescription: "`Wait for: '${selector}'`",
                          description: 'Wait selector',
                          name: 'waitForSelector',
                          needSelectors: ['selector'],
                          type: 'atom',
                        },
                        { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                        {
                          allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
                          bindData: { selectorNumber: 'selectorNumber' },
                          description: 'Click',
                          name: 'clickSelectorRaw',
                          needData: ['selectorNumber?'],
                          needSelectors: ['selector'],
                          type: 'atom',
                        },
                      ],
                    },
                    {
                      bindDescription: "`Не обнаружено информационное сообщение: '${toastMessage}'`",
                      errorIf: 'strictMode && !isSuccessfull',
                      name: 'blank',
                      type: 'atom',
                    },
                    { name: 'blank', type: 'atom' },
                  ],
                },
              ],
            },
            {
              afterTest: [
                {
                  afterTest: [],
                  allowOptions: [],
                  allowResults: [],
                  argsRedefine: {},
                  beforeTest: [],
                  bindData: {},
                  bindDescription: '',
                  bindResults: {},
                  bindSelectors: {},
                  data: {},
                  dataExt: [],
                  debug: false,
                  debugInfo: false,
                  description: 'Проверяем, что окно закрылось и доступно боковое меню',
                  descriptionError: '',
                  descriptionExtend: [],
                  disable: false,
                  engineSupports: [],
                  errorIf: '',
                  errorIfResult: '',
                  frame: '',
                  if: '',
                  inlineJS: '',
                  logOptions: {},
                  name: 'боковоеМенюДоступно',
                  needData: [],
                  needSelectors: [],
                  options: {},
                  repeat: 1,
                  runTest: [
                    {
                      type: 'atom',
                      name: 'todo',
                      logOptions: { textColor: 'white', backgroundColor: 'red' },
                      testFile:
                        'C:\\DEV\\cashdesk-electron\\e2e-ppd\\node_modules\\@puppedo\\atoms\\src\\blank\\todo.yaml',
                      description: 'Нужна проверка, что селектор не скрыт под другими селекторами, например, модалкой',
                      breadcrumbs: [
                        'кейсыАвторизация',
                        'runTest[10].case',
                        'runTest[7].отключитьНастройку',
                        'runTest[4].закрытьНастройки',
                        'afterTest[0].боковоеМенюДоступно',
                        'runTest[0].todo',
                      ],
                      levelIndent: 5,
                      stepId: 'e499eb5a9ed462bc78f598f389abcb46',
                      source:
                        '{\n  "type": "atom",\n  "name": "todo",\n  "logOptions": {\n    "textColor": "white",\n    "backgroundColor": "red"\n  },\n  "testFile": "C:\\\\DEV\\\\cashdesk-electron\\\\e2e-ppd\\\\node_modules\\\\@puppedo\\\\atoms\\\\src\\\\blank\\\\todo.yaml",\n  "description": "Нужна проверка, что селектор не скрыт под другими селекторами, например, модалкой",\n  "breadcrumbs": [\n    "кейсыАвторизация",\n    "runTest[10].case",\n    "runTest[7].отключитьНастройку",\n    "runTest[4].закрытьНастройки",\n    "afterTest[0].боковоеМенюДоступно",\n    "runTest[0].todo"\n  ],\n  "levelIndent": 5,\n  "stepId": "e499eb5a9ed462bc78f598f389abcb46"\n}',
                    },
                    {
                      type: 'atom',
                      name: 'checkSelector',
                      needSelectors: ['selector'],
                      needData: ['selectorNumber?'],
                      allowOptions: ['waitingTime'],
                      allowResults: ['exists'],
                      logOptions: { logChildren: false },
                      runTest: [
                        {
                          type: 'atom',
                          name: 'waitForSelector',
                          bindDescription: "`Wait for: '${selector}'`",
                          needSelectors: ['selector'],
                          allowOptions: [
                            'hidden',
                            'visible',
                            'timeDelayBeforeWait',
                            'timeDelayAfterWait',
                            'waitingTime',
                            'noThrow',
                          ],
                          testFile:
                            'C:\\DEV\\cashdesk-electron\\e2e-ppd\\node_modules\\@puppedo\\atoms\\src\\main\\waitForSelector.yaml',
                          bindSelectors: { selector: 'selector' },
                          options: { noThrow: true, waitingTime: 1 },
                          breadcrumbs: [
                            'кейсыАвторизация',
                            'runTest[10].case',
                            'runTest[7].отключитьНастройку',
                            'runTest[4].закрытьНастройки',
                            'afterTest[0].боковоеМенюДоступно',
                            'runTest[1].checkSelector',
                            'runTest[0].waitForSelector',
                          ],
                          levelIndent: 6,
                          stepId: 'f994b2e64a40f639a7ec5bef0e76766e',
                          source:
                            '{\n  "type": "atom",\n  "name": "waitForSelector",\n  "bindDescription": "`Wait for: \'${selector}\'`",\n  "needSelectors": [\n    "selector"\n  ],\n  "allowOptions": [\n    "hidden",\n    "visible",\n    "timeDelayBeforeWait",\n    "timeDelayAfterWait",\n    "waitingTime",\n    "noThrow"\n  ],\n  "testFile": "C:\\\\DEV\\\\cashdesk-electron\\\\e2e-ppd\\\\node_modules\\\\@puppedo\\\\atoms\\\\src\\\\main\\\\waitForSelector.yaml",\n  "bindSelectors": {\n    "selector": "selector"\n  },\n  "options": {\n    "noThrow": true,\n    "waitingTime": 1\n  },\n  "breadcrumbs": [\n    "кейсыАвторизация",\n    "runTest[10].case",\n    "runTest[7].отключитьНастройку",\n    "runTest[4].закрытьНастройки",\n    "afterTest[0].боковоеМенюДоступно",\n    "runTest[1].checkSelector",\n    "runTest[0].waitForSelector"\n  ],\n  "levelIndent": 6,\n  "stepId": "f994b2e64a40f639a7ec5bef0e76766e"\n}',
                        },
                        {
                          type: 'atom',
                          name: 'blank',
                          testFile:
                            'C:\\DEV\\cashdesk-electron\\e2e-ppd\\node_modules\\@puppedo\\atoms\\src\\blank\\blank.yaml',
                          if: 'selectorNumber === null',
                          const: { selectorNumber: 0 },
                          breadcrumbs: [
                            'кейсыАвторизация',
                            'runTest[10].case',
                            'runTest[7].отключитьНастройку',
                            'runTest[4].закрытьНастройки',
                            'afterTest[0].боковоеМенюДоступно',
                            'runTest[1].checkSelector',
                            'runTest[1].blank',
                          ],
                          levelIndent: 6,
                          stepId: '8175feb79d7b417b67686af0b2c63414',
                          source:
                            '{\n  "type": "atom",\n  "name": "blank",\n  "testFile": "C:\\\\DEV\\\\cashdesk-electron\\\\e2e-ppd\\\\node_modules\\\\@puppedo\\\\atoms\\\\src\\\\blank\\\\blank.yaml",\n  "if": "selectorNumber === null",\n  "const": {\n    "selectorNumber": 0\n  },\n  "breadcrumbs": [\n    "кейсыАвторизация",\n    "runTest[10].case",\n    "runTest[7].отключитьНастройку",\n    "runTest[4].закрытьНастройки",\n    "afterTest[0].боковоеМенюДоступно",\n    "runTest[1].checkSelector",\n    "runTest[1].blank"\n  ],\n  "levelIndent": 6,\n  "stepId": "8175feb79d7b417b67686af0b2c63414"\n}',
                        },
                        {
                          type: 'atom',
                          name: 'checkSelectorRaw',
                          needSelectors: ['selector'],
                          needData: ['selectorNumber?'],
                          allowResults: ['exists'],
                          testFile:
                            'C:\\DEV\\cashdesk-electron\\e2e-ppd\\node_modules\\@puppedo\\atoms\\src\\checks\\checkSelectorRaw.yaml',
                          bindSelectors: { selector: 'selector' },
                          bindData: { selectorNumber: 'selectorNumber' },
                          result: { exists: 'exists' },
                          breadcrumbs: [
                            'кейсыАвторизация',
                            'runTest[10].case',
                            'runTest[7].отключитьНастройку',
                            'runTest[4].закрытьНастройки',
                            'afterTest[0].боковоеМенюДоступно',
                            'runTest[1].checkSelector',
                            'runTest[2].checkSelectorRaw',
                          ],
                          levelIndent: 6,
                          stepId: '1ea1377b10e939b4cd9a0fb8998bf6d8',
                          source:
                            '{\n  "type": "atom",\n  "name": "checkSelectorRaw",\n  "needSelectors": [\n    "selector"\n  ],\n  "needData": [\n    "selectorNumber?"\n  ],\n  "allowResults": [\n    "exists"\n  ],\n  "testFile": "C:\\\\DEV\\\\cashdesk-electron\\\\e2e-ppd\\\\node_modules\\\\@puppedo\\\\atoms\\\\src\\\\checks\\\\checkSelectorRaw.yaml",\n  "bindSelectors": {\n    "selector": "selector"\n  },\n  "bindData": {\n    "selectorNumber": "selectorNumber"\n  },\n  "result": {\n    "exists": "exists"\n  },\n  "breadcrumbs": [\n    "кейсыАвторизация",\n    "runTest[10].case",\n    "runTest[7].отключитьНастройку",\n    "runTest[4].закрытьНастройки",\n    "afterTest[0].боковоеМенюДоступно",\n    "runTest[1].checkSelector",\n    "runTest[2].checkSelectorRaw"\n  ],\n  "levelIndent": 6,\n  "stepId": "1ea1377b10e939b4cd9a0fb8998bf6d8"\n}',
                        },
                      ],
                      testFile:
                        'C:\\DEV\\cashdesk-electron\\e2e-ppd\\node_modules\\@puppedo\\atoms\\src\\checks\\checkSelector.yaml',
                      description: 'Проверяем доступность селектора бокового меню',
                      bindSelectors: { selector: 'mainView.menuButton' },
                      options: { waitingTime: 500 },
                      errorInResult: '!exists',
                      breadcrumbs: [
                        'кейсыАвторизация',
                        'runTest[10].case',
                        'runTest[7].отключитьНастройку',
                        'runTest[4].закрытьНастройки',
                        'afterTest[0].боковоеМенюДоступно',
                        'runTest[1].checkSelector',
                      ],
                      levelIndent: 5,
                      stepId: 'add356ff80849b24a027b383b0be2222',
                      source:
                        '{\n  "type": "atom",\n  "name": "checkSelector",\n  "needSelectors": [\n    "selector"\n  ],\n  "needData": [\n    "selectorNumber?"\n  ],\n  "allowOptions": [\n    "waitingTime"\n  ],\n  "allowResults": [\n    "exists"\n  ],\n  "logOptions": {\n    "logChildren": false\n  },\n  "runTest": [\n    {\n      "waitForSelector": {\n        "bindSelectors": {\n          "selector": "selector"\n        },\n        "options": {\n          "noThrow": true,\n          "waitingTime": 1\n        }\n      }\n    },\n    {\n      "blank": {\n        "if": "selectorNumber === null",\n        "const": {\n          "selectorNumber": 0\n        }\n      }\n    },\n    {\n      "checkSelectorRaw": {\n        "bindSelectors": {\n          "selector": "selector"\n        },\n        "bindData": {\n          "selectorNumber": "selectorNumber"\n        },\n        "result": {\n          "exists": "exists"\n        }\n      }\n    }\n  ],\n  "testFile": "C:\\\\DEV\\\\cashdesk-electron\\\\e2e-ppd\\\\node_modules\\\\@puppedo\\\\atoms\\\\src\\\\checks\\\\checkSelector.yaml",\n  "description": "Проверяем доступность селектора бокового меню",\n  "bindSelectors": {\n    "selector": "mainView.menuButton"\n  },\n  "options": {\n    "waitingTime": 500\n  },\n  "errorInResult": "!exists",\n  "breadcrumbs": [\n    "кейсыАвторизация",\n    "runTest[10].case",\n    "runTest[7].отключитьНастройку",\n    "runTest[4].закрытьНастройки",\n    "afterTest[0].боковоеМенюДоступно",\n    "runTest[1].checkSelector"\n  ],\n  "levelIndent": 5,\n  "stepId": "add356ff80849b24a027b383b0be2222"\n}',
                    },
                  ],
                  selectors: {},
                  selectorsExt: [],
                  tags: [],
                  todo: '',
                  type: 'test',
                  while: '',
                  testFile: 'C:\\DEV\\cashdesk-electron\\e2e-ppd\\tests\\Касса\\БоковоеМеню\\боковоеМенюДоступно.yaml',
                  breadcrumbs: [
                    'кейсыАвторизация',
                    'runTest[10].case',
                    'runTest[7].отключитьНастройку',
                    'runTest[4].закрытьНастройки',
                    'afterTest[0].боковоеМенюДоступно',
                  ],
                  levelIndent: 4,
                  stepId: 'a7bab6e77ef19e3858851ef2644d0121',
                  source:
                    '{\n  "afterTest": [],\n  "allowOptions": [],\n  "allowResults": [],\n  "argsRedefine": {},\n  "beforeTest": [],\n  "bindData": {},\n  "bindDescription": "",\n  "bindResults": {},\n  "bindSelectors": {},\n  "data": {},\n  "dataExt": [],\n  "debug": false,\n  "debugInfo": false,\n  "description": "Проверяем, что окно закрылось и доступно боковое меню",\n  "descriptionError": "",\n  "descriptionExtend": [],\n  "disable": false,\n  "engineSupports": [],\n  "errorIf": "",\n  "errorIfResult": "",\n  "frame": "",\n  "if": "",\n  "inlineJS": "",\n  "logOptions": {},\n  "name": "боковоеМенюДоступно",\n  "needData": [],\n  "needSelectors": [],\n  "options": {},\n  "repeat": 1,\n  "runTest": [\n    {\n      "todo": {\n        "description": "Нужна проверка, что селектор не скрыт под другими селекторами, например, модалкой"\n      }\n    },\n    {\n      "checkSelector": {\n        "description": "Проверяем доступность селектора бокового меню",\n        "bindSelectors": {\n          "selector": "mainView.menuButton"\n        },\n        "options": {\n          "waitingTime": 500\n        },\n        "errorInResult": "!exists"\n      }\n    }\n  ],\n  "selectors": {},\n  "selectorsExt": [],\n  "tags": [],\n  "todo": "",\n  "type": "test",\n  "while": "",\n  "testFile": "C:\\\\DEV\\\\cashdesk-electron\\\\e2e-ppd\\\\tests\\\\Касса\\\\БоковоеМеню\\\\боковоеМенюДоступно.yaml",\n  "breadcrumbs": [\n    "кейсыАвторизация",\n    "runTest[10].case",\n    "runTest[7].отключитьНастройку",\n    "runTest[4].закрытьНастройки",\n    "afterTest[0].боковоеМенюДоступно"\n  ],\n  "levelIndent": 4,\n  "stepId": "a7bab6e77ef19e3858851ef2644d0121"\n}',
                },
              ],
              description: 'Закрыть вкладку "Настройки"',
              logOptions: { logChildren: false },
              name: 'закрытьНастройки',
              runTest: [
                {
                  allowOptions: ['waitingTime'],
                  allowResults: ['exists'],
                  bindSelectors: { selector: 'settingsWindow.header' },
                  description: 'Проверяем, что открыто окно "Настройки", по заголовку',
                  errorIfResult: '!exists',
                  logOptions: { logChildren: false },
                  name: 'checkSelector',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  runTest: [
                    {
                      allowOptions: [
                        'hidden',
                        'visible',
                        'timeDelayBeforeWait',
                        'timeDelayAfterWait',
                        'waitingTime',
                        'noThrow',
                      ],
                      bindDescription: "`Wait for: '${selector}'`",
                      bindSelectors: { selector: 'selector' },
                      name: 'waitForSelector',
                      needSelectors: ['selector'],
                      options: { noThrow: true, waitingTime: 1 },
                      type: 'atom',
                    },
                    { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                    {
                      allowResults: ['exists'],
                      bindData: { selectorNumber: 'selectorNumber' },
                      bindSelectors: { selector: 'selector' },
                      name: 'checkSelectorRaw',
                      needData: ['selectorNumber?'],
                      needSelectors: ['selector'],
                      type: 'atom',
                    },
                  ],
                  type: 'atom',
                },
                {
                  allowOptions: [
                    'count',
                    'timeDelayBeforeClick',
                    'button',
                    'logAfter',
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'timeDelayAfterClick',
                    'waitingTime',
                  ],
                  bindSelectors: { selector: 'settingsWindow.closeButton' },
                  description: 'Нажимаем кнопку закрыть в окне',
                  logOptions: { logChildren: false },
                  name: 'clickSelector',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  runTest: [
                    {
                      allowOptions: [
                        'hidden',
                        'visible',
                        'timeDelayBeforeWait',
                        'timeDelayAfterWait',
                        'waitingTime',
                        'noThrow',
                      ],
                      bindDescription: "`Wait for: '${selector}'`",
                      description: 'Wait selector',
                      name: 'waitForSelector',
                      needSelectors: ['selector'],
                      type: 'atom',
                    },
                    { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                    {
                      allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
                      bindData: { selectorNumber: 'selectorNumber' },
                      description: 'Click',
                      name: 'clickSelectorRaw',
                      needData: ['selectorNumber?'],
                      needSelectors: ['selector'],
                      type: 'atom',
                    },
                  ],
                },
              ],
            },
          ],
        },
        {
          description: 'Закрываем смену',
          logOptions: { logChildren: false },
          name: 'закрытиеСмены',
          runTest: [
            {
              allowOptions: [
                'count',
                'timeDelayBeforeClick',
                'button',
                'logAfter',
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'timeDelayAfterClick',
                'waitingTime',
              ],
              bindSelectors: { selector: 'mainView.menuButton' },
              description: 'Открываем основное меню по кнопке',
              logOptions: { logChildren: false },
              name: 'clickSelector',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              options: { timeDelayAfterWait: 20 },
              runTest: [
                {
                  allowOptions: [
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'waitingTime',
                    'noThrow',
                  ],
                  bindDescription: "`Wait for: '${selector}'`",
                  description: 'Wait selector',
                  name: 'waitForSelector',
                  needSelectors: ['selector'],
                  type: 'atom',
                },
                { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                {
                  allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
                  bindData: { selectorNumber: 'selectorNumber' },
                  description: 'Click',
                  name: 'clickSelectorRaw',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
              ],
            },
            {
              allowOptions: [
                'count',
                'timeDelayBeforeClick',
                'button',
                'logAfter',
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'timeDelayAfterClick',
                'waitingTime',
              ],
              bindSelectors: { selector: 'mainMenu.buttonExit' },
              description: 'Ждем появления меню и нажимаем кнопку "Выход"',
              logOptions: { logChildren: false },
              name: 'clickSelector',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              options: { timeDelayAfterWait: 20 },
              runTest: [
                {
                  allowOptions: [
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'waitingTime',
                    'noThrow',
                  ],
                  bindDescription: "`Wait for: '${selector}'`",
                  description: 'Wait selector',
                  name: 'waitForSelector',
                  needSelectors: ['selector'],
                  type: 'atom',
                },
                { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                {
                  allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
                  bindData: { selectorNumber: 'selectorNumber' },
                  description: 'Click',
                  name: 'clickSelectorRaw',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
              ],
            },
            {
              allowOptions: [
                'count',
                'timeDelayBeforeClick',
                'button',
                'logAfter',
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'timeDelayAfterClick',
                'waitingTime',
              ],
              bindSelectors: { selector: 'session.buttonCloseSession' },
              description: 'Нажимаем "Закрыть смену"',
              logOptions: { logChildren: false },
              name: 'clickSelector',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              runTest: [
                {
                  allowOptions: [
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'waitingTime',
                    'noThrow',
                  ],
                  bindDescription: "`Wait for: '${selector}'`",
                  description: 'Wait selector',
                  name: 'waitForSelector',
                  needSelectors: ['selector'],
                  type: 'atom',
                },
                { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                {
                  allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
                  bindData: { selectorNumber: 'selectorNumber' },
                  description: 'Click',
                  name: 'clickSelectorRaw',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
              ],
            },
            {
              allowOptions: ['waitingTime'],
              allowResults: ['exists'],
              description: 'Если есть активный чек то всплывает окно',
              logOptions: { logChildren: false },
              name: 'checkSelector',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              options: { waitingTime: 50 },
              runTest: [
                {
                  allowOptions: [
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'waitingTime',
                    'noThrow',
                  ],
                  bindDescription: "`Wait for: '${selector}'`",
                  bindSelectors: { selector: 'selector' },
                  name: 'waitForSelector',
                  needSelectors: ['selector'],
                  options: { noThrow: true, waitingTime: 1 },
                  type: 'atom',
                },
                { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                {
                  allowResults: ['exists'],
                  bindData: { selectorNumber: 'selectorNumber' },
                  bindSelectors: { selector: 'selector' },
                  name: 'checkSelectorRaw',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
              ],
              type: 'atom',
            },
            {
              description: 'Появилось окно активного чека',
              if: 'естьАктивныйЧек',
              name: 'if',
              runTest: [
                {
                  allowOptions: [
                    'count',
                    'timeDelayBeforeClick',
                    'button',
                    'logAfter',
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'timeDelayAfterClick',
                    'waitingTime',
                  ],
                  description: 'Нажимаем "Удалить чек"',
                  logOptions: { logChildren: false },
                  name: 'clickSelector',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  runTest: [
                    {
                      allowOptions: [
                        'hidden',
                        'visible',
                        'timeDelayBeforeWait',
                        'timeDelayAfterWait',
                        'waitingTime',
                        'noThrow',
                      ],
                      bindDescription: "`Wait for: '${selector}'`",
                      description: 'Wait selector',
                      name: 'waitForSelector',
                      needSelectors: ['selector'],
                      type: 'atom',
                    },
                    { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                    {
                      allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
                      bindData: { selectorNumber: 'selectorNumber' },
                      description: 'Click',
                      name: 'clickSelectorRaw',
                      needData: ['selectorNumber?'],
                      needSelectors: ['selector'],
                      type: 'atom',
                    },
                  ],
                },
                {
                  allowOptions: [
                    'count',
                    'timeDelayBeforeClick',
                    'button',
                    'logAfter',
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'timeDelayAfterClick',
                    'waitingTime',
                  ],
                  bindSelectors: { selector: 'session.buttonCloseSession' },
                  description: 'Нажимаем "Закрыть смену" еще раз',
                  logOptions: { logChildren: false },
                  name: 'clickSelector',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  runTest: [
                    {
                      allowOptions: [
                        'hidden',
                        'visible',
                        'timeDelayBeforeWait',
                        'timeDelayAfterWait',
                        'waitingTime',
                        'noThrow',
                      ],
                      bindDescription: "`Wait for: '${selector}'`",
                      description: 'Wait selector',
                      name: 'waitForSelector',
                      needSelectors: ['selector'],
                      type: 'atom',
                    },
                    { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                    {
                      allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
                      bindData: { selectorNumber: 'selectorNumber' },
                      description: 'Click',
                      name: 'clickSelectorRaw',
                      needData: ['selectorNumber?'],
                      needSelectors: ['selector'],
                      type: 'atom',
                    },
                  ],
                },
              ],
              type: 'atom',
            },
            {
              allowOptions: [
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'waitingTime',
                'noThrow',
              ],
              bindDescription: "`Wait for: '${selector}'`",
              bindSelectors: { selector: 'auth.version' },
              description: 'Ожидаем окна авторизации. Ждем плашку с версией.',
              name: 'waitForSelector',
              needSelectors: ['selector'],
              type: 'atom',
            },
          ],
        },
      ],
      tags: ['авторизация'],
      type: 'atom',
    },
    {
      description: 'Закрытие смены => через Z-отчет (Только при наличии фискальника)',
      descriptionExtend: [
        'Авторизоваться в кассу под администратором',
        'Открыть смену',
        'Открыть основное меню',
        'Выбрать кассовые операции',
        'Нажать распечатать Z-отчет',
        'Итог: Отобразилось окно закрытия смены',
        'Итог: На фискальнике распечатался Z-отчет',
        'Итог: Смена закрыта',
      ],
      if: 'fiskalFixtures !== ""',
      logOptions: { textColor: 'black', backgroundColor: 'white' },
      name: 'case',
      runTest: [
        {
          bindDescription:
            "'Авторизуемся админом. Логин: ' + authData.loginElectron + ' Пароль: ' + authData.passwordElectron",
          logOptions: { logChildren: false },
          name: 'авторизацияСоВводомЛогина',
          needData: ['needSavePass?'],
          runTest: [
            {
              allowOptions: [
                'count',
                'timeDelayBeforeClick',
                'button',
                'logAfter',
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'timeDelayAfterClick',
                'waitingTime',
              ],
              bindSelectors: { selector: 'auth.selectPasswordEnter' },
              description: 'Открываем вкладку "По паролю"',
              logOptions: { logChildren: false },
              name: 'clickSelector',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              runTest: [
                {
                  allowOptions: [
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'waitingTime',
                    'noThrow',
                  ],
                  bindDescription: "`Wait for: '${selector}'`",
                  description: 'Wait selector',
                  name: 'waitForSelector',
                  needSelectors: ['selector'],
                  type: 'atom',
                },
                { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                {
                  allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
                  bindData: { selectorNumber: 'selectorNumber' },
                  description: 'Click',
                  name: 'clickSelectorRaw',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
              ],
            },
            {
              allowOptions: [
                'count',
                'timeDelayBeforeClick',
                'button',
                'logAfter',
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'timeDelayAfterClick',
                'waitingTime',
              ],
              bindSelectors: { selector: 'auth.showLoginInput' },
              description: "Нажимем на ссылку 'Кассир', чтобы увидеть поля ввода логина и пароля",
              logOptions: { logChildren: false },
              name: 'clickSelector',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              runTest: [
                {
                  allowOptions: [
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'waitingTime',
                    'noThrow',
                  ],
                  bindDescription: "`Wait for: '${selector}'`",
                  description: 'Wait selector',
                  name: 'waitForSelector',
                  needSelectors: ['selector'],
                  type: 'atom',
                },
                { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                {
                  allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
                  bindData: { selectorNumber: 'selectorNumber' },
                  description: 'Click',
                  name: 'clickSelectorRaw',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
              ],
            },
            {
              allowOptions: [
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'noClearInput',
                'waitingTime',
              ],
              bindData: { text: 'authData.loginElectron' },
              bindDescription: "'Вводим логин: ' + authData.loginElectron",
              bindSelectors: { selector: 'auth.inputLogin' },
              logOptions: { logChildren: false },
              name: 'typeInput',
              needData: ['text'],
              needSelectors: ['selector'],
              runTest: [
                {
                  allowOptions: [
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'waitingTime',
                    'noThrow',
                  ],
                  bindDescription: "`Wait for: '${selector}'`",
                  description: 'Wait selector',
                  name: 'waitForSelector',
                  needSelectors: ['selector'],
                  type: 'atom',
                },
                {
                  allowOptions: ['noClearInput'],
                  bindData: { text: 'text' },
                  bindDescription: "`Type text: '${text}' in input: '${selector}'`",
                  description: 'Type in selector',
                  name: 'typeInputRaw',
                  needData: ['text'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
              ],
            },
            {
              allowOptions: [
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'noClearInput',
                'waitingTime',
              ],
              bindData: { text: 'authData.passwordElectron' },
              bindDescription: "'Вводим пароль: ' + authData.passwordElectron",
              bindSelectors: { selector: 'auth.inputPassword' },
              logOptions: { logChildren: false },
              name: 'typeInput',
              needData: ['text'],
              needSelectors: ['selector'],
              runTest: [
                {
                  allowOptions: [
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'waitingTime',
                    'noThrow',
                  ],
                  bindDescription: "`Wait for: '${selector}'`",
                  description: 'Wait selector',
                  name: 'waitForSelector',
                  needSelectors: ['selector'],
                  type: 'atom',
                },
                {
                  allowOptions: ['noClearInput'],
                  bindData: { text: 'text' },
                  bindDescription: "`Type text: '${text}' in input: '${selector}'`",
                  description: 'Type in selector',
                  name: 'typeInputRaw',
                  needData: ['text'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
              ],
            },
            {
              allowOptions: [
                'count',
                'timeDelayBeforeClick',
                'button',
                'logAfter',
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'timeDelayAfterClick',
                'waitingTime',
              ],
              bindSelectors: { selector: 'auth.savePassCheckbox' },
              description: 'Ставим чекбокс "Сохранить пароль"',
              if: 'needSavePass !== null',
              logOptions: { logChildren: false },
              name: 'clickSelector',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              runTest: [
                {
                  allowOptions: [
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'waitingTime',
                    'noThrow',
                  ],
                  bindDescription: "`Wait for: '${selector}'`",
                  description: 'Wait selector',
                  name: 'waitForSelector',
                  needSelectors: ['selector'],
                  type: 'atom',
                },
                { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                {
                  allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
                  bindData: { selectorNumber: 'selectorNumber' },
                  description: 'Click',
                  name: 'clickSelectorRaw',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
              ],
            },
            {
              allowOptions: [
                'count',
                'timeDelayBeforeClick',
                'button',
                'logAfter',
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'timeDelayAfterClick',
                'waitingTime',
              ],
              bindSelectors: { selector: 'auth.inputSubmit' },
              description: 'Нажимаем кнопку логина',
              logOptions: { logChildren: false },
              name: 'clickSelector',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              runTest: [
                {
                  allowOptions: [
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'waitingTime',
                    'noThrow',
                  ],
                  bindDescription: "`Wait for: '${selector}'`",
                  description: 'Wait selector',
                  name: 'waitForSelector',
                  needSelectors: ['selector'],
                  type: 'atom',
                },
                { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                {
                  allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
                  bindData: { selectorNumber: 'selectorNumber' },
                  description: 'Click',
                  name: 'clickSelectorRaw',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
              ],
            },
          ],
        },
        {
          description: 'Открываем смену',
          logOptions: { logChildren: false },
          name: 'открытиеСмены',
          runTest: [
            {
              allowOptions: [
                'count',
                'timeDelayBeforeClick',
                'button',
                'logAfter',
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'timeDelayAfterClick',
                'waitingTime',
              ],
              bindSelectors: { selector: 'session.openButton' },
              description: 'Нажимаем "Открыть смену"',
              logOptions: { logChildren: false },
              name: 'clickSelector',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              runTest: [
                {
                  allowOptions: [
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'waitingTime',
                    'noThrow',
                  ],
                  bindDescription: "`Wait for: '${selector}'`",
                  description: 'Wait selector',
                  name: 'waitForSelector',
                  needSelectors: ['selector'],
                  type: 'atom',
                },
                { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                {
                  allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
                  bindData: { selectorNumber: 'selectorNumber' },
                  description: 'Click',
                  name: 'clickSelectorRaw',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
              ],
            },
            {
              allowOptions: [
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'waitingTime',
                'noThrow',
              ],
              bindDescription: "`Wait for: '${selector}'`",
              bindSelectors: { selector: 'mainView.menuButton' },
              description: 'Ждем закрытия окна и появления кнопки открытия бокового меню',
              name: 'waitForSelector',
              needSelectors: ['selector'],
              type: 'atom',
            },
          ],
        },
        {
          description: 'боковоеМенюОткрыть',
          logOptions: { textColor: 'white', backgroundColor: 'red' },
          name: 'todo',
          type: 'atom',
        },
        {
          description: 'Выбираем "Кассовые операции" (clickSelector)',
          logOptions: { textColor: 'white', backgroundColor: 'red' },
          name: 'todo',
          type: 'atom',
        },
        {
          description: 'Нажимаем распечатать Z-отчет',
          logOptions: { textColor: 'white', backgroundColor: 'red' },
          name: 'todo',
          type: 'atom',
        },
        {
          description: 'Итог -> Отобразилось окно закрытия смены',
          logOptions: { textColor: 'white', backgroundColor: 'red' },
          name: 'todo',
          type: 'atom',
        },
        {
          description: 'Закрываем смену',
          logOptions: { logChildren: false },
          name: 'закрытиеСмены',
          runTest: [
            {
              allowOptions: [
                'count',
                'timeDelayBeforeClick',
                'button',
                'logAfter',
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'timeDelayAfterClick',
                'waitingTime',
              ],
              bindSelectors: { selector: 'mainView.menuButton' },
              description: 'Открываем основное меню по кнопке',
              logOptions: { logChildren: false },
              name: 'clickSelector',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              options: { timeDelayAfterWait: 20 },
              runTest: [
                {
                  allowOptions: [
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'waitingTime',
                    'noThrow',
                  ],
                  bindDescription: "`Wait for: '${selector}'`",
                  description: 'Wait selector',
                  name: 'waitForSelector',
                  needSelectors: ['selector'],
                  type: 'atom',
                },
                { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                {
                  allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
                  bindData: { selectorNumber: 'selectorNumber' },
                  description: 'Click',
                  name: 'clickSelectorRaw',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
              ],
            },
            {
              allowOptions: [
                'count',
                'timeDelayBeforeClick',
                'button',
                'logAfter',
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'timeDelayAfterClick',
                'waitingTime',
              ],
              bindSelectors: { selector: 'mainMenu.buttonExit' },
              description: 'Ждем появления меню и нажимаем кнопку "Выход"',
              logOptions: { logChildren: false },
              name: 'clickSelector',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              options: { timeDelayAfterWait: 20 },
              runTest: [
                {
                  allowOptions: [
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'waitingTime',
                    'noThrow',
                  ],
                  bindDescription: "`Wait for: '${selector}'`",
                  description: 'Wait selector',
                  name: 'waitForSelector',
                  needSelectors: ['selector'],
                  type: 'atom',
                },
                { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                {
                  allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
                  bindData: { selectorNumber: 'selectorNumber' },
                  description: 'Click',
                  name: 'clickSelectorRaw',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
              ],
            },
            {
              allowOptions: [
                'count',
                'timeDelayBeforeClick',
                'button',
                'logAfter',
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'timeDelayAfterClick',
                'waitingTime',
              ],
              bindSelectors: { selector: 'session.buttonCloseSession' },
              description: 'Нажимаем "Закрыть смену"',
              logOptions: { logChildren: false },
              name: 'clickSelector',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              runTest: [
                {
                  allowOptions: [
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'waitingTime',
                    'noThrow',
                  ],
                  bindDescription: "`Wait for: '${selector}'`",
                  description: 'Wait selector',
                  name: 'waitForSelector',
                  needSelectors: ['selector'],
                  type: 'atom',
                },
                { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                {
                  allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
                  bindData: { selectorNumber: 'selectorNumber' },
                  description: 'Click',
                  name: 'clickSelectorRaw',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
              ],
            },
            {
              allowOptions: ['waitingTime'],
              allowResults: ['exists'],
              description: 'Если есть активный чек то всплывает окно',
              logOptions: { logChildren: false },
              name: 'checkSelector',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              options: { waitingTime: 50 },
              runTest: [
                {
                  allowOptions: [
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'waitingTime',
                    'noThrow',
                  ],
                  bindDescription: "`Wait for: '${selector}'`",
                  bindSelectors: { selector: 'selector' },
                  name: 'waitForSelector',
                  needSelectors: ['selector'],
                  options: { noThrow: true, waitingTime: 1 },
                  type: 'atom',
                },
                { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                {
                  allowResults: ['exists'],
                  bindData: { selectorNumber: 'selectorNumber' },
                  bindSelectors: { selector: 'selector' },
                  name: 'checkSelectorRaw',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
              ],
              type: 'atom',
            },
            {
              description: 'Появилось окно активного чека',
              if: 'естьАктивныйЧек',
              name: 'if',
              runTest: [
                {
                  allowOptions: [
                    'count',
                    'timeDelayBeforeClick',
                    'button',
                    'logAfter',
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'timeDelayAfterClick',
                    'waitingTime',
                  ],
                  description: 'Нажимаем "Удалить чек"',
                  logOptions: { logChildren: false },
                  name: 'clickSelector',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  runTest: [
                    {
                      allowOptions: [
                        'hidden',
                        'visible',
                        'timeDelayBeforeWait',
                        'timeDelayAfterWait',
                        'waitingTime',
                        'noThrow',
                      ],
                      bindDescription: "`Wait for: '${selector}'`",
                      description: 'Wait selector',
                      name: 'waitForSelector',
                      needSelectors: ['selector'],
                      type: 'atom',
                    },
                    { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                    {
                      allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
                      bindData: { selectorNumber: 'selectorNumber' },
                      description: 'Click',
                      name: 'clickSelectorRaw',
                      needData: ['selectorNumber?'],
                      needSelectors: ['selector'],
                      type: 'atom',
                    },
                  ],
                },
                {
                  allowOptions: [
                    'count',
                    'timeDelayBeforeClick',
                    'button',
                    'logAfter',
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'timeDelayAfterClick',
                    'waitingTime',
                  ],
                  bindSelectors: { selector: 'session.buttonCloseSession' },
                  description: 'Нажимаем "Закрыть смену" еще раз',
                  logOptions: { logChildren: false },
                  name: 'clickSelector',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  runTest: [
                    {
                      allowOptions: [
                        'hidden',
                        'visible',
                        'timeDelayBeforeWait',
                        'timeDelayAfterWait',
                        'waitingTime',
                        'noThrow',
                      ],
                      bindDescription: "`Wait for: '${selector}'`",
                      description: 'Wait selector',
                      name: 'waitForSelector',
                      needSelectors: ['selector'],
                      type: 'atom',
                    },
                    { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                    {
                      allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
                      bindData: { selectorNumber: 'selectorNumber' },
                      description: 'Click',
                      name: 'clickSelectorRaw',
                      needData: ['selectorNumber?'],
                      needSelectors: ['selector'],
                      type: 'atom',
                    },
                  ],
                },
              ],
              type: 'atom',
            },
            {
              allowOptions: [
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'waitingTime',
                'noThrow',
              ],
              bindDescription: "`Wait for: '${selector}'`",
              bindSelectors: { selector: 'auth.version' },
              description: 'Ожидаем окна авторизации. Ждем плашку с версией.',
              name: 'waitForSelector',
              needSelectors: ['selector'],
              type: 'atom',
            },
          ],
        },
      ],
      tags: ['авторизация', 'закрытиеСмены'],
      type: 'atom',
    },
    {
      description: 'Закрытие смены => через "Выход"',
      descriptionExtend: [
        'Авторизоваться в кассу под администратором',
        'Открыть смену',
        'Открыть основное меню',
        'Нажать кнопку "Выход"',
        'Нажать закрыть смену',
        'Итог: Смена закрыта',
        'Итог: На фискальнике распечатался Z-отчет',
      ],
      logOptions: { textColor: 'black', backgroundColor: 'white' },
      name: 'case',
      runTest: [
        {
          bindDescription:
            "'Авторизуемся админом. Логин: ' + authData.loginElectron + ' Пароль: ' + authData.passwordElectron",
          logOptions: { logChildren: false },
          name: 'авторизацияСоВводомЛогина',
          needData: ['needSavePass?'],
          runTest: [
            {
              allowOptions: [
                'count',
                'timeDelayBeforeClick',
                'button',
                'logAfter',
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'timeDelayAfterClick',
                'waitingTime',
              ],
              bindSelectors: { selector: 'auth.selectPasswordEnter' },
              description: 'Открываем вкладку "По паролю"',
              logOptions: { logChildren: false },
              name: 'clickSelector',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              runTest: [
                {
                  allowOptions: [
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'waitingTime',
                    'noThrow',
                  ],
                  bindDescription: "`Wait for: '${selector}'`",
                  description: 'Wait selector',
                  name: 'waitForSelector',
                  needSelectors: ['selector'],
                  type: 'atom',
                },
                { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                {
                  allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
                  bindData: { selectorNumber: 'selectorNumber' },
                  description: 'Click',
                  name: 'clickSelectorRaw',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
              ],
            },
            {
              allowOptions: [
                'count',
                'timeDelayBeforeClick',
                'button',
                'logAfter',
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'timeDelayAfterClick',
                'waitingTime',
              ],
              bindSelectors: { selector: 'auth.showLoginInput' },
              description: "Нажимем на ссылку 'Кассир', чтобы увидеть поля ввода логина и пароля",
              logOptions: { logChildren: false },
              name: 'clickSelector',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              runTest: [
                {
                  allowOptions: [
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'waitingTime',
                    'noThrow',
                  ],
                  bindDescription: "`Wait for: '${selector}'`",
                  description: 'Wait selector',
                  name: 'waitForSelector',
                  needSelectors: ['selector'],
                  type: 'atom',
                },
                { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                {
                  allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
                  bindData: { selectorNumber: 'selectorNumber' },
                  description: 'Click',
                  name: 'clickSelectorRaw',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
              ],
            },
            {
              allowOptions: [
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'noClearInput',
                'waitingTime',
              ],
              bindData: { text: 'authData.loginElectron' },
              bindDescription: "'Вводим логин: ' + authData.loginElectron",
              bindSelectors: { selector: 'auth.inputLogin' },
              logOptions: { logChildren: false },
              name: 'typeInput',
              needData: ['text'],
              needSelectors: ['selector'],
              runTest: [
                {
                  allowOptions: [
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'waitingTime',
                    'noThrow',
                  ],
                  bindDescription: "`Wait for: '${selector}'`",
                  description: 'Wait selector',
                  name: 'waitForSelector',
                  needSelectors: ['selector'],
                  type: 'atom',
                },
                {
                  allowOptions: ['noClearInput'],
                  bindData: { text: 'text' },
                  bindDescription: "`Type text: '${text}' in input: '${selector}'`",
                  description: 'Type in selector',
                  name: 'typeInputRaw',
                  needData: ['text'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
              ],
            },
            {
              allowOptions: [
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'noClearInput',
                'waitingTime',
              ],
              bindData: { text: 'authData.passwordElectron' },
              bindDescription: "'Вводим пароль: ' + authData.passwordElectron",
              bindSelectors: { selector: 'auth.inputPassword' },
              logOptions: { logChildren: false },
              name: 'typeInput',
              needData: ['text'],
              needSelectors: ['selector'],
              runTest: [
                {
                  allowOptions: [
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'waitingTime',
                    'noThrow',
                  ],
                  bindDescription: "`Wait for: '${selector}'`",
                  description: 'Wait selector',
                  name: 'waitForSelector',
                  needSelectors: ['selector'],
                  type: 'atom',
                },
                {
                  allowOptions: ['noClearInput'],
                  bindData: { text: 'text' },
                  bindDescription: "`Type text: '${text}' in input: '${selector}'`",
                  description: 'Type in selector',
                  name: 'typeInputRaw',
                  needData: ['text'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
              ],
            },
            {
              allowOptions: [
                'count',
                'timeDelayBeforeClick',
                'button',
                'logAfter',
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'timeDelayAfterClick',
                'waitingTime',
              ],
              bindSelectors: { selector: 'auth.savePassCheckbox' },
              description: 'Ставим чекбокс "Сохранить пароль"',
              if: 'needSavePass !== null',
              logOptions: { logChildren: false },
              name: 'clickSelector',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              runTest: [
                {
                  allowOptions: [
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'waitingTime',
                    'noThrow',
                  ],
                  bindDescription: "`Wait for: '${selector}'`",
                  description: 'Wait selector',
                  name: 'waitForSelector',
                  needSelectors: ['selector'],
                  type: 'atom',
                },
                { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                {
                  allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
                  bindData: { selectorNumber: 'selectorNumber' },
                  description: 'Click',
                  name: 'clickSelectorRaw',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
              ],
            },
            {
              allowOptions: [
                'count',
                'timeDelayBeforeClick',
                'button',
                'logAfter',
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'timeDelayAfterClick',
                'waitingTime',
              ],
              bindSelectors: { selector: 'auth.inputSubmit' },
              description: 'Нажимаем кнопку логина',
              logOptions: { logChildren: false },
              name: 'clickSelector',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              runTest: [
                {
                  allowOptions: [
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'waitingTime',
                    'noThrow',
                  ],
                  bindDescription: "`Wait for: '${selector}'`",
                  description: 'Wait selector',
                  name: 'waitForSelector',
                  needSelectors: ['selector'],
                  type: 'atom',
                },
                { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                {
                  allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
                  bindData: { selectorNumber: 'selectorNumber' },
                  description: 'Click',
                  name: 'clickSelectorRaw',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
              ],
            },
          ],
        },
        {
          description: 'Открываем смену',
          logOptions: { logChildren: false },
          name: 'открытиеСмены',
          runTest: [
            {
              allowOptions: [
                'count',
                'timeDelayBeforeClick',
                'button',
                'logAfter',
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'timeDelayAfterClick',
                'waitingTime',
              ],
              bindSelectors: { selector: 'session.openButton' },
              description: 'Нажимаем "Открыть смену"',
              logOptions: { logChildren: false },
              name: 'clickSelector',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              runTest: [
                {
                  allowOptions: [
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'waitingTime',
                    'noThrow',
                  ],
                  bindDescription: "`Wait for: '${selector}'`",
                  description: 'Wait selector',
                  name: 'waitForSelector',
                  needSelectors: ['selector'],
                  type: 'atom',
                },
                { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                {
                  allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
                  bindData: { selectorNumber: 'selectorNumber' },
                  description: 'Click',
                  name: 'clickSelectorRaw',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
              ],
            },
            {
              allowOptions: [
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'waitingTime',
                'noThrow',
              ],
              bindDescription: "`Wait for: '${selector}'`",
              bindSelectors: { selector: 'mainView.menuButton' },
              description: 'Ждем закрытия окна и появления кнопки открытия бокового меню',
              name: 'waitForSelector',
              needSelectors: ['selector'],
              type: 'atom',
            },
          ],
        },
        {
          description: 'Открываем боковое меню',
          logOptions: { logChildren: false },
          name: 'боковоеМенюОткрыть',
          runTest: [
            {
              description: 'Удостовериться, что мы залогинены и доступно боковое меню',
              name: 'боковоеМенюДоступно',
              runTest: [
                {
                  description: 'Нужна проверка, что селектор не скрыт под другими селекторами, например, модалкой',
                  logOptions: { textColor: 'white', backgroundColor: 'red' },
                  name: 'todo',
                  type: 'atom',
                },
                {
                  allowOptions: ['waitingTime'],
                  allowResults: ['exists'],
                  bindSelectors: { selector: 'mainView.menuButton' },
                  description: 'Проверяем доступность селектора бокового меню',
                  logOptions: { logChildren: false },
                  name: 'checkSelector',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  options: { waitingTime: 500 },
                  runTest: [
                    {
                      allowOptions: [
                        'hidden',
                        'visible',
                        'timeDelayBeforeWait',
                        'timeDelayAfterWait',
                        'waitingTime',
                        'noThrow',
                      ],
                      bindDescription: "`Wait for: '${selector}'`",
                      bindSelectors: { selector: 'selector' },
                      name: 'waitForSelector',
                      needSelectors: ['selector'],
                      options: { noThrow: true, waitingTime: 1 },
                      type: 'atom',
                    },
                    { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                    {
                      allowResults: ['exists'],
                      bindData: { selectorNumber: 'selectorNumber' },
                      bindSelectors: { selector: 'selector' },
                      name: 'checkSelectorRaw',
                      needData: ['selectorNumber?'],
                      needSelectors: ['selector'],
                      type: 'atom',
                    },
                  ],
                  type: 'atom',
                },
              ],
            },
            {
              allowOptions: [
                'count',
                'timeDelayBeforeClick',
                'button',
                'logAfter',
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'timeDelayAfterClick',
                'waitingTime',
              ],
              bindSelectors: { selector: 'mainView.menuButton' },
              description: 'Кликаем на бутерброд бокового меню и ждем пока оно откроется',
              logOptions: { logChildren: false },
              name: 'clickSelector',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              options: { timeDelayAfterClick: 25 },
              runTest: [
                {
                  allowOptions: [
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'waitingTime',
                    'noThrow',
                  ],
                  bindDescription: "`Wait for: '${selector}'`",
                  description: 'Wait selector',
                  name: 'waitForSelector',
                  needSelectors: ['selector'],
                  type: 'atom',
                },
                { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                {
                  allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
                  bindData: { selectorNumber: 'selectorNumber' },
                  description: 'Click',
                  name: 'clickSelectorRaw',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
              ],
            },
          ],
        },
        {
          allowOptions: [
            'count',
            'timeDelayBeforeClick',
            'button',
            'logAfter',
            'hidden',
            'visible',
            'timeDelayBeforeWait',
            'timeDelayAfterWait',
            'timeDelayAfterClick',
            'waitingTime',
          ],
          description: 'Выбираем "Выход"',
          logOptions: { logChildren: false },
          name: 'clickSelector',
          needData: ['selectorNumber?'],
          needSelectors: ['selector'],
          runTest: [
            {
              allowOptions: [
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'waitingTime',
                'noThrow',
              ],
              bindDescription: "`Wait for: '${selector}'`",
              description: 'Wait selector',
              name: 'waitForSelector',
              needSelectors: ['selector'],
              type: 'atom',
            },
            { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
            {
              allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
              bindData: { selectorNumber: 'selectorNumber' },
              description: 'Click',
              name: 'clickSelectorRaw',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              type: 'atom',
            },
          ],
        },
        {
          allowOptions: ['waitingTime'],
          allowResults: ['exists'],
          description: 'Отобразилось окно "Закрыть смену"',
          errorIfResult: '!exists',
          logOptions: { logChildren: false },
          name: 'checkSelector',
          needData: ['selectorNumber?'],
          needSelectors: ['selector'],
          options: { waitingTime: 100 },
          runTest: [
            {
              allowOptions: [
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'waitingTime',
                'noThrow',
              ],
              bindDescription: "`Wait for: '${selector}'`",
              bindSelectors: { selector: 'selector' },
              name: 'waitForSelector',
              needSelectors: ['selector'],
              options: { noThrow: true, waitingTime: 1 },
              type: 'atom',
            },
            { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
            {
              allowResults: ['exists'],
              bindData: { selectorNumber: 'selectorNumber' },
              bindSelectors: { selector: 'selector' },
              name: 'checkSelectorRaw',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              type: 'atom',
            },
          ],
          type: 'atom',
        },
        {
          allowOptions: [
            'count',
            'timeDelayBeforeClick',
            'button',
            'logAfter',
            'hidden',
            'visible',
            'timeDelayBeforeWait',
            'timeDelayAfterWait',
            'timeDelayAfterClick',
            'waitingTime',
          ],
          bindSelectors: { selector: 'session.buttonCloseSession' },
          description: 'Нажимаем "Закрыть смену"',
          logOptions: { logChildren: false },
          name: 'clickSelector',
          needData: ['selectorNumber?'],
          needSelectors: ['selector'],
          runTest: [
            {
              allowOptions: [
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'waitingTime',
                'noThrow',
              ],
              bindDescription: "`Wait for: '${selector}'`",
              description: 'Wait selector',
              name: 'waitForSelector',
              needSelectors: ['selector'],
              type: 'atom',
            },
            { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
            {
              allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
              bindData: { selectorNumber: 'selectorNumber' },
              description: 'Click',
              name: 'clickSelectorRaw',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              type: 'atom',
            },
          ],
        },
        {
          allowOptions: ['hidden', 'visible', 'timeDelayBeforeWait', 'timeDelayAfterWait', 'waitingTime', 'noThrow'],
          bindDescription: "`Wait for: '${selector}'`",
          bindSelectors: { selector: 'auth.version' },
          description: 'Ожидаем окна авторизации. Ждем плашку с версией.',
          name: 'waitForSelector',
          needSelectors: ['selector'],
          type: 'atom',
        },
      ],
      tags: ['авторизация', 'закрытиеСмены'],
      type: 'atom',
    },
    {
      description: 'Закрытие смены => Проверка данных в окне закрытия смены',
      descriptionExtend: [
        'Авторизоваться в кассу под администратором',
        'Открыть смену',
        'Добавить в чек свободную продажу',
        'Оплатить наличными',
        'Итог: В кассе есть наличные деньги',
        'Открыть боковое меню',
        'Нажать кнопку "Выход"',
        'Итог: Открылось окно закрытия смены',
        'Проверить: В окне закрытия смены отображается верный магазин, организация, касса, кассир, сумма наличных',
        'Ввести произвольный комментарий',
        'Нажать "Закрыть смену"',
        'Итог: Смена закрыта',
      ],
      logOptions: { textColor: 'black', backgroundColor: 'white' },
      name: 'case',
      runTest: [
        {
          bindDescription:
            "'Авторизуемся админом. Логин: ' + authData.loginElectron + ' Пароль: ' + authData.passwordElectron",
          logOptions: { logChildren: false },
          name: 'авторизацияСоВводомЛогина',
          needData: ['needSavePass?'],
          runTest: [
            {
              allowOptions: [
                'count',
                'timeDelayBeforeClick',
                'button',
                'logAfter',
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'timeDelayAfterClick',
                'waitingTime',
              ],
              bindSelectors: { selector: 'auth.selectPasswordEnter' },
              description: 'Открываем вкладку "По паролю"',
              logOptions: { logChildren: false },
              name: 'clickSelector',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              runTest: [
                {
                  allowOptions: [
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'waitingTime',
                    'noThrow',
                  ],
                  bindDescription: "`Wait for: '${selector}'`",
                  description: 'Wait selector',
                  name: 'waitForSelector',
                  needSelectors: ['selector'],
                  type: 'atom',
                },
                { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                {
                  allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
                  bindData: { selectorNumber: 'selectorNumber' },
                  description: 'Click',
                  name: 'clickSelectorRaw',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
              ],
            },
            {
              allowOptions: [
                'count',
                'timeDelayBeforeClick',
                'button',
                'logAfter',
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'timeDelayAfterClick',
                'waitingTime',
              ],
              bindSelectors: { selector: 'auth.showLoginInput' },
              description: "Нажимем на ссылку 'Кассир', чтобы увидеть поля ввода логина и пароля",
              logOptions: { logChildren: false },
              name: 'clickSelector',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              runTest: [
                {
                  allowOptions: [
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'waitingTime',
                    'noThrow',
                  ],
                  bindDescription: "`Wait for: '${selector}'`",
                  description: 'Wait selector',
                  name: 'waitForSelector',
                  needSelectors: ['selector'],
                  type: 'atom',
                },
                { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                {
                  allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
                  bindData: { selectorNumber: 'selectorNumber' },
                  description: 'Click',
                  name: 'clickSelectorRaw',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
              ],
            },
            {
              allowOptions: [
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'noClearInput',
                'waitingTime',
              ],
              bindData: { text: 'authData.loginElectron' },
              bindDescription: "'Вводим логин: ' + authData.loginElectron",
              bindSelectors: { selector: 'auth.inputLogin' },
              logOptions: { logChildren: false },
              name: 'typeInput',
              needData: ['text'],
              needSelectors: ['selector'],
              runTest: [
                {
                  allowOptions: [
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'waitingTime',
                    'noThrow',
                  ],
                  bindDescription: "`Wait for: '${selector}'`",
                  description: 'Wait selector',
                  name: 'waitForSelector',
                  needSelectors: ['selector'],
                  type: 'atom',
                },
                {
                  allowOptions: ['noClearInput'],
                  bindData: { text: 'text' },
                  bindDescription: "`Type text: '${text}' in input: '${selector}'`",
                  description: 'Type in selector',
                  name: 'typeInputRaw',
                  needData: ['text'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
              ],
            },
            {
              allowOptions: [
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'noClearInput',
                'waitingTime',
              ],
              bindData: { text: 'authData.passwordElectron' },
              bindDescription: "'Вводим пароль: ' + authData.passwordElectron",
              bindSelectors: { selector: 'auth.inputPassword' },
              logOptions: { logChildren: false },
              name: 'typeInput',
              needData: ['text'],
              needSelectors: ['selector'],
              runTest: [
                {
                  allowOptions: [
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'waitingTime',
                    'noThrow',
                  ],
                  bindDescription: "`Wait for: '${selector}'`",
                  description: 'Wait selector',
                  name: 'waitForSelector',
                  needSelectors: ['selector'],
                  type: 'atom',
                },
                {
                  allowOptions: ['noClearInput'],
                  bindData: { text: 'text' },
                  bindDescription: "`Type text: '${text}' in input: '${selector}'`",
                  description: 'Type in selector',
                  name: 'typeInputRaw',
                  needData: ['text'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
              ],
            },
            {
              allowOptions: [
                'count',
                'timeDelayBeforeClick',
                'button',
                'logAfter',
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'timeDelayAfterClick',
                'waitingTime',
              ],
              bindSelectors: { selector: 'auth.savePassCheckbox' },
              description: 'Ставим чекбокс "Сохранить пароль"',
              if: 'needSavePass !== null',
              logOptions: { logChildren: false },
              name: 'clickSelector',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              runTest: [
                {
                  allowOptions: [
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'waitingTime',
                    'noThrow',
                  ],
                  bindDescription: "`Wait for: '${selector}'`",
                  description: 'Wait selector',
                  name: 'waitForSelector',
                  needSelectors: ['selector'],
                  type: 'atom',
                },
                { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                {
                  allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
                  bindData: { selectorNumber: 'selectorNumber' },
                  description: 'Click',
                  name: 'clickSelectorRaw',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
              ],
            },
            {
              allowOptions: [
                'count',
                'timeDelayBeforeClick',
                'button',
                'logAfter',
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'timeDelayAfterClick',
                'waitingTime',
              ],
              bindSelectors: { selector: 'auth.inputSubmit' },
              description: 'Нажимаем кнопку логина',
              logOptions: { logChildren: false },
              name: 'clickSelector',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              runTest: [
                {
                  allowOptions: [
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'waitingTime',
                    'noThrow',
                  ],
                  bindDescription: "`Wait for: '${selector}'`",
                  description: 'Wait selector',
                  name: 'waitForSelector',
                  needSelectors: ['selector'],
                  type: 'atom',
                },
                { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                {
                  allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
                  bindData: { selectorNumber: 'selectorNumber' },
                  description: 'Click',
                  name: 'clickSelectorRaw',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
              ],
            },
          ],
        },
        {
          description: 'Открываем смену',
          logOptions: { logChildren: false },
          name: 'открытиеСмены',
          runTest: [
            {
              allowOptions: [
                'count',
                'timeDelayBeforeClick',
                'button',
                'logAfter',
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'timeDelayAfterClick',
                'waitingTime',
              ],
              bindSelectors: { selector: 'session.openButton' },
              description: 'Нажимаем "Открыть смену"',
              logOptions: { logChildren: false },
              name: 'clickSelector',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              runTest: [
                {
                  allowOptions: [
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'waitingTime',
                    'noThrow',
                  ],
                  bindDescription: "`Wait for: '${selector}'`",
                  description: 'Wait selector',
                  name: 'waitForSelector',
                  needSelectors: ['selector'],
                  type: 'atom',
                },
                { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                {
                  allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
                  bindData: { selectorNumber: 'selectorNumber' },
                  description: 'Click',
                  name: 'clickSelectorRaw',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
              ],
            },
            {
              allowOptions: [
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'waitingTime',
                'noThrow',
              ],
              bindDescription: "`Wait for: '${selector}'`",
              bindSelectors: { selector: 'mainView.menuButton' },
              description: 'Ждем закрытия окна и появления кнопки открытия бокового меню',
              name: 'waitForSelector',
              needSelectors: ['selector'],
              type: 'atom',
            },
          ],
        },
        {
          bindDescription: "`Добавим в чек 'Cвободная продажа' на ${сумма} рублей`",
          data: { сумма: 100 },
          logOptions: { logChildren: false },
          name: 'добавлениеВЧекСвободнойПродажи',
          needData: ['сумма'],
          runTest: [
            {
              allowOptions: [
                'count',
                'timeDelayBeforeClick',
                'button',
                'logAfter',
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'timeDelayAfterClick',
                'waitingTime',
              ],
              bindSelectors: { selector: 'freeSale.buttonFreeSale' },
              description: 'Клик по кнопке "Свободная продажа"',
              logOptions: { logChildren: false },
              name: 'clickSelector',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              runTest: [
                {
                  allowOptions: [
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'waitingTime',
                    'noThrow',
                  ],
                  bindDescription: "`Wait for: '${selector}'`",
                  description: 'Wait selector',
                  name: 'waitForSelector',
                  needSelectors: ['selector'],
                  type: 'atom',
                },
                { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                {
                  allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
                  bindData: { selectorNumber: 'selectorNumber' },
                  description: 'Click',
                  name: 'clickSelectorRaw',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
              ],
            },
            {
              allowOptions: [
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'noClearInput',
                'waitingTime',
              ],
              bindData: { text: 'сумма' },
              bindDescription: "`Wait selector: '${selector}' and type text: '${text}' in input`",
              description: 'Ввод суммы',
              logOptions: { logChildren: false },
              name: 'typeInput',
              needData: ['text'],
              needSelectors: ['selector'],
              runTest: [
                {
                  allowOptions: [
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'waitingTime',
                    'noThrow',
                  ],
                  bindDescription: "`Wait for: '${selector}'`",
                  description: 'Wait selector',
                  name: 'waitForSelector',
                  needSelectors: ['selector'],
                  type: 'atom',
                },
                {
                  allowOptions: ['noClearInput'],
                  bindData: { text: 'text' },
                  bindDescription: "`Type text: '${text}' in input: '${selector}'`",
                  description: 'Type in selector',
                  name: 'typeInputRaw',
                  needData: ['text'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
              ],
            },
            {
              allowOptions: [
                'count',
                'timeDelayBeforeClick',
                'button',
                'logAfter',
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'timeDelayAfterClick',
                'waitingTime',
              ],
              bindSelectors: { selector: 'calc.buttonEnter' },
              description: 'Нажатие Enter',
              logOptions: { logChildren: false },
              name: 'clickSelector',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              runTest: [
                {
                  allowOptions: [
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'waitingTime',
                    'noThrow',
                  ],
                  bindDescription: "`Wait for: '${selector}'`",
                  description: 'Wait selector',
                  name: 'waitForSelector',
                  needSelectors: ['selector'],
                  type: 'atom',
                },
                { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                {
                  allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
                  bindData: { selectorNumber: 'selectorNumber' },
                  description: 'Click',
                  name: 'clickSelectorRaw',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
              ],
            },
            {
              allowOptions: [
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'waitingTime',
                'noThrow',
              ],
              bindDescription: "`Wait for: '${selector}'`",
              bindSelectors: { selector: 'payment.buttonPayCash' },
              description: 'Ждем того, что чек сформирован, доступен выбор типа оплаты (наличными)',
              name: 'waitForSelector',
              needSelectors: ['selector'],
              type: 'atom',
            },
          ],
        },
        {
          allowResults: ['номерЧека'],
          description: 'Оплата чека наличными',
          logOptions: { logChildren: false },
          name: 'оплатаНаличными',
          needData: ['sno?', 'needClickCash?', 'checkSum?'],
          runTest: [
            {
              allowOptions: [
                'count',
                'timeDelayBeforeClick',
                'button',
                'logAfter',
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'timeDelayAfterClick',
                'waitingTime',
              ],
              bindSelectors: { selector: 'payment.buttonPayCash' },
              description: 'Клик по кнопке "Наличные"',
              if: 'needClickCash === null',
              logOptions: { logChildren: false },
              name: 'clickSelector',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              options: { timeDelayAfterClick: 200 },
              runTest: [
                {
                  allowOptions: [
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'waitingTime',
                    'noThrow',
                  ],
                  bindDescription: "`Wait for: '${selector}'`",
                  description: 'Wait selector',
                  name: 'waitForSelector',
                  needSelectors: ['selector'],
                  type: 'atom',
                },
                { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                {
                  allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
                  bindData: { selectorNumber: 'selectorNumber' },
                  description: 'Click',
                  name: 'clickSelectorRaw',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
              ],
            },
            {
              allowResults: ['text'],
              bindDescription: "`Get text from selector: '${selector}'`",
              bindSelectors: { selector: 'payment.inputSum' },
              description: 'Получаем сумму отображаемой суммы',
              if: 'checkSum',
              name: 'getText',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              type: 'atom',
            },
            {
              description: 'Проверяем, что внесено равно сумме чека',
              errorIf: 'sumCash !== checkSum',
              if: 'checkSum',
              name: 'blank',
              type: 'atom',
            },
            {
              allowOptions: [
                'count',
                'timeDelayBeforeClick',
                'button',
                'logAfter',
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'timeDelayAfterClick',
                'waitingTime',
              ],
              bindSelectors: { selector: 'payment.buttonPay' },
              description: 'Клик по кнопке "Оплата"',
              logOptions: { logChildren: false },
              name: 'clickSelector',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              runTest: [
                {
                  allowOptions: [
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'waitingTime',
                    'noThrow',
                  ],
                  bindDescription: "`Wait for: '${selector}'`",
                  description: 'Wait selector',
                  name: 'waitForSelector',
                  needSelectors: ['selector'],
                  type: 'atom',
                },
                { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                {
                  allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
                  bindData: { selectorNumber: 'selectorNumber' },
                  description: 'Click',
                  name: 'clickSelectorRaw',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
              ],
            },
            {
              bindData: { taxSystem: 'sno' },
              bindDescription: "'Выбираем СНО: ' + sno || 'ОСН'",
              description: 'Выбираем СНО. По умолчанию ОСН.',
              logOptions: { logChildren: false },
              name: 'выборСНО',
              needData: ['taxSystem?'],
              runTest: [
                { name: 'blank', type: 'atom' },
                {
                  allowOptions: ['waitingTime'],
                  allowResults: ['exists'],
                  description: 'Проверяем не вылезло ли окно выбора СНО',
                  logOptions: { logChildren: false },
                  name: 'checkSelector',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  options: { waitingTime: 100 },
                  runTest: [
                    {
                      allowOptions: [
                        'hidden',
                        'visible',
                        'timeDelayBeforeWait',
                        'timeDelayAfterWait',
                        'waitingTime',
                        'noThrow',
                      ],
                      bindDescription: "`Wait for: '${selector}'`",
                      bindSelectors: { selector: 'selector' },
                      name: 'waitForSelector',
                      needSelectors: ['selector'],
                      options: { noThrow: true, waitingTime: 1 },
                      type: 'atom',
                    },
                    { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                    {
                      allowResults: ['exists'],
                      bindData: { selectorNumber: 'selectorNumber' },
                      bindSelectors: { selector: 'selector' },
                      name: 'checkSelectorRaw',
                      needData: ['selectorNumber?'],
                      needSelectors: ['selector'],
                      type: 'atom',
                    },
                  ],
                  type: 'atom',
                },
                {
                  allowOptions: [
                    'count',
                    'timeDelayBeforeClick',
                    'button',
                    'logAfter',
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'timeDelayAfterClick',
                    'waitingTime',
                  ],
                  description: 'Выбираем СНО',
                  if: 'snoWindow',
                  logOptions: { logChildren: false },
                  name: 'clickSelector',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  runTest: [
                    {
                      allowOptions: [
                        'hidden',
                        'visible',
                        'timeDelayBeforeWait',
                        'timeDelayAfterWait',
                        'waitingTime',
                        'noThrow',
                      ],
                      bindDescription: "`Wait for: '${selector}'`",
                      description: 'Wait selector',
                      name: 'waitForSelector',
                      needSelectors: ['selector'],
                      type: 'atom',
                    },
                    { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                    {
                      allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
                      bindData: { selectorNumber: 'selectorNumber' },
                      description: 'Click',
                      name: 'clickSelectorRaw',
                      needData: ['selectorNumber?'],
                      needSelectors: ['selector'],
                      type: 'atom',
                    },
                  ],
                },
              ],
            },
            {
              allowOptions: [
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'waitingTime',
                'noThrow',
              ],
              bindDescription: "`Wait for: '${selector}'`",
              bindSelectors: { selector: 'payment.titleAfterPayment' },
              description: 'Проверяем, что оплата прошла, есть информация о последнем проведенном чеке',
              name: 'waitForSelector',
              needSelectors: ['selector'],
              type: 'atom',
            },
            {
              allowResults: ['text'],
              bindDescription: "`Get text from selector: '${selector}'`",
              description: 'Получим номер проведенного чека',
              name: 'getText',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              type: 'atom',
            },
          ],
        },
        {
          description: 'Открываем боковое меню',
          logOptions: { logChildren: false },
          name: 'боковоеМенюОткрыть',
          runTest: [
            {
              description: 'Удостовериться, что мы залогинены и доступно боковое меню',
              name: 'боковоеМенюДоступно',
              runTest: [
                {
                  description: 'Нужна проверка, что селектор не скрыт под другими селекторами, например, модалкой',
                  logOptions: { textColor: 'white', backgroundColor: 'red' },
                  name: 'todo',
                  type: 'atom',
                },
                {
                  allowOptions: ['waitingTime'],
                  allowResults: ['exists'],
                  bindSelectors: { selector: 'mainView.menuButton' },
                  description: 'Проверяем доступность селектора бокового меню',
                  logOptions: { logChildren: false },
                  name: 'checkSelector',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  options: { waitingTime: 500 },
                  runTest: [
                    {
                      allowOptions: [
                        'hidden',
                        'visible',
                        'timeDelayBeforeWait',
                        'timeDelayAfterWait',
                        'waitingTime',
                        'noThrow',
                      ],
                      bindDescription: "`Wait for: '${selector}'`",
                      bindSelectors: { selector: 'selector' },
                      name: 'waitForSelector',
                      needSelectors: ['selector'],
                      options: { noThrow: true, waitingTime: 1 },
                      type: 'atom',
                    },
                    { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                    {
                      allowResults: ['exists'],
                      bindData: { selectorNumber: 'selectorNumber' },
                      bindSelectors: { selector: 'selector' },
                      name: 'checkSelectorRaw',
                      needData: ['selectorNumber?'],
                      needSelectors: ['selector'],
                      type: 'atom',
                    },
                  ],
                  type: 'atom',
                },
              ],
            },
            {
              allowOptions: [
                'count',
                'timeDelayBeforeClick',
                'button',
                'logAfter',
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'timeDelayAfterClick',
                'waitingTime',
              ],
              bindSelectors: { selector: 'mainView.menuButton' },
              description: 'Кликаем на бутерброд бокового меню и ждем пока оно откроется',
              logOptions: { logChildren: false },
              name: 'clickSelector',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              options: { timeDelayAfterClick: 25 },
              runTest: [
                {
                  allowOptions: [
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'waitingTime',
                    'noThrow',
                  ],
                  bindDescription: "`Wait for: '${selector}'`",
                  description: 'Wait selector',
                  name: 'waitForSelector',
                  needSelectors: ['selector'],
                  type: 'atom',
                },
                { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                {
                  allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
                  bindData: { selectorNumber: 'selectorNumber' },
                  description: 'Click',
                  name: 'clickSelectorRaw',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
              ],
            },
          ],
        },
        {
          allowOptions: [
            'count',
            'timeDelayBeforeClick',
            'button',
            'logAfter',
            'hidden',
            'visible',
            'timeDelayBeforeWait',
            'timeDelayAfterWait',
            'timeDelayAfterClick',
            'waitingTime',
          ],
          description: 'Выбираем "Выход"',
          logOptions: { logChildren: false },
          name: 'clickSelector',
          needData: ['selectorNumber?'],
          needSelectors: ['selector'],
          runTest: [
            {
              allowOptions: [
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'waitingTime',
                'noThrow',
              ],
              bindDescription: "`Wait for: '${selector}'`",
              description: 'Wait selector',
              name: 'waitForSelector',
              needSelectors: ['selector'],
              type: 'atom',
            },
            { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
            {
              allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
              bindData: { selectorNumber: 'selectorNumber' },
              description: 'Click',
              name: 'clickSelectorRaw',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              type: 'atom',
            },
          ],
        },
        {
          allowOptions: ['waitingTime'],
          allowResults: ['exists'],
          description: 'Отобразилось окно "Закрыть смену"',
          errorIfResult: '!exists',
          logOptions: { logChildren: false },
          name: 'checkSelector',
          needData: ['selectorNumber?'],
          needSelectors: ['selector'],
          options: { waitingTime: 100 },
          runTest: [
            {
              allowOptions: [
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'waitingTime',
                'noThrow',
              ],
              bindDescription: "`Wait for: '${selector}'`",
              bindSelectors: { selector: 'selector' },
              name: 'waitForSelector',
              needSelectors: ['selector'],
              options: { noThrow: true, waitingTime: 1 },
              type: 'atom',
            },
            { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
            {
              allowResults: ['exists'],
              bindData: { selectorNumber: 'selectorNumber' },
              bindSelectors: { selector: 'selector' },
              name: 'checkSelectorRaw',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              type: 'atom',
            },
          ],
          type: 'atom',
        },
        {
          bindDescription: "`Wait time: '${time}'`",
          data: { time: 1000 },
          description: 'Подождем пока все данные прорисуются',
          name: 'waitTime',
          needData: ['time'],
          type: 'atom',
        },
        {
          allowResults: ['text'],
          bindDescription: "`Get text from selector: '${selector}'`",
          description: 'Проверяем наличные в кассе: 100р.',
          errorIfResult: "parseFloat(text.replace(/\\s+/, '').replace(',', '.')) != 100",
          name: 'getText',
          needData: ['selectorNumber?'],
          needSelectors: ['selector'],
          type: 'atom',
        },
        {
          allowResults: ['text'],
          bindDescription: "'Проверяем организацию: ' + organization.cashdeskOrganization",
          errorIfResult: "text.split(',')[0].trim() != organization.cashdeskOrganization",
          name: 'getText',
          needData: ['selectorNumber?'],
          needSelectors: ['selector'],
          type: 'atom',
        },
        {
          allowResults: ['text'],
          bindDescription: "'Проверяем магазин: ' + organization.cashdeskShop",
          errorIfResult: "text.split(',')[1].trim() != organization.cashdeskShop",
          name: 'getText',
          needData: ['selectorNumber?'],
          needSelectors: ['selector'],
          type: 'atom',
        },
        {
          allowResults: ['text'],
          bindDescription: "'Проверяем название кассы: ' + organization.cashdeskName",
          errorIfResult: 'text.trim() != organization.cashdeskName',
          name: 'getText',
          needData: ['selectorNumber?'],
          needSelectors: ['selector'],
          type: 'atom',
        },
        {
          allowResults: ['text'],
          bindDescription: "'Проверяем имени кассира: ' + authData.cashierName",
          errorIfResult: 'text.trim() != authData.cashierName',
          name: 'getText',
          needData: ['selectorNumber?'],
          needSelectors: ['selector'],
          type: 'atom',
        },
        {
          allowOptions: [
            'hidden',
            'visible',
            'timeDelayBeforeWait',
            'timeDelayAfterWait',
            'noClearInput',
            'waitingTime',
          ],
          bindDescription: "`Wait selector: '${selector}' and type text: '${text}' in input`",
          data: { text: 'Я комментарий' },
          description: 'Вводим произвольный комментарий',
          logOptions: { logChildren: false },
          name: 'typeInput',
          needData: ['text'],
          needSelectors: ['selector'],
          runTest: [
            {
              allowOptions: [
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'waitingTime',
                'noThrow',
              ],
              bindDescription: "`Wait for: '${selector}'`",
              description: 'Wait selector',
              name: 'waitForSelector',
              needSelectors: ['selector'],
              type: 'atom',
            },
            {
              allowOptions: ['noClearInput'],
              bindData: { text: 'text' },
              bindDescription: "`Type text: '${text}' in input: '${selector}'`",
              description: 'Type in selector',
              name: 'typeInputRaw',
              needData: ['text'],
              needSelectors: ['selector'],
              type: 'atom',
            },
          ],
        },
        {
          allowOptions: [
            'count',
            'timeDelayBeforeClick',
            'button',
            'logAfter',
            'hidden',
            'visible',
            'timeDelayBeforeWait',
            'timeDelayAfterWait',
            'timeDelayAfterClick',
            'waitingTime',
          ],
          bindSelectors: { selector: 'session.buttonCloseSession' },
          description: 'Нажимаем "Закрыть смену"',
          logOptions: { logChildren: false },
          name: 'clickSelector',
          needData: ['selectorNumber?'],
          needSelectors: ['selector'],
          runTest: [
            {
              allowOptions: [
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'waitingTime',
                'noThrow',
              ],
              bindDescription: "`Wait for: '${selector}'`",
              description: 'Wait selector',
              name: 'waitForSelector',
              needSelectors: ['selector'],
              type: 'atom',
            },
            { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
            {
              allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
              bindData: { selectorNumber: 'selectorNumber' },
              description: 'Click',
              name: 'clickSelectorRaw',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              type: 'atom',
            },
          ],
        },
        {
          allowOptions: ['hidden', 'visible', 'timeDelayBeforeWait', 'timeDelayAfterWait', 'waitingTime', 'noThrow'],
          bindDescription: "`Wait for: '${selector}'`",
          bindSelectors: { selector: 'auth.version' },
          description: 'Ожидаем окна авторизации. Ждем плашку с версией.',
          name: 'waitForSelector',
          needSelectors: ['selector'],
          type: 'atom',
        },
      ],
      tags: ['авторизация', 'закрытиеСмены'],
      type: 'atom',
    },
    {
      description: 'Закрытие смены => Полное изъятие',
      descriptionExtend: [
        'Авторизоваться в кассу под администратором',
        'Открыть смену',
        'Добавить в чек продажу',
        'Оплатить наличными',
        'Открыть основное меню',
        'Выбрать "Выход"',
        'Итог: Открылось окно закрытия смены',
        'Нажать закрыть смену с инкассацией всей суммы',
        'Авторизоваться в кассу под администратором',
        'Открыть смену',
        'Открыть основное меню',
        'Нажать "Выход"',
        'Итог: Открылось окно закрытия смены остатки = 0',
        'Закрыть смену',
      ],
      logOptions: { textColor: 'white', backgroundColor: 'red' },
      name: 'todo',
      tags: ['авторизация', 'закрытиеСмены'],
      type: 'atom',
    },
    {
      description: 'Закрытие смены => Не полное изъятие/ переходящий остаток',
      descriptionExtend: [
        'Авторизоваться в кассу',
        'Открыть смену',
        'Провести продажу за наличные на 100р',
        'Открыть основное меню',
        'Выбрать "Выход"',
        'Итог: Открылось окно закрытия смены',
        'Сумма денег = 100р - поле для инкассации активно с указанной суммой инкассации = 100р, чек-бок инкассации активирован',
        'В поле ввода изменить сумму изъятия = 47р',
        'Нажать кнопку "Закрыть смену"',
        'Итог: на фискальнике распечатался Z-отчет',
        'Авторизоваться в кассе',
        'Открыть смену',
        'Проверить деньги в кассе = 53р',
        'Открыть основное меню',
        'Выбрать "Выход"',
        'Итог: Открылось окно закрытия смены',
        'Сумма денег = 53р',
        'Нажать кнопку "Закрыть смену"',
        'Итог: на фискальнике распечатался Z-отчет',
        'Закрыть смену',
      ],
      logOptions: { textColor: 'white', backgroundColor: 'red' },
      name: 'todo',
      tags: ['авторизация', 'закрытиеСмены'],
      type: 'atom',
    },
    {
      description: 'Закрытие смены => Галочка инкассация',
      descriptionExtend: [
        'Авторизоваться в кассу под администратором',
        'Открыть смену',
        'Добавить в чек свободную продажу',
        'Оплатить наличными',
        'Итог: В кассе есть наличные деньги',
        'Открыть основное меню',
        'Выбрать "Выход"',
        'Итог: Поле инкассация - активно, чек-бокс инкассации активирован, присуствуют деньги для инкассации',
        'Убрать галку с чек бокса инкассации',
        'Итог: Поле ввода неактивно и пусто',
        'Установить галку',
        'Итог: Поле ввода активно, в поле инкассации значение совпадает с суммой денег в кассе',
        'Закрыть смену',
      ],
      logOptions: { textColor: 'white', backgroundColor: 'red' },
      name: 'todo',
      tags: ['авторизация', 'закрытиеСмены'],
      type: 'atom',
    },
    {
      description: 'Закрытие смены => Отображение кассира в окне закрытия смены',
      descriptionExtend: [
        'Авторизоваться в кассу под администратором',
        'Открыть смену',
        'Открыть основное меню',
        'Выбрать "Выход"',
        'Итог: В окне закрытия смены отображен пользователь админ',
        'Закрыть окно',
        'Открыть основное меню',
        'Выбрать "Блокировка кассы"',
        'Авторизоваться в кассу под кассиром',
        'Открыть основное меню',
        'Выбрать "Выход"',
        'Итог: В окне закрытия смены отображен пользователь кассир',
        'Закрыть смену',
      ],
      logOptions: { textColor: 'white', backgroundColor: 'red' },
      name: 'todo',
      tags: ['авторизация', 'закрытиеСмены'],
      type: 'atom',
    },
    {
      description: 'Под админом. Авторизация с неверным логином и паролем',
      logOptions: { textColor: 'white', backgroundColor: 'red' },
      name: 'todo',
      tags: ['авторизация'],
      type: 'atom',
    },
    {
      description: 'Под админом. Проверка ввода пинкода админа',
      logOptions: { textColor: 'white', backgroundColor: 'red' },
      name: 'todo',
      tags: ['авторизация'],
      type: 'atom',
    },
    {
      description: 'Под кассиром. Проверка ввода пинкода кассира',
      logOptions: { textColor: 'white', backgroundColor: 'red' },
      name: 'todo',
      tags: ['авторизация'],
      type: 'atom',
    },
    {
      description: 'Проверка подвала страницы',
      logOptions: { textColor: 'white', backgroundColor: 'red' },
      name: 'todo',
      tags: ['авторизация'],
      type: 'atom',
    },
    {
      description: 'Проверка кнопки "Забыли пароль?"',
      logOptions: { textColor: 'white', backgroundColor: 'red' },
      name: 'todo',
      tags: ['авторизация'],
      type: 'atom',
    },
    {
      description: 'Проверка кнопки "Помощь"',
      logOptions: { textColor: 'white', backgroundColor: 'red' },
      name: 'todo',
      tags: ['авторизация'],
      type: 'atom',
    },
    {
      description: 'Проверка "Показать пароль" в поле ввода',
      logOptions: { textColor: 'white', backgroundColor: 'red' },
      name: 'todo',
      tags: ['авторизация'],
      type: 'atom',
    },
    {
      data: { безАвторизации: true },
      description: 'Окончание тесткейса',
      name: 'afterMainTests',
      needData: ['безАвторизации?'],
      runTest: [
        {
          description: 'Закрываем смену',
          if: '!безАвторизации',
          logOptions: { logChildren: false },
          name: 'закрытиеСмены',
          runTest: [
            {
              allowOptions: [
                'count',
                'timeDelayBeforeClick',
                'button',
                'logAfter',
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'timeDelayAfterClick',
                'waitingTime',
              ],
              bindSelectors: { selector: 'mainView.menuButton' },
              description: 'Открываем основное меню по кнопке',
              logOptions: { logChildren: false },
              name: 'clickSelector',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              options: { timeDelayAfterWait: 20 },
              runTest: [
                {
                  allowOptions: [
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'waitingTime',
                    'noThrow',
                  ],
                  bindDescription: "`Wait for: '${selector}'`",
                  description: 'Wait selector',
                  name: 'waitForSelector',
                  needSelectors: ['selector'],
                  type: 'atom',
                },
                { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                {
                  allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
                  bindData: { selectorNumber: 'selectorNumber' },
                  description: 'Click',
                  name: 'clickSelectorRaw',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
              ],
            },
            {
              allowOptions: [
                'count',
                'timeDelayBeforeClick',
                'button',
                'logAfter',
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'timeDelayAfterClick',
                'waitingTime',
              ],
              bindSelectors: { selector: 'mainMenu.buttonExit' },
              description: 'Ждем появления меню и нажимаем кнопку "Выход"',
              logOptions: { logChildren: false },
              name: 'clickSelector',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              options: { timeDelayAfterWait: 20 },
              runTest: [
                {
                  allowOptions: [
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'waitingTime',
                    'noThrow',
                  ],
                  bindDescription: "`Wait for: '${selector}'`",
                  description: 'Wait selector',
                  name: 'waitForSelector',
                  needSelectors: ['selector'],
                  type: 'atom',
                },
                { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                {
                  allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
                  bindData: { selectorNumber: 'selectorNumber' },
                  description: 'Click',
                  name: 'clickSelectorRaw',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
              ],
            },
            {
              allowOptions: [
                'count',
                'timeDelayBeforeClick',
                'button',
                'logAfter',
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'timeDelayAfterClick',
                'waitingTime',
              ],
              bindSelectors: { selector: 'session.buttonCloseSession' },
              description: 'Нажимаем "Закрыть смену"',
              logOptions: { logChildren: false },
              name: 'clickSelector',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              runTest: [
                {
                  allowOptions: [
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'waitingTime',
                    'noThrow',
                  ],
                  bindDescription: "`Wait for: '${selector}'`",
                  description: 'Wait selector',
                  name: 'waitForSelector',
                  needSelectors: ['selector'],
                  type: 'atom',
                },
                { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                {
                  allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
                  bindData: { selectorNumber: 'selectorNumber' },
                  description: 'Click',
                  name: 'clickSelectorRaw',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
              ],
            },
            {
              allowOptions: ['waitingTime'],
              allowResults: ['exists'],
              description: 'Если есть активный чек то всплывает окно',
              logOptions: { logChildren: false },
              name: 'checkSelector',
              needData: ['selectorNumber?'],
              needSelectors: ['selector'],
              options: { waitingTime: 50 },
              runTest: [
                {
                  allowOptions: [
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'waitingTime',
                    'noThrow',
                  ],
                  bindDescription: "`Wait for: '${selector}'`",
                  bindSelectors: { selector: 'selector' },
                  name: 'waitForSelector',
                  needSelectors: ['selector'],
                  options: { noThrow: true, waitingTime: 1 },
                  type: 'atom',
                },
                { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                {
                  allowResults: ['exists'],
                  bindData: { selectorNumber: 'selectorNumber' },
                  bindSelectors: { selector: 'selector' },
                  name: 'checkSelectorRaw',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  type: 'atom',
                },
              ],
              type: 'atom',
            },
            {
              description: 'Появилось окно активного чека',
              if: 'естьАктивныйЧек',
              name: 'if',
              runTest: [
                {
                  allowOptions: [
                    'count',
                    'timeDelayBeforeClick',
                    'button',
                    'logAfter',
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'timeDelayAfterClick',
                    'waitingTime',
                  ],
                  description: 'Нажимаем "Удалить чек"',
                  logOptions: { logChildren: false },
                  name: 'clickSelector',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  runTest: [
                    {
                      allowOptions: [
                        'hidden',
                        'visible',
                        'timeDelayBeforeWait',
                        'timeDelayAfterWait',
                        'waitingTime',
                        'noThrow',
                      ],
                      bindDescription: "`Wait for: '${selector}'`",
                      description: 'Wait selector',
                      name: 'waitForSelector',
                      needSelectors: ['selector'],
                      type: 'atom',
                    },
                    { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                    {
                      allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
                      bindData: { selectorNumber: 'selectorNumber' },
                      description: 'Click',
                      name: 'clickSelectorRaw',
                      needData: ['selectorNumber?'],
                      needSelectors: ['selector'],
                      type: 'atom',
                    },
                  ],
                },
                {
                  allowOptions: [
                    'count',
                    'timeDelayBeforeClick',
                    'button',
                    'logAfter',
                    'hidden',
                    'visible',
                    'timeDelayBeforeWait',
                    'timeDelayAfterWait',
                    'timeDelayAfterClick',
                    'waitingTime',
                  ],
                  bindSelectors: { selector: 'session.buttonCloseSession' },
                  description: 'Нажимаем "Закрыть смену" еще раз',
                  logOptions: { logChildren: false },
                  name: 'clickSelector',
                  needData: ['selectorNumber?'],
                  needSelectors: ['selector'],
                  runTest: [
                    {
                      allowOptions: [
                        'hidden',
                        'visible',
                        'timeDelayBeforeWait',
                        'timeDelayAfterWait',
                        'waitingTime',
                        'noThrow',
                      ],
                      bindDescription: "`Wait for: '${selector}'`",
                      description: 'Wait selector',
                      name: 'waitForSelector',
                      needSelectors: ['selector'],
                      type: 'atom',
                    },
                    { if: 'selectorNumber === null', name: 'blank', type: 'atom' },
                    {
                      allowOptions: ['count', 'timeDelayBeforeClick', 'button', 'logAfter', 'timeDelayAfterClick'],
                      bindData: { selectorNumber: 'selectorNumber' },
                      description: 'Click',
                      name: 'clickSelectorRaw',
                      needData: ['selectorNumber?'],
                      needSelectors: ['selector'],
                      type: 'atom',
                    },
                  ],
                },
              ],
              type: 'atom',
            },
            {
              allowOptions: [
                'hidden',
                'visible',
                'timeDelayBeforeWait',
                'timeDelayAfterWait',
                'waitingTime',
                'noThrow',
              ],
              bindDescription: "`Wait for: '${selector}'`",
              bindSelectors: { selector: 'auth.version' },
              description: 'Ожидаем окна авторизации. Ждем плашку с версией.',
              name: 'waitForSelector',
              needSelectors: ['selector'],
              type: 'atom',
            },
          ],
        },
        {
          bindData: { envName: 'mainEnvName' },
          bindDescription: "`Close environment: '${envName}'`",
          description: 'Закрытие кассы',
          inlineJS:
            "const { envName } = this.data; await this.envs.closeEnv(envName); await this.log({ text: `Environment '${envName}' close.` });\n",
          name: 'envClose',
          needData: ['envName'],
          type: 'atom',
        },
      ],
    },
  ],
  tags: ['авторизация', 'закрытиеСмены'],
};
